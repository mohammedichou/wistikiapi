{"version":3,"sources":["server.js"],"names":["debug","require","initializeSwagger","initializeMiddleware","process","on","reason","p","env","NODE_ENV","swaggerObject","host","schemes","sqlLogger","clear","build","fs","readFileSync","BUILD_REV","AWS","config","loadFromPath","sequelize","authenticate","then","err","error","errorLog","swaggerMiddleware","app","use","bodyParser","json","limit","environmentMiddleware","swaggerRouter","controllers","swaggerMetadata","swaggerSecurity","oauth2","req","def","scopes","callback","swaggerValidator","validateResponse","res","next","header","packageJson","version","swaggerUi","configure","pingTimeout","pingInterval","transports","db","redis","port","collection","jwtCheck","feathers","useragent","headers","validationErrorHandler","handler","listen","get","serverInfo","event","environment","awsLog"],"mappings":"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","file":"server.js","sourcesContent":["import 'source-map-support/register';\n// For mapping errors from es5 to es6\nimport feathers from 'feathers';\nimport sync from 'feathers-sync';\nimport socketio from 'feathers-socketio';\nimport rest from 'feathers-rest';\nimport bodyParser from 'body-parser';\nimport hooks from 'feathers-hooks';\nimport configuration from 'feathers-configuration';\nimport uaparser from 'ua-parser-js';\nimport compression from 'compression';\nimport AWS from 'aws-sdk';\nimport fs from 'fs';\n\nimport services from './services';\nimport localHooks from './hooks';\nimport config from './config';\nimport sequelize from './db';\nimport swaggerObject from '../api/2.0/swagger.json';\nimport jwtCheck from './middlewares/jwtCheckMiddleware';\nimport { handler } from './modules/errors/handler';\nimport { awsLog, errorLog, sqlLogger } from './lib/logger';\nimport validationErrorHandler from './middlewares/validationErrorHandler';\nimport socket from './socket';\nimport packageJson from '../package.json';\nimport environmentMiddleware from './middlewares/environmentMiddleware';\n\nconst debug = require('debug')('darwin:server');\nconst initializeSwagger = require('swagger-tools').initializeMiddleware;\n\nprocess.on('unhandledRejection', (reason, p) => {\n  if (process.env.NODE_ENV === 'development'){\n    //console.log('Unhandled Rejection at: Promise', p, 'reason:', reason);\n  }\n  // application specific logging, throwing an error, or other logic here\n});\n\nif (process.env.NODE_ENV === 'production') {\n  swaggerObject.host = 'darwin.wistiki.com';\n  swaggerObject.schemes = ['https'];\n  sqlLogger.clear(); // disable sql logging\n} else if (process.env.NODE_ENV === 'staging') {\n  swaggerObject.host = 'staging.wistiki.com';\n  swaggerObject.schemes = ['https'];\n} else if (process.env.NODE_ENV === 'sandbox') {\n  swaggerObject.host = 'darwin.wistiki.io';\n  swaggerObject.schemes = ['http'];\n} else if (process.env.NODE_ENV === 'development') {\n  swaggerObject.host = '127.0.0.1:3000';\n  swaggerObject.schemes = ['http'];\n  //sqlLogger.clear(); // disable sql logging\n}\nconst build = fs.readFileSync('./build');\nprocess.env.BUILD_REV = build;\n\nAWS.config.loadFromPath('./dist/config/aws_credentials.json');\n\n// Check database connection\nsequelize.authenticate().then(() => {\n  debug('Connection has been established successfully.');\n}, (err) => {\n  debug('Unable to connect to the database', { error: err });\n  errorLog.error('Unable to connect to the database', { error: err });\n});\n\n// Configure non-Swagger related middleware and server components prior to Swagger middleware\ninitializeSwagger(swaggerObject, (swaggerMiddleware) => {\n  const app = feathers();\n  app.use(bodyParser.json({ limit: '5mb' }));\n  app.use(environmentMiddleware);\n  app.use(swaggerMiddleware.swaggerRouter({ controllers: './dist/services' }));\n\n  // Interpret Swagger resources and attach metadata to request\n  // must be first in swagger-tools middleware chain\n  app.use(swaggerMiddleware.swaggerMetadata());\n\n  // Provide the security handlers\n  app.use(swaggerMiddleware.swaggerSecurity({\n    oauth2(req, def, scopes, callback) {\n      // Do real stuff here\n    },\n  }));\n\n  // Validate Swagger requests\n  app.use(swaggerMiddleware.swaggerValidator({\n    validateResponse: false,\n  }));\n\n  app.use((req, res, next) => {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE, OPTIONS');\n    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, ' +\n      'Content-Type, Accept, Authorization, ' +\n      'X-Wistiki-Device-Name, X-Wistiki-Device-Uid, X-Wistiki-MasterKey,' +\n      ' X-Wistiki-Environment, x-wistiki-device-uid, x-wistiki-refresh-token');\n    // Todo: mettre tout en maj Ã  changer dans refresh token swagger\n    res.header('x-powered-by', `Wistiki ${packageJson.version}`);\n    next();\n  });\n\n  // compress all requests\n  app.use(compression());\n\n  // Serve the Swagger documents and Swagger UI\n  app.use(swaggerMiddleware.swaggerUi({ swaggerUi: '/swagger' }));\n\n  app.configure(rest()).configure(socketio({\n    pingTimeout: 5000,\n    pingInterval: 55000,\n    transports: [\n      'websocket',\n      'flashsocket',\n      'htmlfile',\n      'xhr-polling',\n      'jsonp-polling',\n      'polling',\n    ],\n  }, socket(app))).configure(sync({\n    db: `redis://${config.redis.host}:${config.redis.port}`,\n    collection: 'events',\n  })).use(jwtCheck)\n    .use((req, res, next) => {\n      req.feathers.useragent = uaparser(req.headers['user-agent']);\n      next();\n    })\n    .use((req, res, next) => {\n      req.feathers.headers = req.headers;\n      next();\n    })\n    .configure(hooks())\n    .configure(configuration())\n    .configure(services())\n    .configure(localHooks());\n  // intercept swagger validation tool errors\n  app.use(validationErrorHandler);\n  app.use(handler);\n  app.listen(app.get('port'), () => {\n    const serverInfo = {\n      event: 'server start',\n      host: app.get('hostname'),\n      port: app.get('port'),\n      environment: process.env.NODE_ENV,\n    };\n    debug(serverInfo);\n    awsLog.debug('Server up and running', serverInfo);\n  });\n});\n\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}