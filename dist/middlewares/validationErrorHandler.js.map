{"version":3,"sources":["middlewares/validationErrorHandler.js"],"names":["e","req","res","next","err","SyntaxError","debug","error","Error","errors","code","message","BadRequest","results","map","field","path","FeathersError","errorLog","event","stack","stackTrace","parse","logger","environment","GeneralError","require"],"mappings":";;;;;;kBAee,UAAUA,CAAV,EAAaC,GAAb,EAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AAC1C,MAAIC,MAAMJ,CAAV;AACA,MAAII,eAAeC,WAAnB,EAAgC;AAC9BC,UAAM,gCAAN;;AAEA,QAAMC,QAAQ,IAAIC,KAAJ,CAAU,cAAV,CAAd;AACAD,UAAME,MAAN,GAAe,CAAC,EAAEC,MAAM,cAAR,EAAwBC,SAASP,IAAIO,OAArC,EAAD,CAAf;AACAP,UAAM,IAAIK,gBAAOG,UAAX,CAAsBL,KAAtB,CAAN;AACD,GAND,MAMO,IAAIH,eAAeI,KAAf,IAAwBJ,IAAIM,IAAJ,KAAa,0BAAzC,EAAqE;AAC1EJ,UAAM,6CAAN;AACA,QAAMC,SAAQ,IAAIC,KAAJ,CAAU,0BAAV,CAAd;AACAD,WAAME,MAAN,GAAeL,IAAIS,OAAJ,CAAYJ,MAAZ,CAAmBK,GAAnB,CAAuB;AAAA,aAAM;AAC1CJ,cAAMV,EAAEU,IADkC;AAE1CC,iBAASX,EAAEW,OAF+B;AAG1CI,eAAOf,EAAEgB;AAHiC,OAAN;AAAA,KAAvB,CAAf;AAKAZ,UAAM,IAAIK,gBAAOG,UAAX,CAAsBL,MAAtB,CAAN;AACD,GATM,MASA,IAAIH,eAAeI,KAAf,IAAwBJ,IAAIM,IAAJ,KAAa,UAAzC,EAAqD;;AAE1DJ,UAAM,sBAAN;AACA,QAAMC,UAAQ,IAAIC,KAAJ,CAAU,gBAAV,CAAd;AACAD,YAAME,MAAN,GAAe,CAACL,IAAIO,OAAL,CAAf;AACAP,UAAM,IAAIK,gBAAOG,UAAX,CAAsBL,OAAtB,CAAN;AACD,GANM,MAMA,IAAI,EAAEH,eAAeK,gBAAOQ,aAAxB,CAAJ,EAA4C;;AAEjDX,UAAM,qBAAN;AACAY,qBAASX,KAAT,CAAe,cAAf,EAA+B;AAC7BY,aAAO,cADsB;AAE7BZ,aAAO,EAAEG,MAAMN,IAAIM,IAAZ,EAAkBC,SAASP,IAAIO,OAA/B,EAAwCS,OAAOC,qBAAWC,KAAX,CAAiBlB,GAAjB,CAA/C;AAFsB,KAA/B;;AAKAmB,qBAAOhB,KAAP,CAAaH,GAAb;AACAE,UAAM,gBAAN,EAAwBF,GAAxB;;AAEA,QAAIoB,iBAAYlB,KAAhB,EAAuB;AACrBF,YAAM,IAAIK,gBAAOgB,YAAX,CAAwBrB,IAAIO,OAA5B,EAAqC,EAAEF,QAAQY,qBAAWC,KAAX,CAAiBlB,GAAjB,CAAV,EAArC,CAAN;AACD,KAFD,MAEO;AACLA,YAAM,IAAIK,gBAAOgB,YAAX,CAAwB,cAAxB,CAAN;AACD;AAEF;AACDtB,OAAKC,GAAL;AACD,C;;AAzDD;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAME,QAAQoB,QAAQ,OAAR,EAAiB,sCAAjB,CAAd;AACA","file":"validationErrorHandler.js","sourcesContent":["import errors from 'feathers-errors/lib/index';\nimport stackTrace from 'stack-trace';\nimport environment from '../config';\nimport logger, { errorLog } from '../lib/logger';\n\nconst debug = require('debug')('darwin:errors:validationErrorHandler');\n/**\n * Middleware used to catch request validation via Swagger Validation\n * and translate them to a http error\n *\n * @param e - An error\n * @param req - the request object\n * @param res - the response object\n * @param next - callback to call for next step in middleware chain\n */\nexport default function (e, req, res, next) {\n  let err = e;\n  if (err instanceof SyntaxError) {\n    debug('err is instance of SyntaxError');\n\n    const error = new Error('SYNTAX_ERROR');\n    error.errors = [{ code: 'SYNTAX_ERROR', message: err.message }];\n    err = new errors.BadRequest(error);\n  } else if (err instanceof Error && err.code === 'SCHEMA_VALIDATION_FAILED') {\n    debug('err is instance of SCHEMA_VALIDATION_FAILED');\n    const error = new Error('SCHEMA_VALIDATION_FAILED');\n    error.errors = err.results.errors.map(e => ({\n      code: e.code,\n      message: e.message,\n      field: e.path,\n    }));\n    err = new errors.BadRequest(error);\n  } else if (err instanceof Error && err.code === 'REQUIRED') {\n\n    debug('err code is REQUIRED');\n    const error = new Error('PARAM_REQUIRED');\n    error.errors = [err.message];\n    err = new errors.BadRequest(error);\n  } else if (!(err instanceof errors.FeathersError)) {\n\n    debug('err is Server Error');\n    errorLog.error('Server Error', {\n      event: 'server error',\n      error: { code: err.code, message: err.message, stack: stackTrace.parse(err) },\n    });\n\n    logger.error(err);\n    debug('Server Error: ', err);\n\n    if (environment.debug) {\n      err = new errors.GeneralError(err.message, { errors: stackTrace.parse(err) });\n    } else {\n      err = new errors.GeneralError('SERVER_ERROR');\n    }\n\n  }\n  next(err);\n}\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}