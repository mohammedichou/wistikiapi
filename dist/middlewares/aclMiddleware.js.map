{"version":3,"sources":["middlewares/aclMiddleware.js"],"names":["req","res","next","feathers","acl","serviceAcl","requester","user","application","debug","method","isAllowed","then","all","fetchRoleId","fetchServiceId","result","roleId","resourceId","error","errors","Forbidden","message","toJSON","require","resolve","Sequelize","Model","constructor","name","resource","route","path","fetchModelId","model","getTableName","e","Acl","modelAcl","anonymousRole","Role","userRole","applicationRole","addRole","permissions","MessageModelPermission","UserModelPermission","UserServicePermission","UsersServicePermission","LoginServicePermission","LoginRootServicePermission","VerifyServicePermission","UserDevicesServicePermission","UserDeviceServicePermission","WistikiCallsCallbackServicePermission","DeviceModelPermission","UserWistikisServicePermission","UserWistikiServicePermission","WistikiHasOwnerModelPermission","WistikiHasFriendModelPermission","WistikisServicePermission","WistikiServicePermission","WistikiModelPermission","WistikiFriendsServicePermission","WistikiOwnerServicePermission","WistikiFriendServicePermission","WistikiPositionsServicePermission","PasswordRootServicePermission","PositionsRootServicePermission","WistikiFoundsServicePermission","WistiketteFoundsServicePermission","WistiketteCallsServicePermission","WistikiRecoveryServicePermission","UserThreadsServicePermission","UserMessagesServicePermission","UserThreadMessagesServicePermission","UserConfirmationServicePermission","PasswordServicePermission","ApplicationModelPermission","ApplicationKeysServicePermission","MessagesServicePermission","MessageServicePermission","ModelsServicePermission","ModelServicePermission","build","_","each","permission","ServiceAcl","ModelAcl"],"mappings":"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","file":"aclMiddleware.js","sourcesContent":["import { Acl, Role } from 'dynamic-acl';\nimport _ from 'lodash';\nimport errors from 'feathers-errors';\nimport Sequelize from '../db';\nimport {\n  ApplicationKeysServicePermission,\n  ApplicationModelPermission,\n  DeviceModelPermission,\n  LoginRootServicePermission,\n  LoginServicePermission,\n  MessageModelPermission,\n  MessageServicePermission,\n  MessagesServicePermission,\n  ModelServicePermission,\n  ModelsServicePermission,\n  PasswordRootServicePermission,\n  PasswordServicePermission,\n  PositionsRootServicePermission,\n  UserConfirmationServicePermission,\n  UserDeviceServicePermission,\n  UserDevicesServicePermission,\n  UserMessagesServicePermission,\n  UserModelPermission,\n  UserServicePermission,\n  UsersServicePermission,\n  UserThreadMessagesServicePermission,\n  UserThreadsServicePermission,\n  UserWistikiServicePermission,\n  UserWistikisServicePermission,\n  VerifyServicePermission,\n  WistiketteCallsServicePermission,\n  WistiketteFoundsServicePermission,\n  WistikiCallsCallbackServicePermission,\n  WistikiFoundsServicePermission,\n  WistikiFriendServicePermission,\n  WistikiFriendsServicePermission,\n  WistikiHasFriendModelPermission,\n  WistikiHasOwnerModelPermission,\n  WistikiModelPermission,\n  WistikiOwnerServicePermission,\n  WistikiPositionsServicePermission,\n  WistikiRecoveryServicePermission,\n  WistikiServicePermission,\n  WistikisServicePermission,\n} from '../acls/';\n\nconst debug = require('debug')('darwin:middlewares:acl');\n\n// TODO: retrieve user role Id from database values\nconst fetchRoleId = requester => new Promise((resolve) => {\n// eslint-disable-next-line import/no-named-as-default-member\n  if (requester instanceof Sequelize.Model) {\n    debug('fetchRoleId : ', requester.constructor.name);\n    return resolve(requester.constructor.name);\n  }\n  debug('fetchRoleId : anonymous');\n  return resolve('anonymous');\n});\nconst fetchServiceId = resource => new Promise((resolve) => {\n  if (!resource) {\n    return resolve('');\n  } else if (resource.route) {\n    debug('fetchServiceId : ', resource.route.path);\n    return resolve(resource.route.path);\n  }\n  return resolve('/verify/:email/:token'); // TODO: replace this dirty hack as resource will not contain route for static paths\n});\n\nconst fetchModelId = model => new Promise((resolve) => {\n  if (model instanceof Sequelize.Model) {\n    debug('fetchModelId : ', model.constructor.name);\n    return resolve(model.constructor.name);\n  }\n  try {\n    return resolve(model.getTableName());\n  } catch (e) {\n    debug('fetchModelId : model is not instance of Sequelize.Model or Model class ', model);\n    return resolve('');\n  }\n});\n// Init Access Control List\nconst serviceAcl = new Acl(fetchRoleId, fetchServiceId);\nconst modelAcl = new Acl(fetchRoleId, fetchModelId);\n\nconst anonymousRole = new Role('anonymous');\nconst userRole = new Role('user');\nconst applicationRole = new Role('application');\n\n// Adding roles\nserviceAcl.addRole(anonymousRole).addRole(userRole).addRole(applicationRole);\nmodelAcl.addRole(anonymousRole).addRole(userRole).addRole(applicationRole);\n\n// Models resources\nconst permissions = [\n  new MessageModelPermission(modelAcl),\n  new UserModelPermission(modelAcl),\n  new UserServicePermission(serviceAcl),\n  new UsersServicePermission(serviceAcl),\n  new LoginServicePermission(serviceAcl),\n  new LoginRootServicePermission(serviceAcl),\n  new VerifyServicePermission(serviceAcl),\n  new UserDevicesServicePermission(serviceAcl),\n  new UserDeviceServicePermission(serviceAcl),\n  new WistikiCallsCallbackServicePermission(serviceAcl),\n  new DeviceModelPermission(modelAcl),\n  new UserWistikisServicePermission(serviceAcl),\n  new UserWistikiServicePermission(serviceAcl),\n  new WistikiHasOwnerModelPermission(modelAcl),\n  new WistikiHasFriendModelPermission(modelAcl),\n  new WistikisServicePermission(serviceAcl),\n  new WistikiServicePermission(serviceAcl),\n  new WistikiModelPermission(modelAcl),\n  new WistikiFriendsServicePermission(serviceAcl),\n  new WistikiOwnerServicePermission(serviceAcl),\n  new WistikiFriendServicePermission(serviceAcl),\n  new WistikiPositionsServicePermission(serviceAcl),\n  new PasswordRootServicePermission(serviceAcl),\n  new PositionsRootServicePermission(serviceAcl),\n  new WistikiFoundsServicePermission(serviceAcl),\n  new WistiketteFoundsServicePermission(serviceAcl),\n  new WistiketteCallsServicePermission(serviceAcl),\n  new WistikiRecoveryServicePermission(serviceAcl),\n  new UserThreadsServicePermission(serviceAcl),\n  new UserMessagesServicePermission(serviceAcl),\n  new UserThreadMessagesServicePermission(serviceAcl),\n  new UserConfirmationServicePermission(serviceAcl),\n  new PasswordServicePermission(serviceAcl),\n  new ApplicationModelPermission(modelAcl),\n  new ApplicationKeysServicePermission(serviceAcl),\n  new MessagesServicePermission(serviceAcl),\n  new MessageServicePermission(serviceAcl),\n  new ModelsServicePermission(serviceAcl),\n  new ModelServicePermission(serviceAcl),\n];\n\n\n// Building ACL\nserviceAcl.build();\nmodelAcl.build();\n_.each(permissions, (permission) => {\n  permission.build();\n});\n\nexport {\n  serviceAcl as ServiceAcl,\n  modelAcl as ModelAcl,\n  fetchServiceId,\n  fetchRoleId,\n  fetchModelId,\n};\n\n/**\n * Middleware used build Access Control List\n *\n * @param req - the request object\n * @param res - the response object\n * @param next - callback to call for next step in middleware chain\n */\nexport default function (req, res, next) {\n  req.feathers.acl = serviceAcl;\n  let requester = null;\n  if (req.feathers.user != null && req.feathers.application == null) {\n    requester = req.feathers.user;\n  } else if (req.feathers.user == null && req.feathers.application != null) {\n    requester = req.feathers.application;\n  }\n  debug('request method: ', req.method);\n  serviceAcl.isAllowed(requester, req, req.method).then(\n    () => next(),\n    () => {\n      Promise.all([fetchRoleId(requester), fetchServiceId(req), req.method]).then((result) => {\n        const [roleId, resourceId, method] = result;\n        const error = new errors.Forbidden('SERVICE_ACL_ERROR', {\n          errors: [{\n            message: 'user is not allowed to access this resource',\n            resourceId,\n            method,\n            roleId,\n          }],\n        });\n        debug('SERVICE_ACL_ERROR', error.toJSON());\n        next(error);\n      });\n    },\n  );\n}\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}