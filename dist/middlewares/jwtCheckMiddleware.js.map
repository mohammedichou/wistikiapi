{"version":3,"sources":["middlewares/jwtCheckMiddleware.js"],"names":["req","res","next","token","headers","authorization","parts","split","length","scheme","credentials","test","errors","NotAuthenticated","params","query","then","result","user","device","feathers","uid","get","application","appKey","err","debug","require"],"mappings":";;;;;;;;;;kBAae,UAAUA,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACvC,MAAIC,cAAJ;AACA,MAAIH,IAAII,OAAJ,IAAeJ,IAAII,OAAJ,CAAYC,aAA/B,EAA8C;AAC5C,QAAMC,QAAQN,IAAII,OAAJ,CAAYC,aAAZ,CAA0BE,KAA1B,CAAgC,GAAhC,CAAd;AACA,QAAID,MAAME,MAAN,KAAiB,CAArB,EAAwB;AAAA,gDACQF,KADR;AAAA,UACfG,MADe;AAAA,UACPC,WADO;;AAEtB,UAAI,YAAYC,IAAZ,CAAiBF,MAAjB,CAAJ,EAA8B;AAC5BN,gBAAQO,WAAR;AACD;AACF,KALD,MAKO;AACLR,WAAK,IAAIU,gBAAOC,gBAAX,CAA4B,yCAA5B,CAAL;AACD;AACF,GAVD,MAUO,IAAIb,IAAIc,MAAJ,CAAWX,KAAf,EAAsB;AAC3B;AACAA,YAAQH,IAAIc,MAAZ;AACA,WAAOd,IAAIe,KAAJ,CAAUZ,KAAjB;AACD,GAJM,MAIA;AACL,WAAOD,MAAP;AACD;AACD,SAAO,wBAASC,KAAT,EAAgBa,IAAhB,CACL,UAACC,MAAD,EAAY;AACV,QAAIA,OAAO,CAAP,MAAc,MAAlB,EAA0B;AAAA,iDACDA,MADC;AAAA,UACjBC,IADiB;AAAA,UACXC,MADW;;AAExBnB,UAAIoB,QAAJ,CAAaF,IAAb,GAAoBA,IAApB;AACAlB,UAAIoB,QAAJ,CAAaC,GAAb,GAAmBF,OAAOG,GAAP,CAAW,KAAX,CAAnB;AACAtB,UAAIoB,QAAJ,CAAaD,MAAb,GAAsBA,MAAtB;AACA,aAAOjB,MAAP;AACD,KAND,MAMO,IAAIe,OAAO,CAAP,MAAc,aAAlB,EAAiC;AAAA,kDACRA,MADQ;AAAA,UAC/BM,WAD+B;AAAA,UAClBC,MADkB;;AAEtCxB,UAAIoB,QAAJ,CAAaG,WAAb,GAA2BA,WAA3B;AACAvB,UAAIoB,QAAJ,CAAaI,MAAb,GAAsBA,MAAtB;AACA,aAAOtB,MAAP;AACD;AACD,WAAOA,MAAP;AACD,GAfI,EAgBL;AAAA,WAAOA,KAAKuB,GAAL,CAAP;AAAA,GAhBK,CAAP;AAkBD,C;;AAlDD;;;;AAEA;;;;;;AAEA,IAAMC,QAAQC,QAAQ,OAAR,EAAiB,6BAAjB,CAAd;AACA","file":"jwtCheckMiddleware.js","sourcesContent":["import errors from 'feathers-errors/lib/index';\n\nimport jwtCheck from '../lib/jwtCheck';\n\nconst debug = require('debug')('darwin:middlewares:jwtCheck');\n/**\n * Middleware used to catch request validation via Swagger Validation and translate them to a http error\n *\n * @param err - An error\n * @param req - the request object\n * @param res - the response object\n * @param next - callback to call for next step in middleware chain\n */\nexport default function (req, res, next) {\n  let token;\n  if (req.headers && req.headers.authorization) {\n    const parts = req.headers.authorization.split(' ');\n    if (parts.length === 2) {\n      const [scheme, credentials] = parts;\n      if (/^Bearer$/i.test(scheme)) {\n        token = credentials;\n      }\n    } else {\n      next(new errors.NotAuthenticated('Format is Authorization: Bearer [token]'));\n    }\n  } else if (req.params.token) {\n    // We delete the token from param to not mess with blueprints\n    token = req.params;\n    delete req.query.token;\n  } else {\n    return next();\n  }\n  return jwtCheck(token).then(\n    (result) => {\n      if (result[2] === 'user') {\n        const [user, device] = result;\n        req.feathers.user = user;\n        req.feathers.uid = device.get('uid');\n        req.feathers.device = device;\n        return next();\n      } else if (result[2] === 'application') {\n        const [application, appKey] = result;\n        req.feathers.application = application;\n        req.feathers.appKey = appKey;\n        return next();\n      }\n      return next();\n    },\n    err => next(err),\n  );\n}\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}