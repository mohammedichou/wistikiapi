{"version":3,"sources":["services/wistikis/friends.js"],"names":["debug","require","Service","events","create","bodyData","params","Wistiki","cache","findById","verifiedSerialNumber","wistikiModel","errorLog","info","serialNumber","sn","errors","NotFound","isAuthorized","ModelAcl","isAllowed","user","then","Forbidden","message","email","BadRequest","WistikiHasFriend","getUserPairing","wistikiFriends","User","newFriendModel","getOwner","wistikiOwner","ownerSettings","wistiki_has_owner","languages","acceptLanguage","parse","locale","EmailService","sendNewFriendEmail","wistiki","wistiki_alias","language","addActiveSharedWistiki","through","wistiki_picture","link_loss","inverted_link_loss","icon","color","share_start_date","utc","wistikiObject","_","omit","get","plain","sensibleData","lastWistikiPosition","getLastPosition","last_position","friendNotificationData","id","owner","timestamp","toISOString","notifyDevices","ownerNotificationData","serial_number","friend","device","uid","remove","wistikiHasFriendModel","wistikiFriend","unshareNotificationData","user_email","cause","deleteUserPairing","attributes","exclude","joinTableAttributes","getFriends","friends","lastPosition","resObject","map","setup","app","service","bind","filter"],"mappings":"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","file":"friends.js","sourcesContent":["import errors from 'feathers-errors';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { User, Wistiki, WistikiHasFriend } from '../../db';\nimport { sensibleData } from '../../config';\nimport EmailService from '../../lib/email';\nimport { errorLog } from '../../lib/logger';\nimport { acceptLanguage } from '../../lib/i18n';\nimport { ModelAcl } from '../../middlewares/aclMiddleware';\n\nconst debug = require('debug')('darwin:services:wistiki:friends');\n\nconst Service = {\n  events: ['notification'],\n  /**\n   * Share Wistiki with a friend. Throws Error when:\n   * - Wistiki is not foud, user has not the right to share the Wistiki,\n   * - User tries to share his wistiki with himself\n   * - Wistiki is already shared with friend\n   * - No user with given email address is found in database.\n   *\n   * @param bodyData\n   * @param params\n   * @return {Promise.<*>}\n   */\n  async create(bodyData, params) {\n    // Check if Wistiki exist in database\n    const wistikiModel = await Wistiki.cache().findById(params.verifiedSerialNumber);\n    if (!wistikiModel) {\n      errorLog.info({\n        serialNumber: params.sn,\n        params,\n      });\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [`Wistiki ${params.sn} not found`] },\n      );\n    }\n\n    // Check if user is authorized to add new friend to Wistiki\n    const isAuthorized = ModelAcl.isAllowed(\n      params.user,\n      wistikiModel,\n      'add_friend',\n    ).then(() => true, () => false);\n    /* istanbul ignore else */\n    if (!isAuthorized) {\n      throw new errors.Forbidden('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to add friend to this resource',\n        }],\n      });\n    }\n\n    // Check if user is not trying to add hismself as friend\n    if (bodyData.email === params.user.email) {\n      throw new errors.BadRequest(\n        'OPERATION_NOT_PERMITTED',\n        { errors: [`User can't share Wistiki ${params.sn} with himself`] },\n      );\n    }\n\n    // Check if user is trying to add a friend that is already a friend\n    const wistikiFriends = await WistikiHasFriend.getUserPairing(bodyData.email, params.verifiedSerialNumber);\n    if (wistikiFriends) {\n      throw new errors.BadRequest(\n        'ALREADY_SHARED',\n        { errors: [`User ${bodyData.email} is already a friend of Wistiki ${params.sn}`] },\n      );\n    }\n\n    // Check if user exist\n    const newFriendModel = await User.cache().findById(bodyData.email);\n    // TODO: Handle case Wistiki has no owner. This should never happen but who knows\n    const [wistikiOwner] = await wistikiModel.getOwner();\n    const ownerSettings = wistikiOwner.wistiki_has_owner;\n    // If trying to share to user that does not exist, send email to friend to inform him\n    if (!newFriendModel) {\n      // user requester language\n      const languages = acceptLanguage.parse(params.user.locale);\n      EmailService.sendNewFriendEmail({\n        email: bodyData.email,\n        user: params.user,\n        wistiki: ownerSettings.wistiki_alias,\n        language: languages[0],\n      });\n\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [`User ${bodyData.email} not found`] },\n      );\n    }\n\n    await newFriendModel.addActiveSharedWistiki(params.verifiedSerialNumber, {\n      through: {\n        wistiki_alias: ownerSettings.wistiki_alias,\n        wistiki_picture: ownerSettings.wistiki_picture,\n        link_loss: ownerSettings.link_loss,\n        inverted_link_loss: ownerSettings.inverted_link_loss,\n        icon: ownerSettings.icon,\n        color: ownerSettings.color,\n        share_start_date: moment().utc(),\n      },\n    });\n\n    const wistikiObject = _.omit(wistikiModel.get({ plain: true }), sensibleData.wistiki);\n    const lastWistikiPosition = wistikiModel.getLastPosition();\n    if (lastWistikiPosition) {\n      wistikiObject.last_position = lastWistikiPosition;\n    }\n\n    // Notify friend devices\n    const friendNotificationData = {\n      id: 'SHARE',\n      wistiki: wistikiObject,\n      owner: _.omit(wistikiOwner.get({ plain: true }), sensibleData.user),\n      timestamp: moment().utc().toISOString(),\n    };\n    newFriendModel.notifyDevices(friendNotificationData, `SHARE_${params.sn}`);\n\n\n    // Notify Owner devices\n    const ownerNotificationData = {\n      id: 'SHARE_UPD',\n      serial_number: params.sn,\n      friend: _.omit(newFriendModel.get({ plain: true }), sensibleData.user),\n      timestamp: moment().utc().toISOString(),\n    };\n    wistikiOwner.notifyDevices(ownerNotificationData, `SHARE_${params.sn}`, params.device !== null ? params.device.uid : null);\n\n    return _.omit(newFriendModel.get({ plain: true }), sensibleData.user);\n  },\n\n  /**\n   *\n   * @param id\n   * @param params\n   * @return {Promise.<TResult>}\n   */\n  async remove(id, params) {\n    // Check if Wistiki exist in database\n    debug\n    const wistikiModel = await Wistiki.cache().findById(params.verifiedSerialNumber);\n    if (!wistikiModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [`Wistiki ${params.sn} not found`] },\n      );\n    }\n\n    // Check if user is authorized to unshare this Wistiki\n    const isAuthorized = ModelAcl.isAllowed(\n      params.user,\n      wistikiModel,\n      'remove_friend',\n    ).then(() => true, () => false);\n    /* istanbul ignore else */\n    if (!isAuthorized) {\n      throw new errors.Forbidden('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to remove friend from this resource',\n        }],\n      });\n    }\n\n    const wistikiHasFriendModel = await WistikiHasFriend.getUserPairing(id, params.verifiedSerialNumber);\n    if (!wistikiHasFriendModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [`Wistiki ${params.sn} is not shared with ${id}`] },\n      );\n    }\n    const [wistikiOwner] = await wistikiModel.getOwner();\n    const wistikiFriend = await User.cache().findById(id);\n\n    // Notification to synchronise devices data\n    const unshareNotificationData = {\n      id: 'UNSH',\n      serial_number: params.sn,\n      user_email: params.user.email,\n      cause: 'DELETE',\n    };\n    if (wistikiOwner.email === params.user.email) {\n      // This will cause notification to be shown to friend if the owner unshared the Wistiki\n      unshareNotificationData.cause = 'UNSH';\n      unshareNotificationData.user_email = null;\n    }\n\n    wistikiOwner.notifyDevices(unshareNotificationData, `UNSH_${params.sn}`, params.device !== null ? params.device.uid : null);\n    wistikiFriend.notifyDevices(unshareNotificationData, `UNSH_${params.sn}`, params.device !== null ? params.device.uid : null);\n    await WistikiHasFriend.deleteUserPairing(id, params.verifiedSerialNumber);\n\n    if (wistikiOwner.email !== params.user.email) {\n      // Send empty response if the requester is wistiki friend\n      return null;\n    }\n\n    // if the requester is the owner of the Wistiki we return the new Wistiki data\n    const [owner] = await wistikiModel.getOwner({\n      attributes: {\n        exclude: sensibleData.user,\n      },\n      joinTableAttributes: {\n        exclude: ['user_email', 'wistiki_serial_number'],\n      },\n    });\n\n    const friends = await wistikiModel.getFriends({\n      attributes: {\n        exclude: sensibleData.user,\n      },\n      joinTableAttributes: {\n        exclude: ['user_email', 'wistiki_serial_number'],\n      },\n    });\n\n    const lastPosition = await wistikiModel.getLastPosition();\n\n    const resObject = _.omit(wistikiModel.get({ plain: true }), sensibleData.wistiki);\n    resObject.last_position = lastPosition;\n    resObject.owner = owner.get({ plain: true });\n    resObject.friends = _.map(friends, friend => friend.get({ plain: true }));\n\n    return resObject;\n  },\n\n  /**\n   * TODO: Description\n   * @param app\n   * @param path\n   */\n  setup(app) {\n    this.app = app;\n    // Bind the apps service method to service to always look services up dynamically\n    this.service = app.service.bind(app);\n    this.filter(() => false);\n  },\n};\n\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}