{"version":3,"sources":["services/wistikis/founds.js"],"names":["Service","create","data","params","Wistiki","cache","findById","verifiedSerialNumber","wistikiModel","errors","NotFound","sn","compareMsnCipher","msn_cipher","BadRequest","getOwner","wistikiOwner","Thread","title","user_email","user","email","thread","notification","id","wistiki","serial_number","parseInt","wistiki_alias","wistiki_has_owner","wistiki_picture","first_name","avatar_url","owner","Message","body","thread_id","type","messageModel","message_id","getOwnedDevices","then","devices","_","forEach","device","get","message","default","GCM","collapse_key","APNS","aps","badge","alert","author","all","addParticipants","createState","languages","acceptLanguage","parse","locale","EmailService","sendFoundWistikiEmail","language","positionData","geolocation","wistikis","PositionsService","setup","app","service","bind","filter","created","connection","rooms","indexOf","after","hook","result","reload","attributes","exclude","include","as","model","User","sensibleData","MessageHasStatus","dataValues","omit"],"mappings":"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","file":"founds.js","sourcesContent":["import errors from 'feathers-errors';\nimport _ from 'lodash';\nimport { Message, MessageHasStatus, Thread, User, Wistiki } from '../../db';\nimport EmailService from '../../lib/email';\nimport { sensibleData } from '../../config';\nimport PositionsService from './../positions/root';\n\nimport { acceptLanguage } from '../../lib/i18n';\n\nimport { notifyEndpoint } from '../../lib/sns';\n\n\n/**\n * Service for Wistiki Founds\n * @type {{\n * find: (function(*, *)),\n * get: (function(*, *, *)),\n * create: (function(*, *, *)),\n * update: (function(*, *, *, *)),\n * patch: (function(*, *, *, *)),\n * remove: (function(*, *, *)),\n * setup: (function(*=, *))\n * }}\n */\nconst Service = {\n\n  async create(data, params) {\n    const wistikiModel = await Wistiki.cache().findById(params.verifiedSerialNumber);\n    if (!wistikiModel) {\n      throw new errors.NotFound('RESOURCE_NOT_FOUND', { errors: [`Wistiki ${params.sn} not found`] });\n    }\n\n    if (!wistikiModel.compareMsnCipher(data.msn_cipher)) {\n      throw new errors.BadRequest('REQUEST_AUTHENTICATION_FAILED');\n    }\n\n    const [wistikiOwner] = await wistikiModel.getOwner();\n    if (!wistikiOwner) {\n      throw new errors.NotFound('OWNER_NOT_FOUND', { errors: [`Owner not found for Wistiki ${params.sn}`] });\n    }\n\n\n    const thread = await Thread.create({\n      title: `FOUND_${params.sn}`,\n      user_email: params.user.email,\n    });\n\n    const notification = {\n      id: 'WISTIKI_FOUND',\n      wistiki: {\n        serial_number: parseInt(params.sn, 10),\n        wistiki_alias: wistikiOwner.wistiki_has_owner.wistiki_alias,\n        wistiki_picture: wistikiOwner.wistiki_has_owner.wistiki_picture,\n      },\n      user: {\n        first_name: params.user.first_name,\n        avatar_url: params.user.avatar_url,\n      },\n      owner: {\n        first_name: wistikiOwner.first_name,\n        avatar_url: wistikiOwner.avatar_url,\n      },\n\n    };\n\n    const messageModel = await Message.create({\n      body: JSON.stringify(notification),\n      user_email: params.user.email,\n      thread_id: thread.id,\n      type: 'NOTIFICATION',\n    });\n\n\n    notification.thread_id = thread.id;\n    notification.message_id = messageModel.id;\n\n    wistikiOwner.getOwnedDevices().then((devices) => { // Send push to all devices\n      _.forEach(devices, (device) => {\n        if (device.get('sns_arn')) {\n          const message = {\n            default: notification,\n            GCM: {\n              data: notification,\n              collapse_key: `FOUND_${params.sn}`,\n\n            },\n            APNS: {\n              data: notification,\n              aps: {\n                'content-available': 1,\n                badge: 1,\n                alert: {\n                  title: 'Wistiki Chat',\n                  body: `${messageModel.author.first_name}: ${messageModel.body}`,\n                },\n              },\n            },\n\n          };\n          notifyEndpoint(device.get('sns_arn'), message, device.get('uid'));\n        }\n      });\n    });\n\n\n    // add owner to thread\n    await Promise.all([\n      thread.addParticipants([wistikiOwner, params.user]),\n      messageModel.createState({ user_email: wistikiOwner.email }),\n    ]);\n\n    const languages = acceptLanguage.parse(wistikiOwner.locale);\n    EmailService.sendFoundWistikiEmail({\n      email: wistikiOwner.email,\n      wistiki: wistikiOwner.wistiki_has_owner.wistiki_alias,\n      language: languages[0],\n    });\n\n    const positionData = {\n      geolocation: data.geolocation,\n      wistikis: [\n        {\n          serial_number: params.sn,\n          msn_cipher: data.msn_cipher,\n        },\n      ],\n    };\n    PositionsService.create(positionData, params);\n\n    return messageModel;\n  },\n\n  /**\n   * TODO: Description\n   * @param app\n   * @param path\n   */\n  setup(app) {\n    this.app = app;\n    this.service = app.service.bind(app);\n    this.filter({\n      created: (data, connection) => {\n        if (!connection.user) return false;\n        if (connection.rooms.indexOf(`c:u:${connection.user.get('email')}`) === -1) return false;\n        return data;\n      },\n    });\n  },\n  after: {\n    create: hook => hook.result.reload({\n      attributes: {\n        exclude: ['id'],\n      },\n      include: [\n        {\n          as: 'author',\n          model: User,\n          attributes: {\n            exclude: sensibleData.user,\n          },\n        },\n        {\n          as: 'thread',\n          model: Thread,\n          attributes: {\n            exclude: ['user_email'],\n          },\n          include: [\n            {\n              model: User,\n              as: 'creator',\n              attributes: {\n                exclude: sensibleData.user,\n              },\n            },\n            {\n              model: User,\n              as: 'participants',\n              attributes: {\n                exclude: sensibleData.user,\n              },\n\n            },\n            {\n              model: Message,\n              as: 'last_message',\n              attributes: {\n                exclude: ['user_email', 'thread_id'],\n              },\n              include: [\n                {\n                  as: 'author',\n                  model: User,\n                  attributes: {\n                    exclude: sensibleData.user,\n                  },\n                },\n                {\n                  as: 'states',\n                  model: MessageHasStatus,\n                  attributes: {\n                    exclude: ['message_id', 'user_email'],\n                  },\n                  include: [\n                    {\n                      model: User,\n                      attributes: {\n                        exclude: sensibleData.user,\n                      },\n                    },\n                  ],\n\n                },\n              ],\n\n            },\n          ],\n        },\n        {\n          as: 'states',\n          model: MessageHasStatus,\n          attributes: {\n            exclude: ['message_id', 'user_email'],\n          },\n          include: [\n            {\n              model: User,\n              attributes: {\n                exclude: sensibleData.user,\n              },\n            },\n          ],\n\n        },\n      ],\n    }).then((message) => {\n      hook.result = message;\n      hook.result.dataValues = _.omit(hook.result.dataValues, ['thread_id', 'user_email']);\n      return hook;\n    }),\n  },\n};\n\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}