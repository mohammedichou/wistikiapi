{"version":3,"sources":["services/wistikis/owner.js"],"names":["debug","require","Service","create","bodyData","params","Wistiki","cache","findById","verifiedSerialNumber","wistikiModel","errors","NotFound","sn","isAuthorized","ModelAcl","isAllowed","user","then","errorLog","error","event","reason","current_user","email","req_data","wistiki","get","plain","Forbidden","message","BadRequest","User","newOwnerModel","getOwner","wistikiOwner","getFriends","wistikiFriends","unshareNotificationData","id","serial_number","user_email","cause","reset_friends","_","each","friend","notifyDevices","WistikiHasFriend","deleteUserPairing","device","uid","WistikiHasOwner","getUserPairing","ownerPairing","cloneDeep","wistikiSettings","wistiki_alias","wistiki_picture","link_loss","inverted_link_loss","icon","color","share_start_date","utc","ownership_start_date","all","addActiveSharedWistiki","through","setOwner","attributes","exclude","sensibleData","joinTableAttributes","owner","friends","getLastPosition","lastPosition","resObject","omit","last_position","notification","from_user","timestamp","toISOString","notificationId","map","setup","app","service","bind","filter"],"mappings":"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","file":"owner.js","sourcesContent":["import moment from 'moment';\nimport _ from 'lodash';\nimport errors from 'feathers-errors/lib/index';\nimport { sensibleData } from '../../config';\nimport { User, Wistiki, WistikiHasFriend, WistikiHasOwner } from '../../db';\nimport { errorLog } from '../../lib/logger';\nimport { ModelAcl } from '../../middlewares/aclMiddleware';\n\n\n// eslint-disable-next-line no-unused-vars\nconst debug = require('debug')('darwin:services:wistikis:owner');\n/**\n * Transfer Wistiki property from user to another. If data.reset_friends is set to true,\n * then the Wistiki will be unshared from all friends. A Push notification is sent in that\n * case to all friends to alert them. Previous and new Owner receives push notification on\n * all their devices, expect, on the device making this call\n * @type {{create: (function(Object, Object, Function)),\n * after: {create: Service.after.create},\n * setup: (function(*=, *))}}\n */\nconst Service = {\n  /**\n   *\n   * @param {integer} id\n   * @param {object} data\n   * @param {object} params\n   * @param {function} callback\n   */\n  async create(bodyData, params) {\n    // Check if Wistiki exist in database\n    const wistikiModel = await Wistiki.cache().findById(params.verifiedSerialNumber);\n    if (!wistikiModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [`Wistiki ${params.sn} not found`] },\n      );\n    }\n\n    // Check if user is authorized to add new friend to Wistiki\n    const isAuthorized = ModelAcl.isAllowed(\n      params.user,\n      wistikiModel,\n      'transfer_ownership',\n    ).then(() => true, () => false);\n    /* istanbul ignore else */\n    if (!isAuthorized) {\n      errorLog.error('Owner transfer ACL error', {\n        event: 'TRANSFER_OWNERSHIP',\n        reason: 'MODEL_ACL_ERROR',\n        current_user: params.user.email,\n        req_data: bodyData,\n        wistiki: wistikiModel.get({ plain: true }),\n      });\n      throw new errors.Forbidden('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to transfer this resource',\n        }],\n      });\n    }\n\n    // Check if user is not trying to add hismself as friend\n    if (bodyData.email === params.user.email) {\n      throw new errors.BadRequest(\n        'OPERATION_NOT_PERMITTED',\n        { errors: [`User can't transfer ownership of Wistiki ${params.sn} to himself`] },\n      );\n    }\n\n    // Check if user exist\n    const newOwnerModel = await User.cache().findById(bodyData.email);\n    const [wistikiOwner] = await wistikiModel.getOwner();\n    if (!newOwnerModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [`User ${bodyData.email} not found`] },\n      );\n    }\n    const wistikiFriends = await wistikiModel.getFriends();\n    // Notification to synchronise devices data\n    const unshareNotificationData = {\n      id: 'UNSH',\n      serial_number: params.sn,\n      user_email: null,\n      cause: 'TOWN',\n    };\n\n    if (bodyData.reset_friends === true) {\n      // remove all friends\n      _.each(wistikiFriends, async (friend) => {\n        friend.notifyDevices(unshareNotificationData, `UNSH_${params.sn}`);\n        await WistikiHasFriend.deleteUserPairing(friend.email, params.verifiedSerialNumber);\n      });\n    } else {\n      // if new owner is a friend of the wistiki, remove it from friends list\n      wistikiOwner.notifyDevices(\n        unshareNotificationData,\n        `UNSH_${params.sn}`,\n        params.device !== null ? params.device.uid : null,\n      );\n      await WistikiHasFriend.deleteUserPairing(bodyData.email, params.verifiedSerialNumber);\n    }\n    let ownerPairing = await WistikiHasOwner.getUserPairing(wistikiOwner.email, params.verifiedSerialNumber);\n    ownerPairing = _.cloneDeep(ownerPairing.get({ plain: true }));\n\n    await WistikiHasOwner.deleteUserPairing(wistikiOwner.email, params.verifiedSerialNumber);\n\n    const wistikiSettings = {\n      wistiki_alias: ownerPairing.wistiki_alias,\n      wistiki_picture: ownerPairing.wistiki_picture,\n      link_loss: ownerPairing.link_loss,\n      inverted_link_loss: ownerPairing.inverted_link_loss,\n      icon: ownerPairing.icon,\n      color: ownerPairing.color,\n      share_start_date: moment().utc(),\n      ownership_start_date: moment().utc(),\n    };\n    await Promise.all([\n      wistikiOwner.addActiveSharedWistiki(params.verifiedSerialNumber, { through: wistikiSettings }),\n      wistikiModel.setOwner(newOwnerModel.email, { through: wistikiSettings }),\n    ]);\n\n\n    const [owner] = await wistikiModel.getOwner({\n      attributes: {\n        exclude: sensibleData.user,\n      },\n      joinTableAttributes: {\n        exclude: ['user_email', 'wistiki_serial_number'],\n      },\n    });\n\n    const friends = await wistikiModel.getFriends({\n      attributes: {\n        exclude: sensibleData.user,\n      },\n      joinTableAttributes: {\n        exclude: ['user_email', 'wistiki_serial_number'],\n      },\n    });\n\n    const lastPosition = await wistikiModel.getLastPosition();\n\n    const resObject = _.omit(wistikiModel.get({ plain: true }), sensibleData.wistiki);\n    resObject.last_position = lastPosition;\n    resObject.owner = owner.get({ plain: true });\n\n\n    const notification = {\n      id: 'TOWN',\n      from_user: `${params.user.get('first_name')} ${params.user.get('last_name')}`,\n      wistiki: resObject,\n      timestamp: moment().utc().toISOString(),\n    };\n    const notificationId = `TOWN_${params.sn}`;\n\n    newOwnerModel.notifyDevices(notification, notificationId);\n    wistikiOwner.notifyDevices(\n      notification,\n      notificationId,\n      params.device !== null ? params.device.uid : null,\n    );\n\n    resObject.friends = _.map(friends, friend => friend.get({ plain: true }));\n    return resObject;\n  },\n  /**\n   * Setup function\n   *\n   * @param app\n   */\n  setup(app) {\n    this.app = app;\n    // Bind the apps service method to service to always look services up dynamically\n    this.service = app.service.bind(app);\n    this.filter(() => false);\n  }\n  ,\n};\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}