{"version":3,"sources":["services/wistikis/root.js"],"names":["debug","require","getMacAddress","s","string","mac","Buffer","alloc","fill","i","octet","parseInt","substr","writeUInt8","Service","get","id","params","Wistiki","findById","attributes","exclude","_","union","sensibleData","wistiki","then","reject","errors","NotFound","resolve","owner","getOwner","user","joinTableAttributes","all","result","activeOwners","options","email","where","friends","getFriends","lastPosition","getLastPosition","activeFriends","dataValues","last_position","ModelAcl","isAllowed","plain","Forbidden","message","create","data","operations","map","isUndefined","mac_address","serial_number","toString","match","join","toUpperCase","replace","msn","model_id","serial","isEmpty","last_software_update","utc","recovery_key","err","logger","error","errorLog","fail_msg","fail_error","update","isNil","manufacturing_date","last_firmware_version","BadRequest","updateData","last_software_version","application","omitBy","setup","app","service","bind","filter"],"mappings":"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","file":"root.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport errors from 'feathers-errors/lib/index';\n\nimport { Wistiki } from '../../db';\nimport { sensibleData } from '../../config';\nimport logger, { errorLog } from '../../lib/logger';\nimport { ModelAcl } from '../../middlewares/aclMiddleware';\n\nconst debug = require('debug')('darwin:services:wistikis:root');\n\n\nconst getMacAddress = (s) => {\n  const string = `${s}`;\n  const mac = Buffer.alloc(6);\n  mac.fill(0);\n  for (let i = 0; i < 6; i += 1) {\n    const octet = parseInt(string.substr(i * 2, 2), 10);\n    mac.writeUInt8(octet, i);\n  }\n  return mac;\n};\n\n/**\n * Service for Users\n * @type {{\n * find: (function(*, *)),\n * get: (function(*, *, *)),\n * create: (function(*, *, *)),\n * update: (function(*, *, *, *)),\n * patch: (function(*, *, *, *)),\n * remove: (function(*, *, *)),\n * setup: (function(*=, *))\n * }}\n */\nconst Service = {\n\n  /**\n   * Get user by id. Throws an error if none can be found\n   *\n   * @param id requested user id\n   * @param params\n   * @param callback\n   */\n  get(id, params) {\n    return Wistiki.findById(id, {\n      attributes: {\n        exclude: _.union(sensibleData.wistiki, ['model_id', 'flan']),\n      },\n    })\n      .then((wistiki) => {\n        if (!wistiki) {\n          return Promise.reject(new errors.NotFound(`Wistiki ${id} not found`));\n        }\n        return Promise.resolve(wistiki);\n      })\n      .then((wistiki) => {\n        const owner = wistiki.getOwner({\n          attributes: {\n            exclude: sensibleData.user,\n          },\n          joinTableAttributes: {\n            exclude: ['user_email', 'wistiki_serial_number'],\n          },\n        });\n\n\n        return Promise.all([wistiki, owner]);\n      })\n      .then((result) => {\n        const wistiki = result[0];\n        const activeOwners = result[1][0];\n        const options = {\n          attributes: {\n            exclude: sensibleData.user,\n          },\n          joinTableAttributes: {\n            exclude: ['user_email', 'wistiki_serial_number'],\n          },\n        };\n        if (activeOwners != null && activeOwners.get('email') !== params.user.email) {\n          options.where = { email: params.user.email };\n        }\n        const friends = wistiki.getFriends(options);\n        const lastPosition = wistiki.getLastPosition();\n        // TODO: can make one sql call instead of 3\n        return Promise.all([wistiki, activeOwners, friends, lastPosition]);\n      })\n      .then((result) => {\n        const wistiki = result[0];\n        const activeOwners = result[1];\n        const activeFriends = result[2];\n        const lastPosition = result[3];\n        wistiki.dataValues.owner = activeOwners;\n        wistiki.dataValues.friends = activeFriends;\n        wistiki.dataValues.last_position = lastPosition;\n\n        return ModelAcl.isAllowed(params.user, wistiki, 'get').then(\n          () => wistiki.get({ plain: true }),\n          () => Promise.reject(new errors.Forbidden('MODEL_ACL_ERROR', {\n            errors: [{\n              message: 'You are not allowed to access this resource',\n            }],\n          })),\n        );\n      });\n  },\n  /**\n   *\n   * @param {integer} id\n   * @param {object} data\n   * @param {object} params\n   * @param {function} callback\n   */\n  // TODO: see how we can reuse wistiki service\n  create(data) {\n    const operations = data.map((wistiki) => {\n      if (_.isUndefined(wistiki.mac_address) && !_.isUndefined(wistiki.serial_number)) {\n        wistiki.mac_address = getMacAddress(wistiki.serial_number).toString('hex').match(/.{2}/g).join(':')\n          .toUpperCase();\n      } else if (!_.isUndefined(wistiki.mac_address) && _.isUndefined(wistiki.serial_number)) {\n        wistiki.serial_number = '';\n        for (let i = 0; i < 6; i++) {\n          const octet = parseInt(wistiki.mac_address.replace(/:/g, '').substr(i * 2, 2), 16);\n          wistiki.serial_number += octet > 10 ? octet : `0${octet}`;\n        }\n      }\n      wistiki.msn = parseInt(wistiki.msn, 16);\n      if (_.isUndefined(wistiki.model_id) && !_.isUndefined(wistiki.serial_number)) {\n        const serial = `${wistiki.serial_number}`;\n        wistiki.model_id = serial.substr(0, 1);\n      }\n      if (_.isEmpty(wistiki.last_software_update)) {\n        wistiki.last_software_update = moment().utc();\n      }\n      wistiki.recovery_key = wistiki.recovery_key.replace(/:/g, '').replace(/-/g, '').match(/.{2}/g).join(':')\n        .toUpperCase();\n      debug('Creating new Wistiki', wistiki);\n      return Wistiki.create(wistiki).then(\n        wistiki => wistiki,\n        (err) => {\n          logger.error(`Unable to create Wistiki ${wistiki.serial_number ? wistiki.serial_number : wistiki.mac_address}`, {\n            wistiki,\n            error: err,\n          });\n          errorLog.error(`Unable to create Wistiki ${wistiki.serial_number}`, {\n            wistiki,\n            error: err,\n          });\n          return {\n            fail_msg: `Unable to create Wistiki ${wistiki.serial_number ? wistiki.serial_number : wistiki.mac_address}`,\n            fail_error: {\n              message: err.message,\n              errors: err.errors,\n            },\n            wistiki,\n\n          };\n        },\n      );\n    });\n    return Promise.all(operations);\n  },\n  /**\n   * Update Wistiki Table infos\n   * Used by BMS application for provisionning (update manufacturing date) or by user (after SUOTA)\n   * @param {string} id\n   * @param {Object} data\n   * @param params\n   */\n  update(id, data, params) {\n    if (_.isNil(data.manufacturing_date) &&\n      _.isNil(data.last_firmware_version) &&\n      _.isNil(data.last_software_update)) {\n      return Promise.reject(new errors.BadRequest('REQUIRED_DATA_MISSING', {\n        errors: [\n          `manufacturing_date: got ${data.manufacturing_date}`,\n          `last_firmware_version: got ${data.last_firmware_version}`,\n          `last_software_update: got ${data.last_software_update}`,\n        ],\n      }));\n    }\n\n    const updateData = {\n      manufacturing_date: data.manufacturing_date,\n      last_software_version: data.last_software_version,\n      last_software_update: data.last_software_update,\n    };\n    return Wistiki.findById(id, {\n      attributes: {\n        exclude: sensibleData.wistiki,\n      },\n    })\n      .then((wistiki) => {\n        if (!wistiki) {\n          return Promise.reject(new errors.NotFound('NOT_PROVISIONED', { errors: [`Wistiki ${id} is not provisioned`] }));\n        }\n        return Promise.resolve(wistiki);\n      })\n      .then((wistiki) => {\n        // If request origin is logged in user\n        if (params.user) {\n          debug('Profile is user ', params.user.email);\n          return ModelAcl.isAllowed(params.user, wistiki, 'update').then(\n            () => {\n              debug('authorized to update wistiki', wistiki.get({ plain: true }));\n              return Promise.resolve(wistiki);\n            },\n            () => Promise.reject(new errors.Forbidden('MODEL_ACL_ERROR', {\n              errors: [{\n                message: 'You are not allowed to update this resource',\n              }],\n            })),\n          );\n        }\n        // If request origin is application let it go\n        debug('Profile is application', params.application.id);\n        return Promise.resolve(wistiki);\n      })\n      .then((wistiki) => {\n        debug(`updating wistiki ${wistiki.serial_number} with data: `, _.omitBy(updateData, _.isNil));\n        return wistiki.update(_.omitBy(updateData, _.isNil));\n      });\n  },\n  /**\n   * TODO: Description\n   * @param app\n   * @param path\n   */\n  setup(app) {\n    this.app = app;\n    // Bind the apps service method to service to always look services up dynamically\n    this.service = app.service.bind(app);\n    this.filter(() => false);\n  },\n};\n\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}