{"version":3,"sources":["services/messages/root.js"],"names":["Service","find","params","reject","errors","NotImplemented","get","id","Message","findById","include","as","model","User","attributes","exclude","sensibleData","user","Thread","MessageHasStatus","then","message","NotFound","ModelAcl","isAllowed","Forbidden","create","data","update","remove","setup","app","path","service","bind","filter","connection","h","hook","type","before","all","after"],"mappings":"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","file":"root.js","sourcesContent":["import { Message, MessageHasStatus, Thread, User } from '../../db';\nimport errors from 'feathers-errors/lib/index';\nimport { ModelAcl } from '../../middlewares/aclMiddleware';\nimport { sensibleData } from '../../config'\n\nvar Service = {\n\t/**\n\t * Returns all messages stored in db\n\t *\n\t * @param params\n     */\n\tfind(params){\n\t\treturn Promise.reject(new errors.NotImplemented('METHOD_NOT_IMPLEMENTED'));\n\t},\n\n\t/**\n\t *\n\t * @param id\n\t * @param params\n\t * @returns {*}\n     */\n\tget(id, params){\n\t\treturn Message.findById(id,\n\t\t{\n\t\t\tinclude: [\n\t\t\t\t{\n\t\t\t\t\tas: 'author',\n\t\t\t\t\tmodel: User,\n\t\t\t\t\tattributes: {\n            exclude: sensibleData.user\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tas: 'thread',\n\t\t\t\t\tmodel: Thread,\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\texclude: ['user_email']\n\t\t\t\t\t},\n\t\t\t\t\tinclude: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmodel: User,\n\t\t\t\t\t\t\tas: 'creator',\n\t\t\t\t\t\t\tattributes: {\n                exclude: sensibleData.user\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmodel: User,\n\t\t\t\t\t\t\tas: 'participants',\n\t\t\t\t\t\t\tattributes: {\n                exclude: sensibleData.user,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmodel: Message,\n\t\t\t\t\t\t\tas: 'last_message',\n\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\texclude: ['user_email', 'thread_id']\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tinclude: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tas: 'author',\n\t\t\t\t\t\t\t\t\tmodel: User,\n\t\t\t\t\t\t\t\t\tattributes: {\n                    exclude: sensibleData.user\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tas: 'states',\n\t\t\t\t\t\t\t\t\tmodel: MessageHasStatus,\n\t\t\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\t\t\texclude: ['message_id', 'user_email']\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tinclude: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tmodel: User,\n\t\t\t\t\t\t\t\t\t\t\tattributes: {\n                        exclude: sensibleData.user\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tas: 'states',\n\t\t\t\t\tmodel: MessageHasStatus,\n\t\t\t\t\tattributes: {\n\t\t\t\t\t\texclude: ['message_id', 'user_email']\n\t\t\t\t\t},\n\t\t\t\t\tinclude: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmodel: User,\n\t\t\t\t\t\t\tattributes: {\n                exclude: sensibleData.user\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\n\t\t\t\t}\n\t\t\t]\n\t\t}).then( //Check if message exist and current user has the right to read it\n\t\t\tmessage => {\n\t\t\t\tif(!message)\n\t\t\t\t\treturn Promise.reject(new errors.NotFound('RESOURCE_NOT_FOUND'));\n\t\t\t\treturn ModelAcl.isAllowed(params.user, message, 'get').then(\n\t\t\t\t\t() => {\n\t\t\t\t\t\treturn message;\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t\treturn Promise.reject(new errors.Forbidden('MODEL_ACL_ERROR'));\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\t},\n\t/**\n\t * Create a new Message\n\t *\n\t * @param data\n\t * @param params\n\t * @returns {Promise}\n     */\n\tcreate(data, params){\n\t\treturn Promise.reject(new errors.NotImplemented('METHOD_NOT_IMPLEMENTED'));\n\t},\n\n\t/**\n\t * Update existant message\n\t *\n\t * @param id\n\t * @param data\n\t * @param params\n\t * @returns {Promise}\n     */\n\tupdate(id, data, params){\n\t\treturn Promise.reject(new errors.NotImplemented('METHOD_NOT_IMPLEMENTED'));\n\t},\n\n\t/**\n\t * Remove message\n\t *\n\t * @param id\n\t * @returns {Promise}\n     */\n\tremove(id){\n\t\treturn Promise.reject(new errors.NotImplemented('METHOD_NOT_IMPLEMENTED'));\n\t},\n\t/**\n\t * TODO: Description\n\t * @param app\n\t * @param path\n\t */\n\tsetup(app, path){\n\t\tthis.app = app;\n\t\t//Bind the apps service method to service to always look services up dynamically\n\t\tthis.service = app.service.bind(app);\n\t\tthis.filter(function (data, connection) {\n\t\t\treturn false;\n\t\t});\n\t\tlet h = (service) => {\n\t\t\treturn (hook) => {\n\t\t\t\tif(hook.type == 'before'){\n\t\t\t\t\t//console.time(`${hook.method}:${service}`);\n\t\t\t\t}else if(hook.type == 'after'){\n\t\t\t\t\t//console.timeEnd(`${hook.method}:${service}`);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.before({\n\t\t\tall: h('messages/root')\n\t\t});\n\t\tthis.after({\n\t\t\tall: h('messages/root')\n\t\t});\n\t}\n};\n\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}