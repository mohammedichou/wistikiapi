{"version":3,"sources":["services/models/root.js"],"names":["Service","find","cache","getModels","models","Model","findAll","joinTableAttributes","include","as","model","Software","attributes","exclude","setModels","get","id","findById","errors","NotFound","message","setup","app","service","bind","filter"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,UAAU;AACd;;;AAGMC,MAJQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKOC,gBAAMC,SAAN,EALP;;AAAA;AAKRC,oBALQ;;AAAA,kBAOPA,MAPO;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAQKC,UAAMC,OAAN,CAAc;AAC3BC,qCAAqB,EADM;AAE3BC,yBAAS,CACP;AACEC,sBAAI,eADN;AAEEC,yBAAOC,YAFT;AAGEC,8BAAY;AACVC,6BAAS,CAAC,UAAD;AADC;AAHd,iBADO;AAFkB,eAAd,CARL;;AAAA;AAQVT,oBARU;;AAoBVF,8BAAMY,SAAN,CAAgBV,MAAhB;;AApBU;AAAA,+CAsBLA,MAtBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAwBd;;;;;AAKMW,KA7BQ;AAAA,2GA6BJC,EA7BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA8BQX,UAAMY,QAAN,CAAeD,EAAf,EAAmB;AACrCT,qCAAqB,EADgB;AAErCC,yBAAS,CACP;AACEC,sBAAI,eADN;AAEEC,yBAAOC,YAFT;AAGEC,8BAAY;AACVC,6BAAS,CAAC,UAAD;AADC;AAHd,iBADO;AAF4B,eAAnB,CA9BR;;AAAA;AA8BNH,mBA9BM;;AAAA,kBA2CPA,KA3CO;AAAA;AAAA;AAAA;;AAAA,oBA4CJ,IAAIQ,gBAAOC,QAAX,CAAoB,oBAApB,EAA0C,EAAED,QAAQ,CAAC,EAAEE,oBAAkBJ,EAAlB,eAAF,EAAD,CAAV,EAA1C,CA5CI;;AAAA;AAAA,gDA+CLN,KA/CK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAkDd;;;;AAIAW,OAtDc,iBAsDRC,GAtDQ,EAsDH;AACT;AACA,SAAKA,GAAL,GAAWA,GAAX;AACA;AACA;AACA,SAAKC,OAAL,GAAeD,IAAIC,OAAJ,CAAYC,IAAZ,CAAiBF,GAAjB,CAAf;AACA;AACA,SAAKG,MAAL,CAAY;AAAA,aAAM,KAAN;AAAA,KAAZ;AACD;AA9Da,CAAhB;;kBAiEezB,O","file":"root.js","sourcesContent":["import errors from 'feathers-errors/lib/index';\nimport { Model, Software } from '../../db';\nimport cache from '../../lib/cache';\n\nconst Service = {\n  /**\n   * Get all available models with their associated last software version details\n   */\n  async find() {\n    let models = await cache.getModels();\n    /* istanbul ignore else */\n    if (!models) {\n      models = await Model.findAll({\n        joinTableAttributes: [],\n        include: [\n          {\n            as: 'last_software',\n            model: Software,\n            attributes: {\n              exclude: ['model_id'],\n            },\n          },\n        ],\n      });\n      cache.setModels(models);\n    }\n    return models;\n  },\n  /**\n   * Get model by id. Throws an error if none can be found\n   *\n   * @param id requested model id\n   */\n  async get(id) {\n    const model = await Model.findById(id, {\n      joinTableAttributes: [],\n      include: [\n        {\n          as: 'last_software',\n          model: Software,\n          attributes: {\n            exclude: ['model_id'],\n          },\n        },\n      ],\n    });\n    /* istanbul ignore else */\n    if (!model) {\n      throw new errors.NotFound('RESOURCE_NOT_FOUND', { errors: [{ message: `Model ${id} not found` }] });\n    }\n\n    return model;\n  },\n\n  /**\n   * TODO: Description\n   * @param app\n   */\n  setup(app) {\n    /* istanbul ignore next */\n    this.app = app;\n    // Bind the apps service method to service to always look services up dynamically\n    /* istanbul ignore next */\n    this.service = app.service.bind(app);\n    /* istanbul ignore next */\n    this.filter(() => false);\n  },\n};\n\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}