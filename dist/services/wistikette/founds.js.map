{"version":3,"sources":["services/wistikette/founds.js"],"names":["debug","require","Service","create","data","params","callback","Wistiki","findById","sn","then","wistikette","reject","errors","NotFound","resolve","compareMsnCipher","msn_cipher","BadRequest","getOwner","wistiketteOwners","length","get","wistiketteOwner","plain","user","first_name","last_name","wistikette_serial_number","wistiki_serial_number","wistikette_alias","wistiki_alias","wistikette_picture","wistiki_picture","wistikette_color","color","wistikette_icon","icon","setup","app","path","service","bind","filter","connection","h","hook","type","before","all","after"],"mappings":"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","file":"founds.js","sourcesContent":["import { Wistiki } from '../../db';\nimport errors from 'feathers-errors/lib/index'\n\nconst debug = require('debug')('darwin:services:wistikette:found');\n\n/**\n * Service for Wistiki Founds\n * @type {{\n * find: (function(*, *)),\n * get: (function(*, *, *)),\n * create: (function(*, *, *)),\n * update: (function(*, *, *, *)),\n * patch: (function(*, *, *, *)),\n * remove: (function(*, *, *)),\n * setup: (function(*=, *))\n * }}\n */\nvar Service = {\n\n\t/**\n\t *\n\t * @param {integer} id\n\t * @param {object} data\n\t * @param {object} params\n\t * @param {function} callback\n\t */\n\tcreate(data, params, callback){\n\t\tdebug(data);\n\t\tdebug(params);\n\t\t//TODO: check model before going further\n\t\treturn Wistiki.findById(params.sn)\n\t\t\t.then( // Check if wistiki exist\n\t\t\t\t(wistikette) => {\n\t\t\t\t\tif (!wistikette)\n\t\t\t\t\t\treturn Promise.reject(new errors.NotFound(`RESOURCE_NOT_FOUND`, {errors: [`Wistikette ${params.sn} not found`]}));\n\t\t\t\t\treturn Promise.resolve(wistikette);\n\t\t\t\t}\n\t\t\t).then( // Check msn cipher & find owner\n\t\t\t\t(wistikette) => {\n\t\t\t\t\tif (!wistikette.compareMsnCipher(data.msn_cipher))\n\t\t\t\t\t\treturn Promise.reject(new errors.BadRequest(`REQUEST_AUTHENTICATION_FAILED`, {errors: [`MSN Cipher mismatch`]}));\n\n\t\t\t\t\treturn wistikette.getOwner().then(\n\t\t\t\t\t\t(wistiketteOwners) => {\n\n\t\t\t\t\t\t\tif (!wistiketteOwners || wistiketteOwners.length == 0)\n\t\t\t\t\t\t\t\treturn Promise.reject(new errors.NotFound('OWNER_NOT_FOUND', {errors: [`Owner not found for Wistikette ${wistikette.get('serial_number')}`]}));\n\t\t\t\t\t\t\tlet wistiketteOwner = wistiketteOwners[0];\n\t\t\t\t\t\t\tdebug('wistiketteOwner', wistiketteOwner.get({plain:true}));\n\t\t\t\t\t\t\tif (params.user && wistiketteOwner.get('email') == params.user.get('email'))\n\t\t\t\t\t\t\t\treturn Promise.reject(new errors.BadRequest('OPERATION_NOT_PERMITTED', {errors: [`Owner can't declare its Wistikette as found`]}));\n\n\t\t\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t\t\tfirst_name: wistiketteOwner.get('first_name'),\n\t\t\t\t\t\t\t\tlast_name: wistiketteOwner.get('last_name')[0],\n\t\t\t\t\t\t\t\twistikette_serial_number: wistiketteOwner.get('wistiki_has_owner').wistiki_serial_number,\n\t\t\t\t\t\t\t\twistikette_alias: wistiketteOwner.get('wistiki_has_owner').wistiki_alias,\n\t\t\t\t\t\t\t\twistikette_picture: wistiketteOwner.get('wistiki_has_owner').wistiki_picture,\n\t\t\t\t\t\t\t\twistikette_color: wistiketteOwner.get('wistiki_has_owner').color,\n\t\t\t\t\t\t\t\twistikette_icon: wistiketteOwner.get('wistiki_has_owner').icon,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t},\n\n\t/**\n\t * TODO: Description\n\t * @param app\n\t * @param path\n\t */\n\tsetup(app, path){\n\t\tthis.app = app;\n\t\t//Bind the apps service method to service to always look services up dynamically\n\t\tthis.service = app.service.bind(app);\n\t\tthis.filter((data, connection) => {\n\t\t\treturn false;\n\t\t});\n\t\tlet h = (service) => {\n\t\t\treturn (hook) => {\n\t\t\t\tif(hook.type == 'before'){\n\t\t\t\t\t//console.time(`${hook.method}:${service}`);\n\t\t\t\t}else if(hook.type == 'after'){\n\t\t\t\t\t//console.timeEnd(`${hook.method}:${service}`);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.before({\n\t\t\tall: h('wistikettes/founds')\n\t\t});\n\t\tthis.after({\n\t\t\tall: h('wistikettes/founds')\n\t\t});\n\t},\n};\n\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}