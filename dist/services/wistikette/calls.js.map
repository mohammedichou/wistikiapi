{"version":3,"sources":["services/wistikette/calls.js"],"names":["debug","require","Service","get","id","params","Wistiki","findById","sn","then","wistikette","reject","errors","NotFound","resolve","compareMsnCipher","BadRequest","getOwner","wistiketteOwners","length","wistiketteOwner","plain","user","VoiceResponse","twiml","response","say","voice","language","dial","number","toString","create","data","callback","msn_cipher","client","CallCenter","config","twilio","accountSid","authToken","call","phone_number","error","code","message","setup","app","path","service","bind","filter","connection","h","hook","type","before","all","after"],"mappings":"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","file":"calls.js","sourcesContent":["import {Wistiki} from '../../db';\nimport errors from 'feathers-errors/lib/index'\nconst debug = require('debug')('darwin:services:wistikette:calls');\nimport config from '../../config';\nimport CallCenter from '../../lib/twilio';\n/**\n * Service for Wistiki Founds\n * @type {{\n * find: (function(*, *)),\n * get: (function(*, *, *)),\n * create: (function(*, *, *)),\n * update: (function(*, *, *, *)),\n * patch: (function(*, *, *, *)),\n * remove: (function(*, *, *)),\n * setup: (function(*=, *))\n * }}\n */\nvar Service = {\n\t/**\n\t * Returns all messages stored in db\n\t *\n\t * @param params\n\t */\n\tget(id, params){\n\t\treturn Wistiki.findById(params.sn)\n\t\t\t.then( // Check if wistiki exist\n\t\t\t\t(wistikette) => {\n\t\t\t\t\tif (!wistikette)\n\t\t\t\t\t\treturn Promise.reject(new errors.NotFound(`RESOURCE_NOT_FOUND`, {errors: [`Wistikette ${params.sn} not found`]}));\n\t\t\t\t\treturn Promise.resolve(wistikette);\n\t\t\t\t}\n\t\t\t).then( // Check msn cipher & find owner\n\t\t\t(wistikette) => {\n\t\t\t\tif (!wistikette.compareMsnCipher(id))\n\t\t\t\t\treturn Promise.reject(new errors.BadRequest(`REQUEST_AUTHENTICATION_FAILED`, {errors: [`MSN Cipher mismatch`]}));\n\n\t\t\t\treturn wistikette.getOwner().then(\n\t\t\t\t\t(wistiketteOwners) => {\n\n\t\t\t\t\t\tif (!wistiketteOwners || wistiketteOwners.length == 0)\n\t\t\t\t\t\t\treturn Promise.reject(new errors.NotFound('OWNER_NOT_FOUND', {errors: [`Owner not found for Wistikette ${wistikette.get('serial_number')}`]}));\n\t\t\t\t\t\tlet wistiketteOwner = wistiketteOwners[0];\n\t\t\t\t\t\tdebug('wistiketteOwner', wistiketteOwner.get({plain:true}));\n\t\t\t\t\t\tif (params.user && wistiketteOwner.get('email') == params.user.get('email'))\n\t\t\t\t\t\t\treturn Promise.reject(new errors.BadRequest('OPERATION_NOT_PERMITTED', {errors: [`Owner can't declare its Wistikette as found`]}));\n\t\t\t\t\t\tconst VoiceResponse = require('twilio').twiml.VoiceResponse;\n\n\t\t\t\t\t\tconst response = new VoiceResponse();\n\t\t\t\t\t\tresponse.say(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvoice: 'woman',\n\t\t\t\t\t\t\t\tlanguage: 'fr',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'Veuillez patienter, nous allons vous mettre en relation avec le propriÃ©taire du Wistikette'\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst dial = response.dial();\n\t\t\t\t\t\tdial.number({}, wistiketteOwner.get('phone_number'));\n\t\t\t\t\t\tdebug(response.toString());\n\t\t\t\t\t\treturn Promise.resolve(response.toString());\n\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t},\n\t/**\n\t *\n\t * @param {integer} id\n\t * @param {object} data\n\t * @param {object} params\n\t * @param {function} callback\n\t */\n\tcreate(data, params, callback){\n\t\tdebug(data);\n\t\tdebug(params);\n\t\t//TODO: check model before going further\n\t\treturn Wistiki.findById(params.sn)\n\t\t\t.then( // Check if wistiki exist\n\t\t\t\t(wistikette) => {\n\t\t\t\t\tif (!wistikette)\n\t\t\t\t\t\treturn Promise.reject(new errors.NotFound(`RESOURCE_NOT_FOUND`, {errors: [`Wistikette ${params.sn} not found`]}));\n\t\t\t\t\treturn Promise.resolve(wistikette);\n\t\t\t\t}\n\t\t\t).then( // Check msn cipher & find owner\n\t\t\t\t(wistikette) => {\n\t\t\t\t\tif (!wistikette.compareMsnCipher(data.msn_cipher))\n\t\t\t\t\t\treturn Promise.reject(new errors.BadRequest(`REQUEST_AUTHENTICATION_FAILED`, {errors: [`MSN Cipher mismatch`]}));\n\n\t\t\t\t\treturn wistikette.getOwner().then(\n\t\t\t\t\t\t(wistiketteOwners) => {\n\n\t\t\t\t\t\t\tif (!wistiketteOwners || wistiketteOwners.length == 0)\n\t\t\t\t\t\t\t\treturn Promise.reject(new errors.NotFound('OWNER_NOT_FOUND', {errors: [`Owner not found for Wistikette ${wistikette.get('serial_number')}`]}));\n\t\t\t\t\t\t\tlet wistiketteOwner = wistiketteOwners[0];\n\t\t\t\t\t\t\tdebug('wistiketteOwner', wistiketteOwner.get({plain:true}));\n\t\t\t\t\t\t\tif (params.user && wistiketteOwner.get('email') == params.user.get('email'))\n\t\t\t\t\t\t\t\treturn Promise.reject(new errors.BadRequest('OPERATION_NOT_PERMITTED', {errors: [`Owner can't declare its Wistikette as found`]}));\n\t\t\t\t\t\t\tlet client = new CallCenter(config.twilio.accountSid, config.twilio.authToken);\n\t\t\t\t\t\t\treturn client.call(\"+33644604745\", data.phone_number, `https://staging.wistiki.com/wistikettes/${params.sn}/calls/${data.msn_cipher}`).then(\n\t\t\t\t\t\t\t\t(call) => {\n\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t(error) => {\n\t\t\t\t\t\t\t\t\treturn Promise.reject(new errors.BadRequest('CALL_FAILED', {errors: [{code: error.code, message: error.message}]}))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t},\n\n\t/**\n\t * TODO: Description\n\t * @param app\n\t * @param path\n\t */\n\tsetup(app, path){\n\t\tthis.app = app;\n\t\t//Bind the apps service method to service to always look services up dynamically\n\t\tthis.service = app.service.bind(app);\n\t\tthis.filter((data, connection) => {\n\t\t\treturn false;\n\t\t});\n\t\tlet h = (service) => {\n\t\t\treturn (hook) => {\n\t\t\t\tif(hook.type == 'before'){\n\t\t\t\t\t//console.time(`${hook.method}:${service}`);\n\t\t\t\t}else if(hook.type == 'after'){\n\t\t\t\t\t//console.timeEnd(`${hook.method}:${service}`);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.before({\n\t\t\tall: h('wistikettes/founds')\n\t\t});\n\t\tthis.after({\n\t\t\tall: h('wistikettes/founds')\n\t\t});\n\t},\n};\n\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}