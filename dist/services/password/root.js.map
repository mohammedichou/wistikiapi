{"version":3,"sources":["services/password/root.js"],"names":["AWS","config","loadFromPath","update","region","Service","create","data","User","cache","findById","email","userModel","errors","NotFound","password_reset_token","uuid","v4","password_reset_date","utc","languages","acceptLanguage","parse","locale","EmailService","sendForgotPasswordEmail","user","language","id","message","BadRequest","password","hashPassword","new_password","setup","app","service","bind","filter"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAGAA,iBAAIC,MAAJ,CAAWC,YAAX,CAAwB,oCAAxB;AACAF,iBAAIC,MAAJ,CAAWE,MAAX,CAAkB,EAAEC,QAAQ,cAAV,EAAlB;;AAEA,IAAMC,UAAU;;AAEd;;;;AAIMC,QANQ;AAAA,yGAMDC,IANC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAOYC,SAAKC,KAAL,GAAaC,QAAb,CAAsBH,KAAKI,KAA3B,CAPZ;;AAAA;AAONC,uBAPM;;AAAA,kBAQPA,SARO;AAAA;AAAA;AAAA;;AAAA,oBASJ,IAAIC,yBAAOC,QAAX,CAAoB,iBAApB,CATI;;AAAA;AAAA;AAAA,qBAYNF,UAAUH,KAAV,GAAkBN,MAAlB,CAAyB;AAC7BY,sCAAsBC,mBAAKC,EAAL,EADO;AAE7BC,qCAAqB,wBAASC,GAAT;AAFQ,eAAzB,CAZM;;AAAA;AAiBNC,uBAjBM,GAiBMC,qBAAeC,KAAf,CAAqBV,UAAUW,MAA/B,CAjBN;;AAkBZC,8BAAaC,uBAAb,CAAqC;AACnCd,uBAAOC,UAAUD,KADkB;AAEnCe,sBAAMd,SAF6B;AAGnCG,sCAAsBH,UAAUG,oBAHG;AAInCY,0BAAUP,UAAU,CAAV;AAJyB,eAArC;;AAlBY,+CAyBL,IAzBK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA2Bd;;;;;AAKMjB,QAhCQ;AAAA,2GAgCDyB,EAhCC,EAgCGrB,IAhCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAiCYC,SAAKC,KAAL,GAAaC,QAAb,CAAsBkB,EAAtB,CAjCZ;;AAAA;AAiCNhB,uBAjCM;;AAAA,kBAkCPA,SAlCO;AAAA;AAAA;AAAA;;AAAA,oBAmCJ,IAAIC,yBAAOC,QAAX,CAAoB,oBAApB,EAA0C,EAAED,QAAQ,CAAC,EAAEgB,mBAAiBD,EAAjB,eAAF,EAAD,CAAV,EAA1C,CAnCI;;AAAA;AAAA,oBAsCRhB,UAAUG,oBAAV,KAAmCR,KAAKQ,oBAtChC;AAAA;AAAA;AAAA;;AAAA,oBAuCJ,IAAIF,yBAAOiB,UAAX,CACJ,gBADI,EAEJ,EAAEjB,QAAQ,CAAC,EAAEgB,mCAAiCtB,KAAKQ,oBAAtC,WAAF,EAAD,CAAV,EAFI,CAvCI;;AAAA;AAAA;AAAA,qBA6CNH,UAAUH,KAAV,GAAkBN,MAAlB,CAAyB;AAC7BY,sCAAsB,IADO;AAE7BG,qCAAqB,IAFQ;AAG7Ba,0BAAUvB,SAAKwB,YAAL,CAAkBzB,KAAK0B,YAAvB;AAHmB,eAAzB,CA7CM;;AAAA;AAAA,gDAkDL,IAlDK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAoDd;;;;AAIAC,OAxDc,iBAwDRC,GAxDQ,EAwDH;AACT,SAAKA,GAAL,GAAWA,GAAX;AACA;AACA,SAAKC,OAAL,GAAeD,IAAIC,OAAJ,CAAYC,IAAZ,CAAiBF,GAAjB,CAAf;AACA,SAAKG,MAAL,CAAY;AAAA,aAAM,KAAN;AAAA,KAAZ;AACD;AA7Da,CAAhB;;kBAgEejC,O","file":"root.js","sourcesContent":["import moment from 'moment';\nimport uuid from 'node-uuid';\nimport errors from 'feathers-errors';\nimport AWS from 'aws-sdk';\nimport { User } from '../../db';\nimport EmailService from '../../lib/email';\nimport { acceptLanguage } from '../../lib/i18n';\n\n\nAWS.config.loadFromPath('./dist/config/aws_credentials.json');\nAWS.config.update({ region: 'eu-central-1' });\n\nconst Service = {\n\n  /**\n   * Send an email with forgot password link\n   * @param data\n   */\n  async create(data) {\n    const userModel = await User.cache().findById(data.email);\n    if (!userModel) {\n      throw new errors.NotFound('EMAIL_NOT_FOUND');\n    }\n\n    await userModel.cache().update({\n      password_reset_token: uuid.v4(),\n      password_reset_date: moment().utc(),\n    });\n\n    const languages = acceptLanguage.parse(userModel.locale);\n    EmailService.sendForgotPasswordEmail({\n      email: userModel.email,\n      user: userModel,\n      password_reset_token: userModel.password_reset_token,\n      language: languages[0],\n    });\n\n    return null;\n  },\n  /**\n   * Update password\n   * @param id\n   * @param data\n   */\n  async update(id, data) {\n    const userModel = await User.cache().findById(id);\n    if (!userModel) {\n      throw new errors.NotFound('RESOURCE_NOT_FOUND', { errors: [{ message: `User ${id} not found` }] });\n    }\n\n    if (userModel.password_reset_token !== data.password_reset_token) {\n      throw new errors.BadRequest(\n        'TOKEN_MISMATCH',\n        { errors: [{ message: `Password reset token ${data.password_reset_token} wrong` }] },\n      );\n    }\n\n    await userModel.cache().update({\n      password_reset_token: null,\n      password_reset_date: null,\n      password: User.hashPassword(data.new_password),\n    });\n    return null;\n  },\n  /**\n   * @param app\n   * @param path\n   */\n  setup(app) {\n    this.app = app;\n    // Bind the apps service method to service to always look services up dynamically\n    this.service = app.service.bind(app);\n    this.filter(() => false);\n  },\n};\n\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}