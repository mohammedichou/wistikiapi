{"version":3,"sources":["services/users/threads/messages.js"],"names":["Service","create","data","params","callback","user","User","findById","email","thread","Thread","tid","all","then","result","reject","errors","NotFound","id","participants","getParticipants","where","$ne","message","Message","body","user_email","get","thread_id","type","states","map","participant","MessageHasStatus","message_id","_","union","reload","include","as","model","attributes","exclude","sensibleData","notification","author","first_name","getOwnedDevices","devices","forEach","device","notify","notificationMessage","GCM","collapse_key","APNS","aps","setup","app","path","service","bind","filter","created","connection","rooms","indexOf","length","removed","updated","hook","h","before","after","dataValues","omit"],"mappings":"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","file":"messages.js","sourcesContent":["import { Message, MessageHasStatus, Thread, User } from '../../../db';\nimport errors from 'feathers-errors/lib/index';\nimport { sensibleData } from '../../../config'\nimport _ from 'lodash';\nimport { notifyEndpoint } from '../../../lib/sns';\n\n/**\n * Service for User Threads. Threads where user is participating\n * @type {{\n * find: (function(*, *)),\n * get: (function(*, *, *)),\n * create: (function(*, *, *)),\n * update: (function(*, *, *, *)),\n * patch: (function(*, *, *, *)),\n * remove: (function(*, *, *)),\n * setup: (function(*=, *))\n * }}\n */\nvar Service = {\n\t/**\n\t * Post a new message to thread\n\t * @param data\n\t * @param params\n\t * @param callback\n\t */\n\tcreate(data, params, callback){\n\t\tlet user = User.findById(params.email);\n\t\tlet thread = Thread.findById(params.tid);\n\t\treturn Promise.all([user, thread]).then(\n\t\t\t(result) => {//Get list of thread participants & create message\n\t\t\t\tlet user = result[0];\n\t\t\t\tlet thread = result[1];\n\n\t\t\t\tif (thread == null)\n\t\t\t\t\treturn Promise.reject(new errors.NotFound(`RESOURCE_NOT_FOUND`, {errors: [`Thread ${params.id} not found`]}));\n\t\t\t\tlet participants = thread.getParticipants({\n\t\t\t\t\twhere: {\n\t\t\t\t\t\temail: {\n\t\t\t\t\t\t\t$ne: params.email\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tlet message = Message.create({\n\t\t\t\t\tbody: data.body,\n\t\t\t\t\tuser_email: user.get('email'),\n\t\t\t\t\tthread_id: thread.get('id'),\n\t\t\t\t\ttype: 'MESSAGE'\n\t\t\t\t});\n\t\t\t\treturn Promise.all([participants, message]);\n\t\t\t}\n\t\t).then(//Set States\n\t\t\t(result) => {\n\t\t\t\tlet participants = result[0];\n\t\t\t\tlet message = result[1];\n\t\t\t\tlet states = participants.map(\n\t\t\t\t\t(participant) => {\n\t\t\t\t\t\treturn MessageHasStatus.create({\n\t\t\t\t\t\t\tuser_email: participant.get('email'),\n\t\t\t\t\t\t\tmessage_id: message.get('id')\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn Promise.all(_.union([participants, message], states));\n\t\t\t}\n\t\t).then(\n\t\t\t(result) => {\n\t\t\t\tlet participants = result[0];\n\t\t\t\tlet message = result[1];\n\t\t\t\tlet reload = message.reload({\n\t\t\t\t\tinclude: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tas: 'author',\n\t\t\t\t\t\t\tmodel: User,\n\t\t\t\t\t\t\tattributes: {\n                exclude: sensibleData.user\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tas: 'thread',\n\t\t\t\t\t\t\tmodel: Thread,\n\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\texclude: ['user_email']\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tinclude: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmodel: User,\n\t\t\t\t\t\t\t\t\tas: 'creator',\n\t\t\t\t\t\t\t\t\tattributes: {\n                    exclude: sensibleData.user\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmodel: User,\n\t\t\t\t\t\t\t\t\tas: 'participants',\n\t\t\t\t\t\t\t\t\tattributes: {\n                    exclude: sensibleData.user,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmodel: Message,\n\t\t\t\t\t\t\t\t\tas: 'last_message',\n\t\t\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\t\t\texclude: ['user_email', 'thread_id']\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tinclude: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tas: 'author',\n\t\t\t\t\t\t\t\t\t\t\tmodel: User,\n\t\t\t\t\t\t\t\t\t\t\tattributes: {\n                        exclude: sensibleData.user\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tas: 'states',\n\t\t\t\t\t\t\t\t\t\t\tmodel: MessageHasStatus,\n\t\t\t\t\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\t\t\t\t\texclude: ['message_id', 'user_email']\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tinclude: [\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: User,\n\t\t\t\t\t\t\t\t\t\t\t\t\tattributes: {\n                            exclude: sensibleData.user\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t]\n\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tas: 'states',\n\t\t\t\t\t\t\tmodel: MessageHasStatus,\n\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\texclude: ['message_id', 'user_email']\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tinclude: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmodel: User,\n\t\t\t\t\t\t\t\t\tattributes: {\n                    exclude: sensibleData.user\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\t\treturn Promise.all(_.union(result, [reload]));\n\t\t\t}\n\t\t).then( // Notifications\n\t\t\t(result) => {\n\t\t\t\tlet participants = result[0];\n\t\t\t\tlet message = result[1];\n\t\t\t\tlet notification = {\n\t\t\t\t\tid: 'MESSAGE',\n\t\t\t\t\tmessage_id: message.get('id'),\n\t\t\t\t\tthread_id: message.get('thread').get('id'),\n\t\t\t\t\tauthor: {\n\t\t\t\t\t\temail : message.get('author').email,\n\t\t\t\t\t\tfirst_name: message.get('author').first_name\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tparams.user.getOwnedDevices().then(\n\t\t\t\t\t(devices) => { // Send push to all devices\n\t\t\t\t\t\t_.forEach(devices, device => {\n\t\t\t\t\t\t\tif (device.get('sns_arn') && device.get('sns_arn') != params.device.get('sns_arn'))\n\t\t\t\t\t\t\t\tdevice.notify(notification, `MESSAGE_${message.get('id')}`);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tparticipants.forEach((participant) => {\n\t\t\t\t\tparticipant.getOwnedDevices().then(\n\t\t\t\t\t\t(devices) => { // Send push to all devices\n\t\t\t\t\t\t\t_.forEach(devices, device => {\n\t\t\t\t\t\t\t\tif (device.get('sns_arn') && device.get('sns_arn') != params.device.get('sns_arn')){\n\t\t\t\t\t\t\t\t\t//device.notify(notification, `MESSAGE_${message.get('id')}`);\n\t\t\t\t\t\t\t\t\tlet notificationMessage = {\n\t\t\t\t\t\t\t\t\t\t'default': notification,\n\t\t\t\t\t\t\t\t\t\tGCM: {\n\t\t\t\t\t\t\t\t\t\t\tdata: notification,\n\t\t\t\t\t\t\t\t\t\t\tcollapse_key: `MESSAGE_${message.get('id')}`\n\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tAPNS: {\n\t\t\t\t\t\t\t\t\t\t\tdata: notification,\n\t\t\t\t\t\t\t\t\t\t\taps: {\n\t\t\t\t\t\t\t\t\t\t\t\t'content-available': 1,\n\t\t\t\t\t\t\t\t\t\t\t\t'badge': 1,\n\t\t\t\t\t\t\t\t\t\t\t\t'alert': {\n\t\t\t\t\t\t\t\t\t\t\t\t\t'title': 'Wistiki Chat',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'body': `${message.author.get('first_name')}: ${message.get('body')}`\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tnotifyEndpoint(device.get('sns_arn'), notificationMessage, device.get('uid'));\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t});\n\t\t\t\treturn message;\n\t\t\t}\n\t\t)\n\t},\n\t/**\n\t * TODO: Description\n\t * @param app\n\t * @param path\n\t */\n\tsetup(app, path){\n\t\tthis.app = app;\n\t\t//Bind the apps service method to service to always look services up dynamically\n\t\tthis.service = app.service.bind(app);\n\n\t\tthis.filter({\n\t\t\tcreated: (data, connection) => {\n\t\t\t\tif (!connection.user) return false;\n\t\t\t\tif (connection.rooms.indexOf(`c:u:${connection.user.get('email')}`) == -1 && data.thread.participants.filter((participant) => participant.email == connection.user.get('email')).length == 0) return false;\n\t\t\t\treturn data;\n\t\t\t},\n\t\t\tremoved: (data, connection) => {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tupdated: (data, connection, hook) => {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t\tlet h = (service) => {\n\t\t\treturn (hook) => {\n\t\t\t\tif(hook.type == 'before'){\n\t\t\t\t\t//console.time(`${hook.method}:${service}`);\n\t\t\t\t}else if(hook.type == 'after'){\n\t\t\t\t\t//console.timeEnd(`${hook.method}:${service}`);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tthis.before({\n\t\t\tall: h('users/threads/messages')\n\t\t});\n\t\tthis.after({\n\t\t\tall: h('users/threads/messages')\n\t\t});\n\t},\n\tafter: {\n\t\tcreate: (hook) => {\n\t\t\thook.result.dataValues = _.omit(hook.result.dataValues, ['user_email', 'thread_id']);\n\t\t\treturn hook;\n\t\t}\n\t}\n};\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}