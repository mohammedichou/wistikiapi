{"version":3,"sources":["services/users/confirmation.js"],"names":["Service","update","id","data","params","User","cache","findById","email","userModel","errors","NotFound","message","status","BadRequest","confirmation_token","confirmation_date","utc","languages","acceptLanguage","parse","locale","EmailService","sendTutoEmail","user","get","language","setup","app","service","bind","filter"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA,IAAMA,UAAU;;AAEd;;;;;;;;;AASMC,QAXQ;AAAA,yGAWDC,EAXC,EAWGC,IAXH,EAWSC,MAXT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAYUC,SAAKC,KAAL,GAAaC,QAAb,CAAsBH,OAAOI,KAA7B,CAZV;;AAAA;AAYRC,uBAZQ;;AAAA,kBAePA,SAfO;AAAA;AAAA;AAAA;;AAAA,oBAgBJ,IAAIC,yBAAOC,QAAX,CAAoB,oBAApB,EAA0C;AAC9CD,wBAAQ,CACN;AACEE,qCAAiBR,OAAOI,KAAxB;AADF,iBADM;AADsC,eAA1C,CAhBI;;AAAA;AAAA,oBA2BRC,UAAUI,MAAV,KAAqB,eA3Bb;AAAA;AAAA;AAAA;;AAAA,oBA4BJ,IAAIH,yBAAOI,UAAX,CAAsB,yBAAtB,EAAiD;AACrDJ,wBAAQ,CACN;AACEE,qCAAiBR,OAAOI,KAAxB;AADF,iBADM;AAD6C,eAAjD,CA5BI;;AAAA;AAAA,oBAuCRC,UAAUM,kBAAV,KAAiCb,EAvCzB;AAAA;AAAA;AAAA;;AAAA,oBAwCJ,IAAIQ,yBAAOI,UAAX,CAAsB,4BAAtB,EAAoD;AACxDJ,wBAAQ,CACN;AACEE,mDAA+BV,EAA/B,0BAAsDE,OAAOI;AAD/D,iBADM;AADgD,eAApD,CAxCI;;AAAA;AAAA;AAAA,qBAiDMC,UAAUH,KAAV,GAAkBL,MAAlB,CAAyB;AACzCe,mCAAmB,wBAASC,GAAT,EADsB;AAEzCF,oCAAoB,IAFqB;AAGzCF,wBAAQ;AAHiC,eAAzB,CAjDN;;AAAA;AAiDZJ,uBAjDY;;;AAuDZ;AACMS,uBAxDM,GAwDMC,qBAAeC,KAAf,CAAqBX,UAAUY,MAA/B,CAxDN;;AAyDZC,8BAAaC,aAAb,CAA2B;AACzBf,uBAAOC,UAAUD,KADQ;AAEzBgB,sBAAMf,UAAUgB,GAAV,EAFmB;AAGzBC,0BAAUR,UAAU,CAAV;AAHe,eAA3B;AAzDY,+CA8DL,IA9DK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAgEd;;;;AAIAS,OApEc,iBAoERC,GApEQ,EAoEH;AACT;AACA,SAAKA,GAAL,GAAWA,GAAX;AACA;AACA,SAAKC,OAAL,GAAeD,IAAIC,OAAJ,CAAYC,IAAZ,CAAiBF,GAAjB,CAAf;AACA;AACA,SAAKG,MAAL,CAAY;AAAA,aAAM,KAAN;AAAA,KAAZ;AACD;AA3Ea,CAAhB;kBA6Ee/B,O","file":"confirmation.js","sourcesContent":["import errors from 'feathers-errors';\nimport moment from 'moment';\nimport { User } from '../../db';\nimport EmailService from '../../lib/email';\nimport { acceptLanguage } from '../../lib/i18n';\n\nconst Service = {\n\n  /**\n   * Verify id (token) and update user profile to Confirmed if verification succeed.\n   * if user has status \"CONFIRMED\" it will return Bad Request error\n   *\n   * @param id\n   * @param data\n   * @param params\n   * @return {Promise.<null>}\n   */\n  async update(id, data, params) {\n    let userModel = await User.cache().findById(params.email);\n    // User not found\n    /* istanbul ignore next */\n    if (!userModel) {\n      throw new errors.NotFound('RESOURCE_NOT_FOUND', {\n        errors: [\n          {\n            message: `User ${params.email} not found`,\n          },\n        ],\n      });\n    }\n\n    // User status CONFIRMED or DESACTIVATED\n    /* istanbul ignore next */\n    if (userModel.status !== 'NOT CONFIRMED') {\n      throw new errors.BadRequest('OPERATION_NOT_PERMITTED', {\n        errors: [\n          {\n            message: `User ${params.email} has already confirmed his account`,\n          },\n        ],\n      });\n    }\n\n    // Provided token does not match stored token\n    /* istanbul ignore else */\n    if (userModel.confirmation_token !== id) {\n      throw new errors.BadRequest('CONFIRMATION_TOKEN_INVALID', {\n        errors: [\n          {\n            message: `Confirmation token ${id} invalid for user ${params.email}`,\n          },\n        ],\n      });\n    }\n\n    userModel = await userModel.cache().update({\n      confirmation_date: moment().utc(),\n      confirmation_token: null,\n      status: 'CONFIRMED',\n    });\n\n    // Send tutorial email with user language\n    const languages = acceptLanguage.parse(userModel.locale);\n    EmailService.sendTutoEmail({\n      email: userModel.email,\n      user: userModel.get(),\n      language: languages[0],\n    });\n    return null;\n  },\n  /**\n   * @param app\n   * @param path\n   */\n  setup(app) {\n    /* istanbul ignore next: should be tested when websockets are implemented */\n    this.app = app;\n    /* istanbul ignore next */\n    this.service = app.service.bind(app);\n    /* istanbul ignore next */\n    this.filter(() => false);\n  },\n};\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}