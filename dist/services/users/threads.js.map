{"version":3,"sources":["services/users/threads.js"],"names":["Service","find","params","User","cache","findById","email","userModel","errors","NotFound","message","isAuthorized","ModelAcl","isAllowed","user","then","Forbidden","getThreads","joinTableAttributes","attributes","exclude","include","model","as","sensibleData","Message","MessageHasStatus","threads","setup","app","service","bind","filter"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AAEA;;;AAGA,IAAMA,UAAU;AACd;;;;;AAKMC,MANQ;AAAA,yGAMHC,MANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAOYC,SAAKC,KAAL,GAAaC,QAAb,CAAsBH,OAAOI,KAA7B,CAPZ;;AAAA;AAONC,uBAPM;;AAAA,kBAQPA,SARO;AAAA;AAAA;AAAA;;AAAA,oBASJ,IAAIC,yBAAOC,QAAX,CACJ,oBADI,EAEJ,EAAED,QAAQ,CAAC,EAAEE,mBAAiBR,OAAOI,KAAxB,eAAF,EAAD,CAAV,EAFI,CATI;;AAAA;AAgBNK,0BAhBM,GAgBSC,wBAASC,SAAT,CAAmBX,OAAOY,IAA1B,EAAgCP,SAAhC,EAA2C,cAA3C,EAA2DQ,IAA3D,CAAgE;AAAA,uBAAM,IAAN;AAAA,eAAhE,EAA4E;AAAA,uBAAM,KAAN;AAAA,eAA5E,CAhBT;;AAkBZ;;AAlBY,kBAmBPJ,YAnBO;AAAA;AAAA;AAAA;;AAAA,oBAoBJ,IAAIH,yBAAOQ,SAAX,CAAqB,iBAArB,EAAwC;AAC5CR,wBAAQ,CAAC;AACPE,2BAAS;AADF,iBAAD;AADoC,eAAxC,CApBI;;AAAA;AAAA;AAAA,qBA2BUH,UAAUU,UAAV,CAAqB;AACzCC,qCAAqB,EADoB;AAEzCC,4BAAY;AACVC,2BAAS,CAAC,YAAD;AADC,iBAF6B;AAKzCC,yBAAS,CACP;AACEC,yBAAOnB,QADT;AAEEoB,sBAAI,SAFN;AAGEJ,8BAAY;AACVC,6BAASI,qBAAaV;AADZ;AAHd,iBADO,EAQP;AACEQ,yBAAOnB,QADT;AAEEoB,sBAAI,cAFN;AAGEJ,8BAAY;AACVC,6BAASI,qBAAaV;AADZ;AAHd,iBARO,EAeP;AACEQ,yBAAOG,WADT;AAEEF,sBAAI,cAFN;AAGEJ,8BAAY;AACVC,6BAAS,CAAC,YAAD,EAAe,WAAf;AADC,mBAHd;AAMEC,2BAAS,CACP;AACEE,wBAAI,QADN;AAEED,2BAAOnB,QAFT;AAGEgB,gCAAY;AACVC,+BAASI,qBAAaV;AADZ;AAHd,mBADO,EAQP;AACES,wBAAI,QADN;AAEED,2BAAOI,oBAFT;AAGEP,gCAAY;AACVC,+BAAS,CAAC,YAAD,EAAe,YAAf;AADC,qBAHd;AAMEC,6BAAS,CACP;AACEC,6BAAOnB,QADT;AAEEgB,kCAAY;AACVC,iCAASI,qBAAaV;AADZ;AAFd,qBADO;;AANX,mBARO;;AANX,iBAfO;AALgC,eAArB,CA3BV;;AAAA;AA2BNa,qBA3BM;AAAA,+CAoFLA,OApFK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAsFd;;;;AAIAC,OA1Fc,iBA0FRC,GA1FQ,EA0FH;AACT,SAAKA,GAAL,GAAWA,GAAX;AACA;AACA,SAAKC,OAAL,GAAeD,IAAIC,OAAJ,CAAYC,IAAZ,CAAiBF,GAAjB,CAAf;AACA,SAAKG,MAAL,CAAY;AAAA,aAAM,KAAN;AAAA,KAAZ;AACD;AA/Fa,CAAhB;kBAiGehC,O","file":"threads.js","sourcesContent":["import errors from 'feathers-errors';\nimport { Message, MessageHasStatus, User } from '../../db';\nimport { sensibleData } from '../../config';\nimport { ModelAcl } from '../../middlewares/aclMiddleware';\n\n/**\n * Service for User Threads. Threads where user is participating\n */\nconst Service = {\n  /**\n   * Get user Threads.\n   *\n   * @param params\n   */\n  async find(params) {\n    const userModel = await User.cache().findById(params.email);\n    if (!userModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [{ message: `User ${params.email} not found` }] },\n      );\n    }\n\n\n    const isAuthorized = ModelAcl.isAllowed(params.user, userModel, 'find_threads').then(() => true, () => false);\n\n    /* istanbul ignore else */\n    if (!isAuthorized) {\n      throw new errors.Forbidden('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to access this resource',\n        }],\n      });\n    }\n\n    const threads = await userModel.getThreads({\n      joinTableAttributes: [],\n      attributes: {\n        exclude: ['user_email'],\n      },\n      include: [\n        {\n          model: User,\n          as: 'creator',\n          attributes: {\n            exclude: sensibleData.user,\n          },\n        },\n        {\n          model: User,\n          as: 'participants',\n          attributes: {\n            exclude: sensibleData.user,\n          },\n        },\n        {\n          model: Message,\n          as: 'last_message',\n          attributes: {\n            exclude: ['user_email', 'thread_id'],\n          },\n          include: [\n            {\n              as: 'author',\n              model: User,\n              attributes: {\n                exclude: sensibleData.user,\n              },\n            },\n            {\n              as: 'states',\n              model: MessageHasStatus,\n              attributes: {\n                exclude: ['message_id', 'user_email'],\n              },\n              include: [\n                {\n                  model: User,\n                  attributes: {\n                    exclude: sensibleData.user,\n                  },\n                },\n              ],\n\n            },\n          ],\n\n        },\n      ],\n    });\n\n\n    return threads;\n  },\n  /**\n   * TODO: Description\n   * @param app\n   */\n  setup(app) {\n    this.app = app;\n    // Bind the apps service method to service to always look services up dynamically\n    this.service = app.service.bind(app);\n    this.filter(() => false);\n  },\n};\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}