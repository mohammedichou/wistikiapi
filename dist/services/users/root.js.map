{"version":3,"sources":["services/users/root.js"],"names":["AWS","config","loadFromPath","update","region","debug","require","Service","get","id","params","User","cache","findById","user","errors","NotFound","message","ModelAcl","isAllowed","then","isAuthorized","Forbidden","_","omit","plain","sensibleData","create","body","data","pick","email","userModel","Conflict","avatar_base64","split","length","validator","isBase64","BadRequest","headers","assign","languages","acceptLanguage","parse","language","locale","photoUploader","upload","unix","catch","avatarUrl","avatar_url","decodeURIComponent","includes","ignoredConfirmationDomains","replace","EmailService","sendAccountConfirmationEmail","first_name","confirmation_token","confirmation_date","utc","status","sendTutoEmail","avatarBase64","remove","setup","app","service","bind","filter","created","removed","updated","connection","hook","rooms","indexOf"],"mappings":"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","file":"root.js","sourcesContent":["import errors from 'feathers-errors/lib/index';\nimport AWS from 'aws-sdk';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport validator from 'validator';\nimport config, { sensibleData } from '../../config';\nimport { ModelAcl } from '../../middlewares/aclMiddleware';\nimport { acceptLanguage } from '../../lib/i18n';\nimport photoUploader from '../../lib/photoUploader';\nimport { User } from '../../db';\nimport EmailService from '../../lib/email';\n\n\nAWS.config.loadFromPath('./dist/config/aws_credentials.json');\nAWS.config.update({ region: 'eu-central-1' });\n\nconst debug = require('debug')('darwin:users');\n\nconst Service = {\n  /**\n   * Get user by id. Throws an error if none can be found\n   * Typical use case: Customer support trying to access customer information.\n   *\n   * @param id requested user id\n   * @param params\n   */\n  async get(id, params) {\n    const user = await User.cache().findById(id);\n    /* istanbul ignore else */\n    if (!user) {\n      throw new errors.NotFound('RESOURCE_NOT_FOUND', { errors: [{ message: `User ${id} not found` }] });\n    }\n\n    const isAuthorized = await ModelAcl.isAllowed(params.user, user, 'get').then(() => true, () => false);\n    /* istanbul ignore else */\n    if (!isAuthorized) {\n      throw new errors.Forbidden('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to access this resource',\n        }],\n      });\n    }\n\n    return _.omit(user.get({ plain: true }), sensibleData.user);\n  },\n  /**\n   * User account creation. By default, user account will have status NOT CONFIRMED except\n   * for black listed domains as they have issues to receive confirmation email.\n   *\n   * @param body - passed data from request\n   * @param params - params send with the request\n   * @returns {Promise} - Rejected when user email already exists, avatar in invalid format\n   * resolved when user is added to database successfully\n   */\n  async create(body, params) {\n    const data = _.pick(body, [\n      'email',\n      'password',\n      'first_name',\n      'last_name',\n      'gender',\n      'phone_number',\n      'avatar_base64',\n    ]);\n    let userModel = await User.cache().findById(data.email);\n    if (userModel) {\n      throw new errors.Conflict(\n        'ACCOUNT_ALREADY_EXIST',\n        { errors: [{ message: `User ${data.email} already exist` }] },\n      );\n    }\n    if (data.avatar_base64 &&\n      (data.avatar_base64.split(',').length === 1 || !validator.isBase64(data.avatar_base64.split(',')[1]))\n    ) {\n      throw new errors.BadRequest('INVALID_AVATAR_FORMAT');\n    }\n    const headers = params.headers ? _.assign({ 'accept-language': 'en-US' }, params.headers) : {\n      'accept-language': 'en-US',\n    };\n\n    const languages = acceptLanguage.parse(headers['accept-language']);\n    debug('detected languages', JSON.stringify(languages, null, 2));\n    let language = 'en-US';\n    /* istanbul ignore else */\n    if (languages.length) {\n      language = `${languages[0]}`;\n    }\n\n    data.locale = language;\n\n    /* istanbul ignore else */\n    if (data.avatar_base64) {\n      // TODO: handle S3 failed requests\n      // TODO: Change file name so it can be tested\n      const avatarUrl = await photoUploader.upload(\n        'avatars.wistiki.2',\n        `${data.email}_${moment().unix()}`,\n        data.avatar_base64,\n      ).catch(() => null);\n      if (avatarUrl) {\n        data.avatar_url = decodeURIComponent(avatarUrl);\n      }\n    }\n    userModel = await User.cache().create(data);\n\n    // do not send confirmation email to black listed domains\n    if (!_.includes(config.email.ignoredConfirmationDomains, userModel.email.replace(/.*@/, ''))) {\n      EmailService.sendAccountConfirmationEmail({\n        email: userModel.email,\n        first_name: userModel.first_name ? userModel.first_name : '',\n        confirmation_token: userModel.confirmation_token,\n        language,\n      });\n      //if (language == 'fr-FR') {\n      //  EmailService.sendPromoWistiKeys({\n      //  email: userModel.email,\n      //  first_name: userModel.first_name ? userModel.first_name : '',\n      //  confirmation_token: userModel.confirmation_token,\n      //  language,\n      //});\n      //}  \n      \n    } else {\n      // Auto confirm account if email client ends with icloud.com\n      await userModel.cache().update({\n        confirmation_date: moment().utc(),\n        confirmation_token: null,\n        status: 'CONFIRMED',\n      });\n\n      EmailService.sendTutoEmail({\n        email: userModel.email,\n        user: userModel,\n        language,\n      });\n    }\n\n    return _.omit(userModel.get(), sensibleData.user);\n  },\n\n  /**\n   * Updates user infos (first_name, last_name, gender, phone number, avatar picture, locale).\n   *\n   * @param id    user email\n   * @param body request body\n   * @param params\n   * @return {Promise.<Object>} User data without sensible data\n   */\n  async update(id, body, params) {\n    const data = _.pick(body, [\n      'first_name',\n      'last_name',\n      'gender',\n      'phone_number',\n      'avatar_base64',\n      'locale',\n    ]);\n\n    let userModel = await User.cache().findById(id);\n    if (!userModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [{ message: `User ${id} not found` }] },\n      );\n    }\n\n    const isAuthorized = await ModelAcl.isAllowed(params.user, userModel, 'update')\n      .then(() => true, () => false);\n    if (!isAuthorized) {\n      throw new errors.Forbidden(('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to update this resource',\n        }],\n      }));\n    }\n\n    const avatarBase64 = data.avatar_base64 || '';\n    /* istanbul ignore else */\n    if (avatarBase64) {\n      /* istanbul ignore else */\n      if (avatarBase64.split(',').length === 1\n        || !validator.isBase64(avatarBase64.split(',')[1])) {\n        throw new errors.BadRequest('INVALID_AVATAR_FORMAT');\n      }\n      // TODO: handle S3 failed requests\n      const avatarUrl = await photoUploader.upload(\n        'avatars.wistiki.2',\n        `${id}_${moment().unix()}`,\n        avatarBase64,\n      ).catch(() => null);\n      if (avatarUrl) {\n        data.avatar_url = decodeURIComponent(avatarUrl);\n      }\n    }\n    userModel = await userModel.cache().update(data);\n    return _.omit(userModel.get(), sensibleData.user);\n  },\n\n  /**\n   * Make User account DESACTIVATED (keep it in database)\n   * Typical use case: Customer support disable user account upon his request\n   *\n   * @param id resource email address\n   * @param params\n   * @return {Promise.<void>}\n   */\n  async remove(id, params) {\n    const userModel = await User.cache().findById(id);\n    if (!userModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [{ message: `User ${id} not found` }] },\n      );\n    }\n\n    const isAuthorized = await ModelAcl.isAllowed(params.user, userModel, 'remove')\n      .then(() => true, () => false);\n    /* istanbul ignore else */\n    if (!isAuthorized) {\n      throw new errors.Forbidden(('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to remove this resource',\n        }],\n      }));\n    }\n    /* eslint-disable max-len */\n    // TODO: write unit tests when fully implemented in ACLs (who have the right to desactivate user account?)\n    /* istanbul ignore next: not yet fully supported by ACLs */\n    await userModel.cache().update({ status: 'DESACTIVATED' });\n    /* istanbul ignore next */\n    return null;\n  },\n  /**\n   * TODO: write unit tests for /users service setup\n   * @param app\n   * @param path\n   */\n  setup(app) {\n    /* istanbul ignore next */\n    this.app = app;\n    // Bind the apps service method to service to always look services up dynamically\n    /* istanbul ignore next */\n    this.service = app.service.bind(app);\n    /* istanbul ignore next */\n    this.filter({\n      created: () => false,\n      removed: () => false,\n      updated: (data, connection, hook) => {\n        /* istanbul ignore next */\n        debug('updated users/:user', data);\n        /* istanbul ignore next */\n        debug(hook);\n        /* istanbul ignore next */\n        if (!connection.user) return false;\n        /* istanbul ignore next */\n        if (connection.rooms.indexOf(`c:u:${connection.user.get('email')}`) === -1) return false;\n        /* istanbul ignore next */\n        return data;\n      },\n    });\n  },\n};\n\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}