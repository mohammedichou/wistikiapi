{"version":3,"sources":["services/users/wistikis.js"],"names":["debug","require","AWS","config","loadFromPath","Service","find","params","User","cache","findById","email","userModel","errors","NotFound","message","isAuthorized","ModelAcl","isAllowed","user","then","Forbidden","getActiveOwnership","attributes","exclude","_","union","sensibleData","wistiki","joinTableAttributes","include","model","Model","as","ownedWistikis","getActiveSharedWistikis","where","sharedWistiki","wistikis","flatten","all","map","wistikiObject","get","plain","owner","getLastPosition","position","coordinates","last_position","serialNumber","serial_number","Verhoeff","validate","substr","cs","generate","verifiedSerialNumber","wistiki_has_owner","wistiki_serial_number","each","friends","friend","wistiki_has_friend","create","bodyData","Wistiki","wistikiModel","ownershiplLogger","error","event","user_email","request_data","msn_cipher","BadRequest","validator","isHexadecimal","replace","isLength","authentication_key","reason","wistiki_picture_base64","split","length","isBase64","WistikiHasOwner","compareMsnCipher","request_user_email","given","calculated","getMsnCipher","getOwner","wistikiOwner","Conflict","infos","last_software_update","utc","last_software_version","activation_date","isEmpty","omit","update","data","pick","photoUploader","upload","unix","catch","avatarUrl","avatar_url","decodeURIComponent","link_loss","inverted_link_loss","ownership_start_date","setOwner","through","getFriends","lastPosition","resObject","id","getUserPairing","wistikiHasOwnerModel","WistikiHasFriend","wistikiHasFriendModel","wistikiHasUserModel","wistiki_picture","filter","setup","app","service","bind","created","connection","device","type","removed","updated"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAGA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,0BAAjB,CAAd;;AAGAC,iBAAIC,MAAJ,CAAWC,YAAX,CAAwB,oCAAxB;;AAEA,IAAMC,UAAU;AACd;;;;;;AAMMC,MAPQ;AAAA,0GAOHC,MAPG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAQYC,SAAKC,KAAL,GAAaC,QAAb,CAAsBH,OAAOI,KAA7B,CARZ;;AAAA;AAQNC,uBARM;;AAAA,kBASPA,SATO;AAAA;AAAA;AAAA;;AAAA,oBAUJ,IAAIC,yBAAOC,QAAX,CACJ,oBADI,EAEJ,EAAED,QAAQ,CAAC,EAAEE,mBAAiBR,OAAOI,KAAxB,eAAF,EAAD,CAAV,EAFI,CAVI;;AAAA;AAiBNK,0BAjBM,GAiBSC,wBAASC,SAAT,CAAmBX,OAAOY,IAA1B,EAAgCP,SAAhC,EAA2C,KAA3C,EAAkDQ,IAAlD,CAAuD;AAAA,uBAAM,IAAN;AAAA,eAAvD,EAAmE;AAAA,uBAAM,KAAN;AAAA,eAAnE,CAjBT;;AAmBZ;;AAnBY,kBAoBPJ,YApBO;AAAA;AAAA;AAAA;;AAAA,oBAqBJ,IAAIH,yBAAOQ,SAAX,CAAqB,iBAArB,EAAwC;AAC5CR,wBAAQ,CAAC;AACPE,2BAAS;AADF,iBAAD;AADoC,eAAxC,CArBI;;AAAA;AAAA;AAAA,qBA4BgBH,UAAUU,kBAAV,CAA6B,EAAC;AACxDC,4BAAY;AACVC,2BAASC,iBAAEC,KAAF,CAAQC,qBAAaC,OAArB,EAA8B,CAAC,UAAD,CAA9B;AADC,iBAD2C;AAIvDC,qCAAqB,EAJkC;AAKvDC,yBAAS,CACP;AACEC,yBAAOC;AADT,iBADO,EAIP;AACED,yBAAOvB,QADT;AAEEyB,sBAAI,OAFN;AAGEV,8BAAY;AACVC,6BAASG,qBAAaR;AADZ;AAHd,iBAJO,EAWP,EAAE;AACAY,yBAAOvB,QADT;AAEEyB,sBAAI,SAFN;AAGEV,8BAAY;AACVC,6BAASG,qBAAaR;AADZ;AAHd,iBAXO;AAL8C,eAA7B,CA5BhB;;AAAA;AA4BNe,2BA5BM;AAAA;AAAA,qBAuDgBtB,UAAUuB,uBAAV,CAAkC;AAC5DZ,4BAAY;AACVC,2BAASC,iBAAEC,KAAF,CAAQC,qBAAaC,OAArB,EAA8B,CAAC,UAAD,CAA9B;AADC,iBADgD;AAI5DC,qCAAqB,EAJuC;AAK5DC,yBAAS,CACP;AACEC,yBAAOC;AADT,iBADO,EAIP,EAAC;AACCD,yBAAOvB,QADT;AAEEyB,sBAAI,OAFN;AAGEV,8BAAY;AACVC,6BAASG,qBAAaR;AADZ;AAHd,iBAJO,EAWP,EAAE;AACAY,yBAAOvB,QADT;AAEEyB,sBAAI,SAFN;AAGEG,yBAAO,EAAEzB,OAAOC,UAAUD,KAAnB,EAHT;AAIEY,8BAAY;AACVC,6BAASG,qBAAaR;AADZ;AAJd,iBAXO;AALmD,eAAlC,CAvDhB;;AAAA;AAuDNkB,2BAvDM;AAkFNC,sBAlFM,GAkFKb,iBAAEc,OAAF,CAAU,CAACL,aAAD,EAAgBG,aAAhB,CAAV,CAlFL;AAAA,gDAmFL,kBAAQG,GAAR,CAAYf,iBAAEgB,GAAF,CAAMH,QAAN;AAAA,qGAAgB,iBAAOV,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC3Bc,uCAD2B,GACXd,QAAQe,GAAR,CAAY,EAAEC,OAAO,IAAT,EAAZ,CADW;AAAA,8EAETF,cAAcG,KAFL;AAEhCH,wCAAcG,KAFkB;AAAA;AAAA,iCAGVjB,QAAQkB,eAAR,EAHU;;AAAA;AAG3BC,kCAH2B;;AAIjC,8BAAIA,QAAJ,EAAc;AACZ/C,kCAAM,4BAAN,wBAA2C+C,SAASA,QAAT,CAAkBC,WAA7D,GAA0ED,SAASA,QAAT,CAAkBC,WAA5F;AACAN,0CAAcO,aAAd,GAA8BF,QAA9B;AACD;AACKG,sCAR2B,QAQTR,cAAcS,aARL;;AASjC,8BAAI,CAACC,mBAASC,QAAT,CAAkBH,aAAaI,MAAb,CAAoB,CAApB,EAAuB,EAAvB,CAAlB,CAAL,EAAoD;AAC5CC,8BAD4C,GACvCH,mBAASI,QAAT,CAAkBN,aAAaI,MAAb,CAAoB,CAApB,EAAuB,EAAvB,CAAlB,CADuC;AAE5CG,gDAF4C,QAElBP,aAAaI,MAAb,CAAoB,CAApB,EAAuB,EAAvB,CAFkB,GAEWC,EAFX;;AAGlDb,0CAAcS,aAAd,GAA8BM,oBAA9B;AACAf,0CAAcG,KAAd,CAAoBa,iBAApB,CAAsCC,qBAAtC,GAA8DF,oBAA9D;AACAhC,6CAAEmC,IAAF,CAAOlB,cAAcmB,OAArB,EAA8B,UAACC,MAAD,EAAY;AACxCA,qCAAOC,kBAAP,CAA0BJ,qBAA1B,GAAkDF,oBAAlD;AACD,6BAFD;AAGD;AACDzD,gCAAM0C,aAAN;AAlBiC,2DAmB1BA,aAnB0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAhB;;AAAA;AAAA;AAAA;AAAA,kBAAZ,CAnFK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AA0Gd;;;;;;;AAOA;AACMsB,QAlHQ;AAAA,2GAkHDC,QAlHC,EAkHS1D,MAlHT;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAmHYC,SAAKC,KAAL,GAAaC,QAAb,CAAsBH,OAAOI,KAA7B,CAnHZ;;AAAA;AAmHNC,uBAnHM;;AAAA,kBAoHPA,SApHO;AAAA;AAAA;AAAA;;AAAA,oBAqHJ,IAAIC,yBAAOC,QAAX,CACJ,oBADI,EAEJ,EAAED,QAAQ,CAAC,EAAEE,mBAAiBR,OAAOI,KAAxB,eAAF,EAAD,CAAV,EAFI,CArHI;;AAAA;AAAA;AAAA,qBA2HeuD,YAAQzD,KAAR,GAAgBC,QAAhB,CAAyBuD,SAASd,aAAlC,CA3Hf;;AAAA;AA2HNgB,0BA3HM;;AAAA,kBA4HPA,YA5HO;AAAA;AAAA;AAAA;;AA6HVC,uCAAiBC,KAAjB,cAAkCJ,SAASd,aAA3C,wBAA6E;AAC3EmB,uBAAO,iBADoE;AAE3EnB,+BAAec,SAASd,aAFmD;AAG3EoB,4BAAYhE,OAAOY,IAAP,CAAYR,KAHmD;AAI3E6D,8BAAcP,QAJ6D,CAInD;AAJmD,eAA7E;;AA7HU,oBAoIJ,IAAIpD,yBAAOC,QAAX,CACJ,iBADI,EAEJ,EAAED,QAAQ,CAAC,EAAEE,sBAAoBkD,SAASd,aAA7B,wBAAF,EAAD,CAAV,EAFI,CApII;;AAAA;AAAA,kBA0IPc,SAASQ,UA1IF;AAAA;AAAA;AAAA;;AA2IVL,uCAAiBC,KAAjB,CAAuB,yBAAvB,EAAkD;AAChDC,uBAAO,qBADyC;AAEhDnB,+BAAegB,aAAahB,aAFoB;AAGhDoB,4BAAYhE,OAAOY,IAAP,CAAYR;AAHwB,eAAlD;;AA3IU,oBAiJJ,IAAIE,yBAAO6D,UAAX,CACJ,0BADI,EAEJ,EAAE7D,QAAQ,CAAC,EAAEE,SAAS,wBAAX,EAAD,CAAV,EAFI,CAjJI;;AAAA;AAAA,oBAuJR,CAAC4D,oBAAUC,aAAV,CAAwBX,SAASQ,UAAT,CAAoBI,OAApB,CAA4B,OAA5B,EAAqC,EAArC,CAAxB,CAAD,IACC,CAACF,oBAAUG,QAAV,CAAmBb,SAASQ,UAA5B,EAAwC,EAAxC,EAA4C,EAA5C,CAxJM;AAAA;AAAA;AAAA;;AAAA,oBA0JJ,IAAI5D,yBAAO6D,UAAX,CACJ,0BADI,EAEJ;AACE7D,wBAAQ,CAAC,EAAEE,SAAS,2BAAX,EAAD;AADV,eAFI,CA1JI;;AAAA;AAAA,kBAkKPkD,SAASc,kBAlKF;AAAA;AAAA;AAAA;;AAmKVX,uCAAiBC,KAAjB,CAAuB,gDAAvB,EAAyE;AACvEW,wBAAQ,gBAD+D;AAEvE7B,+BAAegB,aAAahB,aAF2C;AAGvEoB,4BAAYhE,OAAOY,IAAP,CAAYR;AAH+C,eAAzE;AAnKU,oBAwKJ,IAAIE,yBAAO6D,UAAX,CAAsB,6BAAtB,CAxKI;;AAAA;AAAA,oBA2KRT,SAASgB,sBAAT,KACDhB,SAASgB,sBAAT,CAAgCC,KAAhC,CAAsC,GAAtC,EAA2CC,MAA3C,KAAsD,CAAtD,IAA2D,CAACR,oBAAUS,QAAV,CAAmBnB,SAASgB,sBAAT,CAAgCC,KAAhC,CAAsC,GAAtC,EAA2C,CAA3C,CAAnB,CAD3D,CA3KQ;AAAA;AAAA;AAAA;;AAAA,oBA8KJ,IAAIrE,yBAAO6D,UAAX,CAAsB,uBAAtB,CA9KI;;AAAA;AAiLN1D,0BAjLM,GAiLSC,wBAASC,SAAT,CAAmBX,OAAOY,IAA1B,EAAgCkE,mBAAhC,EAAiD,QAAjD,EAA2DjE,IAA3D,CAAgE;AAAA,uBAAM,IAAN;AAAA,eAAhE,EAA4E;AAAA,uBAAM,KAAN;AAAA,eAA5E,CAjLT;;AAmLZ;;AAnLY,kBAoLPJ,YApLO;AAAA;AAAA;AAAA;;AAAA,oBAqLJ,IAAIH,yBAAOQ,SAAX,CAAqB,iBAArB,EAAwC;AAC5CR,wBAAQ,CAAC;AACPE,2BAAS;AADF,iBAAD;AADoC,eAAxC,CArLI;;AAAA;AAAA,kBA4LNoD,aAAamB,gBAAb,CAA8BrB,SAASQ,UAAvC,CA5LM;AAAA;AAAA;AAAA;;AA6LVL,uCAAiBC,KAAjB,CAAuB,qBAAvB,EAA8C;AAC5CC,uBAAO,kBADqC;AAE5CC,4BAAYhE,OAAOY,IAAP,CAAYR,KAFoB;AAG5C4E,oCAAoBhF,OAAOI,KAHiB;AAI5C6D,8BAAcP,QAJ8B;AAK5CrC,yBAASuC,aAAaxB,GAAb,CAAiB,EAAEC,OAAO,IAAT,EAAjB,CALmC;AAM5C6B,4BAAY;AACVe,yBAAOvB,SAASQ,UADN;AAEVgB,8BAAYtB,aAAauB,YAAb;AAFF;AANgC,eAA9C;AA7LU,oBAwMJ,IAAI7E,yBAAO6D,UAAX,CAAsB,+BAAtB,CAxMI;;AAAA;AAAA;AAAA,qBA2MiBP,aAAawB,QAAb,EA3MjB;;AAAA;AAAA;AAAA;AA2MLC,0BA3MK;;AAAA,mBA4MRA,YA5MQ;AAAA;AAAA;AAAA;;AAAA,oBA6MJ,IAAI/E,yBAAOgF,QAAX,CACJ,eADI,EAEJ,EAAEhF,QAAQ,CAAC,EAAEE,sBAAoBkD,SAASd,aAA7B,kBAAF,EAAD,CAAV,EAFI,CA7MI;;AAAA;AAmNR2C,mBAnNQ,GAmNA;AACVf,oCAAoBd,SAASc,kBADnB;AAEVgB,sCAAsB9B,SAAS8B,oBAAT,GACpB9B,SAAS8B,oBADW,GACY,wBAASC,GAAT,EAHxB;AAIVC,uCAAuBhC,SAASgC,qBAJtB;AAKVC,iCAAiB,wBAASF,GAAT;AALP,eAnNA;;;AA2NZ,kBAAIvE,iBAAE0E,OAAF,CAAUL,MAAMG,qBAAhB,CAAJ,EAA4C;AAC1CH,wBAAQrE,iBAAE2E,IAAF,CAAON,KAAP,EAAc,CAAC,sBAAD,EAAyB,uBAAzB,CAAd,CAAR;AACD;;AA7NW;AAAA,qBA+NN3B,aAAa1D,KAAb,GAAqB4F,MAArB,CAA4BP,KAA5B,CA/NM;;AAAA;AAiONQ,kBAjOM,GAiOC7E,iBAAE8E,IAAF,CAAOtC,QAAP,EAAiB,CAC5B,eAD4B,EAE5B,SAF4B,EAG5B,WAH4B,EAI5B,oBAJ4B,EAK5B,OAL4B,EAM5B,MAN4B,CAAjB,CAjOD;;AAAA,mBA0ORA,SAASgB,sBA1OD;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA2OcuB,wBAAcC,MAAd,CACtB,mBADsB,uBAEHlG,OAAOY,IAAP,CAAYR,KAFT,SAEkBwD,aAAahB,aAF/B,SAEgD,wBAASuD,IAAT,EAFhD,EAGtBzC,SAASgB,sBAHa,EAItB0B,KAJsB,CAIhB;AAAA,uBAAM,IAAN;AAAA,eAJgB,CA3Od;;AAAA;AA2OJC,uBA3OI;;AAgPV,kBAAIA,SAAJ,EAAe;AACbN,qBAAKO,UAAL,GAAkBC,mBAAmBF,SAAnB,CAAlB;AACD;;AAlPS;;AAqPZN,mBAAKS,SAAL,GAAiBT,KAAKS,SAAL,GAAiB,CAAjB,GAAqB,CAAtC;AACAT,mBAAKU,kBAAL,GAA0BV,KAAKU,kBAAL,GAA0B,CAA1B,GAA8B,CAAxD;AACAV,mBAAKW,oBAAL,GAA4B,wBAASjB,GAAT,EAA5B;AAvPY;AAAA,qBAwPN7B,aAAa+C,QAAb,CAAsB3G,OAAOI,KAA7B,EAAoC,EAAEwG,SAASb,IAAX,EAApC,CAxPM;;AAAA;AAAA;AAAA,qBAyPUnC,aAAawB,QAAb,CAAsB;AAC1CpE,4BAAY;AACVC,2BAASG,qBAAaR;AADZ,iBAD8B;AAI1CU,qCAAqB;AACnBL,2BAAS,CAAC,YAAD,EAAe,uBAAf;AADU;AAJqB,eAAtB,CAzPV;;AAAA;AAAA;AAAA;AAyPLqB,mBAzPK;AAAA;AAAA,qBAkQUsB,aAAaiD,UAAb,CAAwB;AAC5C7F,4BAAY;AACVC,2BAASG,qBAAaR;AADZ,iBADgC;AAI5CU,qCAAqB;AACnBL,2BAAS,CAAC,YAAD,EAAe,uBAAf;AADU;AAJuB,eAAxB,CAlQV;;AAAA;AAkQNqC,qBAlQM;AAAA;AAAA,qBA2QeM,aAAarB,eAAb,EA3Qf;;AAAA;AA2QNuE,0BA3QM;AA6QNC,uBA7QM,GA6QMnD,aAAaxB,GAAb,CAAiB,EAAEC,OAAO,IAAT,EAAjB,CA7QN;;AA8QZ0E,wBAAUrE,aAAV,GAA0BoE,YAA1B;AACAC,wBAAUzE,KAAV,GAAkBA,KAAlB;AACAyE,wBAAUzD,OAAV,GAAoBA,OAApB;;AAhRY,gDAkRLpC,iBAAE2E,IAAF,CAAOkB,SAAP,EAAkB3F,qBAAaC,OAA/B,CAlRK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqRRyE,QArRQ;AAAA,2GAqRDkB,EArRC,EAqRGtD,QArRH,EAqRa1D,MArRb;AAAA;;AAAA;AAAA;AAAA;AAAA;AAsRZP,oBAAM,UAAN,EAAkBuH,EAAlB,EAAsBtD,QAAtB;AAtRY;AAAA,qBAuRYzD,SAAKC,KAAL,GAAaC,QAAb,CAAsBH,OAAOI,KAA7B,CAvRZ;;AAAA;AAuRNC,uBAvRM;;AAAA,kBAwRPA,SAxRO;AAAA;AAAA;AAAA;;AAAA,oBAyRJ,IAAIC,yBAAOC,QAAX,CACJ,oBADI,EAEJ,EAAED,QAAQ,CAAC,EAAEE,mBAAiBR,OAAOI,KAAxB,eAAF,EAAD,CAAV,EAFI,CAzRI;;AAAA;AAAA;AAAA,qBA+ReuD,YAAQzD,KAAR,GAAgBC,QAAhB,CAAyBH,OAAOkD,oBAAhC,CA/Rf;;AAAA;AA+RNU,0BA/RM;AAAA;AAAA,qBAgSuBkB,oBAAgBmC,cAAhB,CAA+BjH,OAAOI,KAAtC,EAA6CJ,OAAOkD,oBAApD,CAhSvB;;AAAA;AAgSNgE,kCAhSM;AAAA;AAAA,qBAiSwBC,qBAAiBF,cAAjB,CAAgCjH,OAAOI,KAAvC,EAA8CJ,OAAOkD,oBAArD,CAjSxB;;AAAA;AAiSNkE,mCAjSM;;AAAA,oBAmSR,CAACF,oBAAD,IAAyB,CAACE,qBAnSlB;AAAA;AAAA;AAAA;;AAAA,oBAoSJ,IAAI9G,yBAAOC,QAAX,CACJ,oBADI,EAEJ,EAAED,QAAQ,CAAC,EAAEE,sBAAoBwG,EAApB,sCAAuDhH,OAAOI,KAAhE,EAAD,CAAV,EAFI,CApSI;;AAAA;AA0SRK,0BA1SQ;AA2SR4G,iCA3SQ;;;AA6SZ,kBAAIH,oBAAJ,EAA0B;AACxBzG,+BAAeC,wBAASC,SAAT,CAAmBX,OAAOY,IAA1B,EAAgCsG,oBAAhC,EAAsD,QAAtD,EAAgErG,IAAhE,CAAqE;AAAA,yBAAM,IAAN;AAAA,iBAArE,EAAiF;AAAA,yBAAM,KAAN;AAAA,iBAAjF,CAAf;AACAwG,sCAAsBH,oBAAtB;AACD,eAHD,MAGO,IAAIE,qBAAJ,EAA2B;AAChC3G,+BAAeC,wBAASC,SAAT,CAAmBX,OAAOY,IAA1B,EAAgCwG,qBAAhC,EAAuD,QAAvD,EAAiEvG,IAAjE,CAAsE;AAAA,yBAAM,IAAN;AAAA,iBAAtE,EAAkF;AAAA,yBAAM,KAAN;AAAA,iBAAlF,CAAf;AACAwG,sCAAsBD,qBAAtB;AACD;AACD;;AApTY,kBAqTP3G,YArTO;AAAA;AAAA;AAAA;;AAAA,oBAsTJ,IAAIH,yBAAOQ,SAAX,CAAqB,iBAArB,EAAwC;AAC5CR,wBAAQ,CAAC;AACPE,2BAAS;AADF,iBAAD;AADoC,eAAxC,CAtTI;;AAAA;AAAA,oBA6TRkD,SAASgB,sBAAT,KACDhB,SAASgB,sBAAT,CAAgCC,KAAhC,CAAsC,GAAtC,EAA2CC,MAA3C,KAAsD,CAAtD,IAA2D,CAACR,oBAAUS,QAAV,CAAmBnB,SAASgB,sBAAT,CAAgCC,KAAhC,CAAsC,GAAtC,EAA2C,CAA3C,CAAnB,CAD3D,CA7TQ;AAAA;AAAA;AAAA;;AAAA,oBAgUJ,IAAIrE,yBAAO6D,UAAX,CAAsB,uBAAtB,CAhUI;;AAAA;AAoUN4B,kBApUM,GAoUC7E,iBAAE8E,IAAF,CAAOtC,QAAP,EAAiB,CAC5B,eAD4B,EAE5B,SAF4B,EAG5B,WAH4B,EAI5B,oBAJ4B,EAK5B,OAL4B,EAM5B,MAN4B,CAAjB,CApUD;;AAAA,mBA6URA,SAASgB,sBA7UD;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA8UcuB,wBAAcC,MAAd,CACtB,mBADsB,uBAEHlG,OAAOY,IAAP,CAAYR,KAFT,SAEkBwD,aAAahB,aAF/B,SAEgD,wBAASuD,IAAT,EAFhD,EAGtBzC,SAASgB,sBAHa,EAItB0B,KAJsB,CAIhB;AAAA,uBAAM,IAAN;AAAA,eAJgB,CA9Ud;;AAAA;AA8UJC,uBA9UI;;AAmVV,kBAAIA,SAAJ,EAAe;AACbN,qBAAKuB,eAAL,GAAuBf,mBAAmBF,SAAnB,CAAvB;AACD;;AArVS;;AAwVZN,mBAAKS,SAAL,GAAiBT,KAAKS,SAAL,GAAiB,CAAjB,GAAqB,CAAtC;AACAT,mBAAKU,kBAAL,GAA0BV,KAAKU,kBAAL,GAA0B,CAA1B,GAA8B,CAAxD;AAzVY;AAAA,qBA0VNY,oBAAoBnH,KAApB,GAA4B4F,MAA5B,CAAmCC,IAAnC,CA1VM;;AAAA;;AA4VZtG,oBAAM4H,oBAAoBjF,GAApB,CAAwB,EAAEC,OAAO,IAAT,EAAxB,CAAN;;AA5VY;AAAA,qBA8VUuB,aAAawB,QAAb,CAAsB;AAC1CpE,4BAAY;AACVC,2BAASG,qBAAaR;AADZ,iBAD8B;AAI1CU,qCAAqB;AACnBL,2BAAS,CAAC,YAAD,EAAe,uBAAf;AADU;AAJqB,eAAtB,CA9VV;;AAAA;AAAA;AAAA;AA8VLqB,mBA9VK;AAAA;AAAA,qBAuWUsB,aAAaiD,UAAb,CAAwB;AAC5C7F,4BAAY;AACVC,2BAASG,qBAAaR;AADZ,iBADgC;AAI5CU,qCAAqB;AACnBL,2BAAS,CAAC,YAAD,EAAe,uBAAf;AADU;AAJuB,eAAxB,CAvWV;;AAAA;AAuWNqC,qBAvWM;AAAA;AAAA,qBAgXeM,aAAarB,eAAb,EAhXf;;AAAA;AAgXNuE,0BAhXM;AAmXNC,uBAnXM,GAmXM7F,iBAAE2E,IAAF,CAAOjC,aAAaxB,GAAb,CAAiB,EAAEC,OAAO,IAAT,EAAjB,CAAP,EAA0CjB,qBAAaC,OAAvD,CAnXN;;AAoXZ0F,wBAAUrE,aAAV,GAA0BoE,YAA1B;AACAC,wBAAUzE,KAAV,GAAkBA,MAAMF,GAAN,CAAU,EAAEC,OAAO,IAAT,EAAV,CAAlB;AACA0E,wBAAUzD,OAAV,GAAoBpC,iBAAEgB,GAAF,CAAMoB,OAAN,EAAe;AAAA,uBAAUC,OAAOnB,GAAP,CAAW,EAAEC,OAAO,IAAT,EAAX,CAAV;AAAA,eAAf,CAApB;;AAEA,kBAAI+E,qBAAJ,EAA2B;AACzBL,0BAAUzD,OAAV,GAAoBpC,iBAAEqG,MAAF,CAASR,UAAUzD,OAAnB,EAA4B;AAAA,yBAAUC,OAAOnD,KAAP,KAAiBgH,sBAAsBpD,UAAjD;AAAA,iBAA5B,CAApB;AACD;AA1XW,gDA2XL+C,SA3XK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA6Xd;;;;;AAKAS,OAlYc,iBAkYRC,GAlYQ,EAkYH;AACT,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,OAAL,GAAeD,IAAIC,OAAJ,CAAYC,IAAZ,CAAiBF,GAAjB,CAAf;;AAEA,SAAKF,MAAL,CAAY;AACVK,eAAS,iBAAC7B,IAAD,EAAO8B,UAAP,EAAsB;AAC7BpI,cAAM,kCAAN,EAA0CsG,IAA1C;AACA,YAAI,CAAC8B,WAAWjH,IAAhB,EAAsB,OAAO,KAAP;;AAEtB,YAAIiH,WAAWjH,IAAX,CAAgBR,KAAhB,KAA0B2F,KAAKzD,KAAL,CAAWlC,KAAzC,EAAgD,OAAO,KAAP;;AAEhD,YAAI,CAACyH,WAAWC,MAAZ,IAAsBD,WAAWC,MAAX,CAAkBC,IAAlB,KAA2B,QAAjD,IAA6DF,WAAWC,MAAX,CAAkBC,IAAlB,KAA2B,QAA5F,EAAsG;AACpG,iBAAO,KAAP;AACD;AACD,eAAOhC,IAAP;AACD,OAXS;AAYViC,eAAS;AAAA,eAAM,KAAN;AAAA,OAZC;AAaVC,eAAS,iBAAClC,IAAD,EAAO8B,UAAP,EAAsB;AAC7BpI,cAAM,kCAAN,EAA0CsG,IAA1C;AACA,YAAI,CAAC8B,WAAWjH,IAAhB,EAAsB,OAAO,KAAP;;AAEtB,YAAImF,KAAKzD,KAAL,CAAWlC,KAAX,KAAqByH,WAAWjH,IAAX,CAAgBR,KAArC,IACF2F,KAAKzC,OAAL,CAAaiE,MAAb,CAAoB;AAAA,iBAAUhE,OAAOnD,KAAP,KAAiByH,WAAWjH,IAAX,CAAgBR,KAA3C;AAAA,SAApB,EAAsEwE,MAAtE,KAAiF,CADnF,EACsF;AACpF,iBAAO,KAAP;AACD;;AAED,YAAI,CAACiD,WAAWC,MAAhB,EAAwB;AACtB,iBAAO,KAAP;AACD;AACD,eAAO5G,iBAAE2E,IAAF,CAAOE,IAAP,EAAa,CAAC,oBAAD,CAAb,CAAP;AACD;AA1BS,KAAZ;AA4BD;AAlaa,CAAhB;;kBAqaejG,O","file":"wistikis.js","sourcesContent":["import errors from 'feathers-errors';\nimport _ from 'lodash';\nimport validator from 'validator';\nimport moment from 'moment';\nimport AWS from 'aws-sdk';\n\nimport { Model, User, Wistiki, WistikiHasFriend, WistikiHasOwner } from '../../db';\nimport { ownershiplLogger } from '../../lib/logger';\nimport { sensibleData } from '../../config';\nimport Verhoeff from '../../lib/verhoeff';\nimport { ModelAcl } from '../../middlewares/aclMiddleware';\nimport WistikiService from '../wistikis/root';\nimport photoUploader from '../../lib/photoUploader';\n\n\nconst debug = require('debug')('darwin:services:wistikis');\n\n\nAWS.config.loadFromPath('./dist/config/aws_credentials.json');\n\nconst Service = {\n  /**\n   * Get user Wistikis. This is typically used to fetch all information about user's wistikis\n   * like the identity of the owner, the list of friends and wistiki's last position\n   *\n   * @param params\n   */\n  async find(params) {\n    const userModel = await User.cache().findById(params.email);\n    if (!userModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [{ message: `User ${params.email} not found` }] },\n      );\n    }\n\n\n    const isAuthorized = ModelAcl.isAllowed(params.user, userModel, 'get').then(() => true, () => false);\n\n    /* istanbul ignore else */\n    if (!isAuthorized) {\n      throw new errors.Forbidden('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to access this resource',\n        }],\n      });\n    }\n\n    const ownedWistikis = await userModel.getActiveOwnership({// retrieve user owned wistikis\n      attributes: {\n        exclude: _.union(sensibleData.wistiki, ['model_id']),\n      },\n      joinTableAttributes: [],\n      include: [\n        {\n          model: Model,\n        },\n        {\n          model: User,\n          as: 'owner',\n          attributes: {\n            exclude: sensibleData.user,\n          },\n        },\n        { // User is the owner, so he has access to friends list\n          model: User,\n          as: 'friends',\n          attributes: {\n            exclude: sensibleData.user,\n          },\n        },\n      ],\n    });\n\n    // retrieve wistiki list that is shared with user\n    const sharedWistiki = await userModel.getActiveSharedWistikis({\n      attributes: {\n        exclude: _.union(sensibleData.wistiki, ['model_id']),\n      },\n      joinTableAttributes: [],\n      include: [\n        {\n          model: Model,\n        },\n        {// Get Owner infos only as user is not the owner\n          model: User,\n          as: 'owner',\n          attributes: {\n            exclude: sensibleData.user,\n          },\n        },\n        { // User is not the owner, so get only its details\n          model: User,\n          as: 'friends',\n          where: { email: userModel.email },\n          attributes: {\n            exclude: sensibleData.user,\n          },\n        },\n      ],\n    });\n\n    const wistikis = _.flatten([ownedWistikis, sharedWistiki]);\n    return Promise.all(_.map(wistikis, async (wistiki) => {\n      const wistikiObject = wistiki.get({ plain: true });\n      [wistikiObject.owner] = wistikiObject.owner;\n      const position = await wistiki.getLastPosition();\n      if (position) {\n        debug('got position.coordinates: ', typeof position.position.coordinates, position.position.coordinates);\n        wistikiObject.last_position = position;\n      }\n      const serialNumber = `${wistikiObject.serial_number}`;\n      if (!Verhoeff.validate(serialNumber.substr(0, 11))) {\n        const cs = Verhoeff.generate(serialNumber.substr(0, 11));\n        const verifiedSerialNumber = `${serialNumber.substr(0, 11)}${cs}`;\n        wistikiObject.serial_number = verifiedSerialNumber;\n        wistikiObject.owner.wistiki_has_owner.wistiki_serial_number = verifiedSerialNumber;\n        _.each(wistikiObject.friends, (friend) => {\n          friend.wistiki_has_friend.wistiki_serial_number = verifiedSerialNumber;\n        });\n      }\n      debug(wistikiObject);\n      return wistikiObject;\n    }));\n  },\n\n  /**\n   *\n   * @param {integer} id\n   * @param {object} bodyData\n   * @param {object} params\n   * @param {function} callback\n   */\n  // TODO: see how we can reuse wistiki service\n  async create(bodyData, params) {\n    const userModel = await User.cache().findById(params.email);\n    if (!userModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [{ message: `User ${params.email} not found` }] },\n      );\n    }\n\n    const wistikiModel = await Wistiki.cache().findById(bodyData.serial_number);\n    if (!wistikiModel) {\n      ownershiplLogger.error(`Wistiki ${bodyData.serial_number} not provisionned`, {\n        event: 'NOT_PROVISIONED',\n        serial_number: bodyData.serial_number,\n        user_email: params.user.email,\n        request_data: bodyData, // store request data so we can retrieve authentication key later\n      });\n\n      throw new errors.NotFound(\n        'NOT_PROVISIONED',\n        { errors: [{ message: `Wistiki ${bodyData.serial_number} is not provisioned` }] },\n      );\n    }\n\n    if (!bodyData.msn_cipher) {\n      ownershiplLogger.error('MSN cipher not provided', {\n        event: 'MSN_CIPHER_REQUIRED',\n        serial_number: wistikiModel.serial_number,\n        user_email: params.user.email,\n      });\n\n      throw new errors.BadRequest(\n        'SCHEMA_VALIDATION_FAILED',\n        { errors: [{ message: 'MSN Cipher is required' }] },\n      );\n    }\n\n    if (!validator.isHexadecimal(bodyData.msn_cipher.replace(/[-:]/g, ''))\n      || !validator.isLength(bodyData.msn_cipher, 32, 48)\n    ) {\n      throw new errors.BadRequest(\n        'SCHEMA_VALIDATION_FAILED',\n        {\n          errors: [{ message: 'Invalid MSN Cipher format' }],\n        },\n      );\n    }\n\n    if (!bodyData.authentication_key) {\n      ownershiplLogger.error('Ownership request has empty authentication key', {\n        reason: 'EMPTY_AUTH_KEY',\n        serial_number: wistikiModel.serial_number,\n        user_email: params.user.email,\n      });\n      throw new errors.BadRequest('AUTHENTICATION_KEY_REQUIRED');\n    }\n\n    if (bodyData.wistiki_picture_base64 &&\n      (bodyData.wistiki_picture_base64.split(',').length === 1 || !validator.isBase64(bodyData.wistiki_picture_base64.split(',')[1]))\n    ) {\n      throw new errors.BadRequest('INVALID_AVATAR_FORMAT');\n    }\n\n    const isAuthorized = ModelAcl.isAllowed(params.user, WistikiHasOwner, 'create').then(() => true, () => false);\n\n    /* istanbul ignore else */\n    if (!isAuthorized) {\n      throw new errors.Forbidden('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to access this resource',\n        }],\n      });\n    }\n\n    if (!(wistikiModel.compareMsnCipher(bodyData.msn_cipher))) {\n      ownershiplLogger.error('MSN Cipher mismatch', {\n        event: 'compareMsnCipher',\n        user_email: params.user.email,\n        request_user_email: params.email,\n        request_data: bodyData,\n        wistiki: wistikiModel.get({ plain: true }),\n        msn_cipher: {\n          given: bodyData.msn_cipher,\n          calculated: wistikiModel.getMsnCipher(),\n        },\n      });\n      throw new errors.BadRequest('REQUEST_AUTHENTICATION_FAILED');\n    }\n\n    const [wistikiOwner] = await wistikiModel.getOwner();\n    if (wistikiOwner) {\n      throw new errors.Conflict(\n        'ALREADY_OWNED',\n        { errors: [{ message: `Wistiki ${bodyData.serial_number} has an owner` }] },\n      );\n    }\n\n    let infos = {\n      authentication_key: bodyData.authentication_key,\n      last_software_update: bodyData.last_software_update ?\n        bodyData.last_software_update : moment().utc(),\n      last_software_version: bodyData.last_software_version,\n      activation_date: moment().utc(),\n    };\n\n    if (_.isEmpty(infos.last_software_version)) {\n      infos = _.omit(infos, ['last_software_update', 'last_software_version']);\n    }\n\n    await wistikiModel.cache().update(infos);\n\n    const data = _.pick(bodyData, [\n      'wistiki_alias',\n      'is_lost',\n      'link_loss',\n      'inverted_link_loss',\n      'color',\n      'icon',\n    ]);\n\n    if (bodyData.wistiki_picture_base64) {\n      const avatarUrl = await photoUploader.upload(\n        'avatars.wistiki.2',\n        `wistiki_picture/${params.user.email}_${wistikiModel.serial_number}_${moment().unix()}`,\n        bodyData.wistiki_picture_base64,\n      ).catch(() => null);\n      if (avatarUrl) {\n        data.avatar_url = decodeURIComponent(avatarUrl);\n      }\n    }\n\n    data.link_loss = data.link_loss ? 1 : 0;\n    data.inverted_link_loss = data.inverted_link_loss ? 1 : 0;\n    data.ownership_start_date = moment().utc();\n    await wistikiModel.setOwner(params.email, { through: data });\n    const [owner] = await wistikiModel.getOwner({\n      attributes: {\n        exclude: sensibleData.user,\n      },\n      joinTableAttributes: {\n        exclude: ['user_email', 'wistiki_serial_number'],\n      },\n    });\n\n    const friends = await wistikiModel.getFriends({\n      attributes: {\n        exclude: sensibleData.user,\n      },\n      joinTableAttributes: {\n        exclude: ['user_email', 'wistiki_serial_number'],\n      },\n    });\n\n    const lastPosition = await wistikiModel.getLastPosition();\n\n    const resObject = wistikiModel.get({ plain: true });\n    resObject.last_position = lastPosition;\n    resObject.owner = owner;\n    resObject.friends = friends;\n\n    return _.omit(resObject, sensibleData.wistiki);\n  },\n\n  async update(id, bodyData, params) {\n    debug('update: ', id, bodyData);\n    const userModel = await User.cache().findById(params.email);\n    if (!userModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [{ message: `User ${params.email} not found` }] },\n      );\n    }\n\n    const wistikiModel = await Wistiki.cache().findById(params.verifiedSerialNumber);\n    const wistikiHasOwnerModel = await WistikiHasOwner.getUserPairing(params.email, params.verifiedSerialNumber);\n    const wistikiHasFriendModel = await WistikiHasFriend.getUserPairing(params.email, params.verifiedSerialNumber);\n\n    if (!wistikiHasOwnerModel && !wistikiHasFriendModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [{ message: `Wistiki ${id} has no association with user ${params.email}` }] },\n      );\n    }\n\n    let isAuthorized;\n    let wistikiHasUserModel;\n\n    if (wistikiHasOwnerModel) {\n      isAuthorized = ModelAcl.isAllowed(params.user, wistikiHasOwnerModel, 'update').then(() => true, () => false);\n      wistikiHasUserModel = wistikiHasOwnerModel;\n    } else if (wistikiHasFriendModel) {\n      isAuthorized = ModelAcl.isAllowed(params.user, wistikiHasFriendModel, 'update').then(() => true, () => false);\n      wistikiHasUserModel = wistikiHasFriendModel;\n    }\n    /* istanbul ignore else */\n    if (!isAuthorized) {\n      throw new errors.Forbidden('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to update this resource',\n        }],\n      });\n    }\n\n    if (bodyData.wistiki_picture_base64 &&\n      (bodyData.wistiki_picture_base64.split(',').length === 1 || !validator.isBase64(bodyData.wistiki_picture_base64.split(',')[1]))\n    ) {\n      throw new errors.BadRequest('INVALID_AVATAR_FORMAT');\n    }\n\n\n    const data = _.pick(bodyData, [\n      'wistiki_alias',\n      'is_lost',\n      'link_loss',\n      'inverted_link_loss',\n      'color',\n      'icon',\n    ]);\n\n    if (bodyData.wistiki_picture_base64) {\n      const avatarUrl = await photoUploader.upload(\n        'avatars.wistiki.2',\n        `wistiki_picture/${params.user.email}_${wistikiModel.serial_number}_${moment().unix()}`,\n        bodyData.wistiki_picture_base64,\n      ).catch(() => null);\n      if (avatarUrl) {\n        data.wistiki_picture = decodeURIComponent(avatarUrl);\n      }\n    }\n\n    data.link_loss = data.link_loss ? 1 : 0;\n    data.inverted_link_loss = data.inverted_link_loss ? 1 : 0;\n    await wistikiHasUserModel.cache().update(data);\n\n    debug(wistikiHasUserModel.get({ plain: true }));\n\n    const [owner] = await wistikiModel.getOwner({\n      attributes: {\n        exclude: sensibleData.user,\n      },\n      joinTableAttributes: {\n        exclude: ['user_email', 'wistiki_serial_number'],\n      },\n    });\n\n    const friends = await wistikiModel.getFriends({\n      attributes: {\n        exclude: sensibleData.user,\n      },\n      joinTableAttributes: {\n        exclude: ['user_email', 'wistiki_serial_number'],\n      },\n    });\n\n    const lastPosition = await wistikiModel.getLastPosition();\n\n\n    const resObject = _.omit(wistikiModel.get({ plain: true }), sensibleData.wistiki);\n    resObject.last_position = lastPosition;\n    resObject.owner = owner.get({ plain: true });\n    resObject.friends = _.map(friends, friend => friend.get({ plain: true }));\n\n    if (wistikiHasFriendModel) {\n      resObject.friends = _.filter(resObject.friends, friend => friend.email === wistikiHasFriendModel.user_email);\n    }\n    return resObject;\n  },\n  /**\n   * TODO: Description\n   * @param app\n   * @param path\n   */\n  setup(app) {\n    this.app = app;\n    this.service = app.service.bind(app);\n\n    this.filter({\n      created: (data, connection) => {\n        debug('created users/:user/wistikis/:sn', data);\n        if (!connection.user) return false;\n\n        if (connection.user.email !== data.owner.email) return false;\n\n        if (!connection.device || connection.device.type === 'mobile' || connection.device.type === 'tablet') {\n          return false;\n        }\n        return data;\n      },\n      removed: () => false,\n      updated: (data, connection) => {\n        debug('updated users/:user/wistikis/:sn', data);\n        if (!connection.user) return false;\n\n        if (data.owner.email !== connection.user.email &&\n          data.friends.filter(friend => friend.email === connection.user.email).length === 0) {\n          return false;\n        }\n\n        if (!connection.device) {\n          return false;\n        }\n        return _.omit(data, ['authentication_key']);\n      },\n    });\n  },\n};\n\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}