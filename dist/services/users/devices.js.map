{"version":3,"sources":["services/users/devices.js"],"names":["debug","require","Service","find","params","User","cache","findById","email","userModel","errors","NotFound","message","getOwnedDevices","attributes","exclude","sensibleData","device","joinTableAttributes","device_has_user","userDevices","filtredDevices","filter","Date","isBefore","expiration_date","all","_","map","getLastPosition","lastDevicePosition","deviceObject","cloneDeep","get","plain","last_position","id","Device","DeviceHasUser","getDevicePairing","uid","devicePairing","ModelAcl","isAllowed","user","then","isAuthorized","Forbidden","omit","create","body","deviceModel","Conflict","data","pick","device_uid","user_email","update","token","deviceData","name","manufacturer","os","type","version","model","createOrUpdate","headers","remove","destroy","setup","app","service","bind","created","removed","updated","before","hook","next","useragent","ua","vendor"],"mappings":"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","file":"devices.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport errors from 'feathers-errors';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport { sensibleData } from '../../config';\nimport { Device, DeviceHasUser, User } from '../../db';\n\nimport { ModelAcl } from '../../middlewares/aclMiddleware';\n\n\n// eslint-disable-next-line no-unused-vars\nconst debug = require('debug')('darwin:services:devices');\n\nconst Service = {\n  /**\n   * Lists all user's devices with their last position.\n   *\n   * @param params\n   */\n  async find(params) {\n    const userModel = await User.cache().findById(params.email);\n    /* istanbul ignore else */\n    if (!userModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        {\n          errors: [{ message: `User ${params.email} not found` }],\n        },\n      );\n    }\n    const userDevices = await userModel.getOwnedDevices({\n      attributes: { exclude: sensibleData.device },\n      joinTableAttributes: { exclude: sensibleData.device_has_user },\n    });\n    const filtredDevices = userDevices.filter(device => moment(new Date())\n      .isBefore(new Date(device.device_has_user.expiration_date)));\n\n    return Promise.all(_.map(filtredDevices, async (device) => {\n      const lastDevicePosition = await device.getLastPosition();\n      const deviceObject = _.cloneDeep(device.get({ plain: true }));\n      deviceObject.last_position = lastDevicePosition;\n      return deviceObject;\n    }));\n  },\n  /**\n   * Get device by id. Throws an error if none can be found\n   *\n   * @param id requested device id\n   * @param params\n   */\n  async get(id, params) {\n    const userModel = await User.cache().findById(params.email);\n    /* istanbul ignore else */\n    if (!userModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        {\n          errors: [{ message: `User ${params.email} not found` }],\n        },\n      );\n    }\n    const device = await Device.cache().findById(id);\n    const devicePairing = await DeviceHasUser.getDevicePairing(params.email, device.uid);\n    /* istanbul ignore else */\n    if (!device) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        {\n          errors: [{ message: `Device ${id} not found` }],\n        },\n      );\n    }\n    /* istanbul ignore else */\n    if (!devicePairing) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        {\n          errors: [{ message: `Device ${id} not associated with user ${params.email}` }],\n        },\n      );\n    }\n    const isAuthorized = await ModelAcl.isAllowed(params.user, device, 'get')\n      .then(() => true, () => false);\n    /* istanbul ignore else */\n    if (!isAuthorized) {\n      throw new errors.Forbidden('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to access this resource',\n        }],\n      });\n    }\n    const lastDevicePosition = await device.getLastPosition();\n\n    const deviceObject = _.cloneDeep(device.get({ plain: true }));\n    deviceObject.device_has_user = _.omit(\n      devicePairing.get({ plain: true }),\n      sensibleData.device_has_user,\n    );\n    deviceObject.last_position = lastDevicePosition;\n\n    return _.omit(deviceObject, sensibleData.device);\n  },\n  /**\n   * Create a new Device and associate it with current user\n   *\n   * @param body\n   * @param params\n   */\n  async create(body, params) {\n    const userModel = await User.cache().findById(params.email);\n    /* istanbul ignore else */\n    if (!userModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        {\n          errors: [{ message: `User ${params.email} not found` }],\n        },\n      );\n    }\n    let deviceModel = await Device.cache().findById(body.uid);\n    /* istanbul ignore else */\n    if (deviceModel) {\n      throw new errors.Conflict(\n        'DEVICE_ALREADY_EXIST',\n        { errors: [{ message: `Device ${body.uid} already exist` }] },\n      );\n    }\n    const data = _.pick(body, [\n      'uid',\n      'name',\n      'manufacturer',\n      'model',\n      'os',\n      'version',\n      'type',\n      'app_version',\n    ]);\n\n    deviceModel = await Device.cache().create(data);\n    DeviceHasUser.cache().create({ device_uid: deviceModel.uid, user_email: params.user.email });\n    return _.omit(deviceModel.get({ plain: true }), sensibleData.device);\n  },\n  /**\n   * Update device data\n   * @param id device uid\n   * @param data containing data to update\n   * @param params containing user email\n   */\n  async update(id, data, params) {\n    const userModel = await User.cache().findById(params.email);\n    /* istanbul ignore else */\n    if (!userModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        {\n          errors: [{ message: `User ${params.email} not found` }],\n        },\n      );\n    }\n\n    let deviceModel = await Device.cache().findById(id);\n    if (!deviceModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [{ message: `Device ${id} not found` }] },\n      );\n    }\n    const devicePairing = await DeviceHasUser.getDevicePairing(params.email, id);\n    /* istanbul ignore else */\n    if (!devicePairing) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        {\n          errors: [{ message: `User ${params.email} has no association with device ${id}` }],\n        },\n      );\n    }\n\n    const isAuthorized = await ModelAcl.isAllowed(params.user, deviceModel, 'update')\n      .then(() => true, () => false);\n    if (!isAuthorized) {\n      throw new errors.Forbidden('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to update this resource',\n        }],\n      });\n    }\n\n    const { token } = data;\n    const deviceData = {\n      uid: id,\n      name: data.name || /* istanbul ignore next: tired of writing tests */ null,\n      manufacturer: data.manufacturer\n      || /* istanbul ignore next: tired of writing tests */null,\n      os: data.os || /* istanbul ignore next: tired of writing tests */null,\n      type: data.type || /* istanbul ignore next: tired of writing tests */null,\n      version: data.version || /* istanbul ignore next: tired of writing tests */null,\n      model: data.model || /* istanbul ignore next: tired of writing tests */null,\n    };\n\n    deviceModel = await Device.createOrUpdate(\n      deviceData,\n      token,\n      params.headers['x-wistiki-environment'],\n    );\n    deviceModel = await Device.cache().findById(id);\n    return _.omit(deviceModel.get({ plain: true }), sensibleData.device);\n  },\n  /**\n   * Delete user-device association\n   * @param id\n   * @param params\n   */\n  async remove(id, params) {\n    const userModel = await User.cache().findById(params.email);\n    /* istanbul ignore else */\n    if (!userModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        {\n          errors: [{ message: `User ${params.email} not found` }],\n        },\n      );\n    }\n    const devicePairing = await DeviceHasUser.getDevicePairing(params.email, id);\n    const deviceModel = await Device.cache().findById(id);\n    /* istanbul ignore else */\n    if (!devicePairing) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        {\n          errors: [{ message: `User ${params.email} has no association with device ${id}` }],\n        },\n      );\n    }\n\n    /* istanbul ignore else */\n    if (!deviceModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        {\n          errors: [{ message: `Device ${id} not found` }],\n        },\n      );\n    }\n    const isAuthorized = await ModelAcl.isAllowed(params.user, deviceModel, 'delete')\n      .then(() => true, () => false);\n    if (!isAuthorized) {\n      throw new errors.Forbidden('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to update this resource',\n        }],\n      });\n    }\n\n    // Delete user-desvice association.\n    await devicePairing.cache().destroy();\n    return null;\n  },\n  /**\n   * TODO: Description\n   * @param app\n   */\n  setup(app) {\n    this.app = app;\n    // Bind the apps service method to service to always look services up dynamically\n    this.service = app.service.bind(app);\n\n    // TODO: filter socket event to send data to user's devices only\n    this.filter({\n      created: () => false,\n      removed: () => false,\n      updated: () => false,\n    });\n  },\n  before: {\n    update(hook, next) {\n      if (hook.params.headers) {\n        hook.data.device = {};\n        if (hook.params.useragent) {\n          const ua = hook.params.useragent;\n          hook.data.device.type = ua.device.type;\n          hook.data.device.os = ua.os.name;\n          hook.data.device.version = ua.os.version;\n          hook.data.device.manufacturer = ua.device.vendor;\n          hook.data.device.model = ua.device.model;\n        }\n      }\n      next();\n    },\n  },\n};\n\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}