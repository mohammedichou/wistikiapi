{"version":3,"sources":["services/users/messages.js"],"names":["Service","find","params","User","cache","findById","email","userModel","errors","NotFound","message","isAuthorized","ModelAcl","isAllowed","user","then","Forbidden","getThreads","threads","all","_","map","thread","getMessages","joinTableAttributes","attributes","exclude","include","as","model","sensibleData","Thread","Message","MessageHasStatus","messages","flattenDeep","setup","app","service","bind","filter"],"mappings":"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","file":"messages.js","sourcesContent":["import _ from 'lodash';\nimport errors from 'feathers-errors';\nimport { Message, MessageHasStatus, Thread, User } from '../../db';\nimport { sensibleData } from '../../config';\nimport { ModelAcl } from '../../middlewares/aclMiddleware';\n\n\nconst Service = {\n  /**\n   * Get user Messages.\n   *\n   * @param params\n   */\n  async find(params) {\n    const userModel = await User.cache().findById(params.email);\n    if (!userModel) {\n      throw new errors.NotFound(\n        'RESOURCE_NOT_FOUND',\n        { errors: [{ message: `User ${params.email} not found` }] },\n      );\n    }\n    const isAuthorized = ModelAcl.isAllowed(params.user, userModel, 'find_messages').then(() => true, () => false);\n\n    /* istanbul ignore else */\n    if (!isAuthorized) {\n      throw new errors.Forbidden('MODEL_ACL_ERROR', {\n        errors: [{\n          message: 'You are not allowed to access this resource',\n        }],\n      });\n    }\n\n    const threads = await userModel.getThreads();\n\n    const messages = await Promise.all(_.map(threads, async thread => thread.getMessages({\n\n      joinTableAttributes: [],\n      attributes: {\n        exclude: ['user_email'],\n      },\n      include: [\n        {\n          as: 'author',\n          model: User,\n          attributes: {\n            exclude: sensibleData.user,\n          },\n        },\n        {\n          as: 'thread',\n          model: Thread,\n          attributes: {\n            exclude: ['user_email'],\n          },\n          include: [\n            {\n              model: User,\n              as: 'creator',\n              attributes: {\n                exclude: sensibleData.user,\n              },\n            },\n            {\n              model: User,\n              as: 'participants',\n              attributes: {\n                exclude: sensibleData.user,\n              },\n            },\n            {\n              model: Message,\n              as: 'last_message',\n              attributes: {\n                exclude: ['user_email', 'thread_id'],\n              },\n              include: [\n                {\n                  as: 'author',\n                  model: User,\n                  attributes: {\n                    exclude: sensibleData.user,\n                  },\n                },\n                {\n                  as: 'states',\n                  model: MessageHasStatus,\n                  attributes: {\n                    exclude: ['message_id', 'user_email'],\n                  },\n                  include: [\n                    {\n                      model: User,\n                      attributes: {\n                        exclude: sensibleData.user,\n                      },\n                    },\n                  ],\n\n                },\n              ],\n\n            },\n          ],\n        },\n        {\n          as: 'states',\n          model: MessageHasStatus,\n          attributes: {\n            exclude: ['message_id', 'user_email'],\n          },\n          include: [\n            {\n              model: User,\n              attributes: {\n                exclude: sensibleData.user,\n              },\n            },\n          ],\n\n        },\n      ],\n    })));\n\n    return _.flattenDeep(messages);\n  },\n  /**\n   * TODO: Description\n   * @param app\n   */\n  setup(app) {\n    this.app = app;\n    // Bind the apps service method to service to always look services up dynamically\n    this.service = app.service.bind(app);\n    this.filter(() => false);\n  },\n};\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}