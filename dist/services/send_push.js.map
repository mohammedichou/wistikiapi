{"version":3,"sources":["services/send_push.js"],"names":["JwtStrategy","require","Strategy","Service","create","data","params","User","cache","findById","email","userModel","errors","NotFound","message","uid","Device","device","sns_arn","notificationData","id","default","GCM","collapse_key","APNS","aps","get","resolve","ring","sn","Wistiki","wistikiModel","getLastPosition","lastPosition","console","log","serial_number","setup","app","path","service","bind","filter","connection"],"mappings":"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","file":"send_push.js","sourcesContent":["var JwtStrategy = require('passport-jwt').Strategy;\nimport { User, Device, Wistiki } from '../db/index.js';\nimport { notifyEndpoint } from '../lib/sns';\n\nvar Service = {\n    async create(data, params) {\n        const userModel = await User.cache().findById(params.email);\n        if (!userModel) {\n            throw new errors.NotFound('RESOURSE_NOT_FOUND', {\n                errors :  [{message: 'User not found'}]\n            });\n        }\n        if (data.uid) {\n            const device = await Device.cache().findById(data.uid);\n            var ret;\n            if (device.uid && device.sns_arn != null) {\n                const notificationData = {id: 'RING'};\n                const message = {\n                    default: notificationData,\n                    GCM: {\n                        data : notificationData,\n                        collapse_key: \"collapseKey\",\n                    },\n                    APNS: {\n                        data : notificationData,\n                        aps: {\n                            'content-available': 1,\n                        },\n                    },\n                };\n                notifyEndpoint(device.get('sns_arn'), message, data.uid);\n                return Promise.resolve({ring: \"device\"});\n            } else {\n                throw new errors.NotFound('RESOURSE_NOT_FOUND', {\n                    errors :  [{message: 'User or SNSARN not found'}]\n                });\n            }\n        } else if (data.sn) {\n            const wistikiModel = await Wistiki.cache().findById(data.sn);\n            if (wistikiModel) {\n                const lastPosition = await wistikiModel.getLastPosition();\n                if (lastPosition && lastPosition.uid) {\n                        console.log(lastPosition);\n                    const notificationData = {id: 'RING_WISTIKI', serial_number: data.sn};\n                    const message = {\n                        default: notificationData,\n                        GCM: {\n                            data : notificationData,\n                            collapse_key: \"collapseKey\",\n                        },\n                        APNS: {\n                            data : notificationData,\n                            aps: {\n                                'content-available': 1,\n                            },\n                        },\n                    };\n                    const device = await Device.cache().findById(lastPosition.uid);\n                    notifyEndpoint(device.get('sns_arn'), message, lastPosition.uid);\n                    return Promise.resolve({ring: \"wistiki\"});\n                } else {\n                    throw new errors.NotFound('RESOURSE_NOT_FOUND', {\n                        errors :  [{message: 'Device not found'}]\n                    });\n                }\n            } else {\n                throw new errors.NotFound('RESOURSE_NOT_FOUND', {\n                    errors :  [{message: 'Wistiki  not found'}]\n                });\n            }\n        }\n        throw new errors.NotFound('RESOURSE_NOT_FOUND', {\n            errors :  [{message: 'UID or SN not found'}]\n            });\n    },\n\n    setup(app, path){\n        this.app = app;\n        this.service = app.service.bind(app);\n        this.filter(function (data, connection) {\n            return false;\n        });\n    }\n};\n\nexport default Service;"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}