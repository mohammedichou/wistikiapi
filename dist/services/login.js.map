{"version":3,"sources":["services/login.js"],"names":["debug","require","Service","create","data","params","device","token","uid","deviceData","name","manufacturer","os","type","version","model","User","checkAccount","email","user","verifyPassword","password","errors","BadRequest","all","Device","createOrUpdate","headers","DeviceHasUser","deleteDevicePairing","cache","device_uid","user_email","expiration_date","add","utc","creation_date","deviceHasUser","emit","origin","get","_","omit","sensibleData","auth_token","refresh_token","update","id","deviceUid","refreshToken","findById","getDevicePairing","console","log","reject","NotFound","updatedDeviceHasUser","plain","remove","destroy","setup","app","service","bind","filter","connection","rooms","indexOf","created","removed","updated","before","hook","next","useragent","ua","vendor","events"],"mappings":"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","file":"login.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport _ from 'lodash';\nimport errors from 'feathers-errors';\nimport moment from 'moment';\n\nimport { sensibleData } from '../config';\nimport { Device, DeviceHasUser, User } from '../db';\n\nconst debug = require('debug')('darwin:login');\nconst Service = {\n\n  /**\n   * Create a new session. Expected data to be email and password\n   * @param data\n   * @param params\n   */\n  async create(data, params) {\n    debug(`login ${JSON.stringify(data)}`);\n\n    const { token, uid } = data.device;\n    const deviceData = {\n      uid: data.device.uid,\n      name: data.device.name || /* istanbul ignore next: tired of writing tests */ null,\n      manufacturer: data.device.manufacturer\n      || /* istanbul ignore next: tired of writing tests */null,\n      os: data.device.os || /* istanbul ignore next: tired of writing tests */null,\n      type: data.device.type || /* istanbul ignore next: tired of writing tests */null,\n      version: data.device.version || /* istanbul ignore next: tired of writing tests */null,\n      model: data.device.model || /* istanbul ignore next: tired of writing tests */null,\n    };\n\n    // Check if User account exists or not. if not, throws BadRequest('BAD_CREDENTIALS_ERROR')\n    // Check if User account is confirmed. if not, throws BadRequest('ACCOUNT_NOT_CONFIRMED_ERROR')\n    const user = await User.checkAccount(data.email);\n    // Check if given password matches user's password.\n    if (!user.verifyPassword(data.password)) {\n      throw new errors.BadRequest('BAD_CREDENTIALS_ERROR');\n    }\n    // Create a new device or update if it already exists in database\n    // Delete existing associations with other users\n\n    await Promise.all([\n      Device.createOrUpdate(deviceData, token, params.headers['x-wistiki-environment']),\n      DeviceHasUser.deleteDevicePairing(uid),\n    ]);\n\n    const deviceHasUser = await DeviceHasUser.cache().create({\n      device_uid: uid,\n      user_email: user.email,\n      expiration_date: moment().add(30, 'days').utc(),\n      creation_date: moment().utc(),\n    });\n    this.emit('login', { origin: deviceHasUser.get('device_uid') });\n\n    return {\n      user: _.omit(user.get(), sensibleData.user),\n      auth_token: deviceHasUser.token,\n      refresh_token: deviceHasUser.refresh_token,\n    };\n  },\n  /**\n   * Update User session. Basically, it uses refresh_token to generate new auth_token\n   * @param id user email\n   * @param data\n   * @param params with headers 'x-wistiki-device-uid' & 'x-wistiki-refresh-token'\n   */\n  async update(id, data, params) {\n    const deviceUid = params.headers['x-wistiki-device-uid'];\n    const refreshToken = params.headers['x-wistiki-refresh-token'];\n    const [user, device, deviceHasUser] = await Promise.all([\n      User.checkAccount(id),\n      Device.cache().findById(deviceUid),\n      DeviceHasUser.getDevicePairing(id, deviceUid),\n    ]);\n\n    if (!device) {\n      console.log(`Device ${deviceUid} was not found`);\n      return Promise.reject(new errors.NotFound('RESOURCE_NOT_FOUND', { errors: [`Device ${deviceUid} was not found`] }));\n    }\n\n    if (!deviceHasUser) {\n      return Promise.reject(new errors.NotFound('DEVICE_NOT_ASSOCIATED', { errors: [`Device ${deviceUid} is not associated with user ${id}`] }));\n    }\n\n    if (deviceHasUser.refresh_token !== refreshToken) {\n      return Promise.reject(new errors.NotFound('DEVICE_NOT_ASSOCIATED', { errors: [`Device ${deviceUid} with refresh token ${refreshToken} not found`] }));\n    }\n\n    const updatedDeviceHasUser = await deviceHasUser.cache().update({\n      expiration_date: moment().add(30, 'days').utc(),\n    });\n\n    return {\n      user: _.omit(user.get({ plain: true }), sensibleData.user),\n      auth_token: updatedDeviceHasUser.token,\n      refresh_token: updatedDeviceHasUser.refresh_token,\n    };\n  },\n  /**\n   * Delete user - device session.\n   * @param id user email\n   * @param params object containing device uid\n   */\n  async remove(id, params) {\n    debug(`logout ${id}`);\n    const deviceHasUser = await DeviceHasUser.getDevicePairing(id, params.uid);\n    if (!deviceHasUser) {\n      return Promise.reject(new errors.NotFound('RESOURCE_NOT_FOUND', { errors: ['Session not found'] }));\n    }\n\n    this.emit('logout', { origin: deviceHasUser.get('device_uid') });\n    await deviceHasUser.cache().destroy();\n    return null;\n  },\n\n  /**\n   * TODO: Create Unit Test\n   * @param app\n   */\n  setup(app) {\n    /* istanbul ignore next */\n    this.app = app;\n    // Bind the apps service method to service to always look services up dynamically\n    /* istanbul ignore next */\n    this.service = app.service.bind(app);\n    /* istanbul ignore next */\n    this.filter('login', (data, connection) => {\n      debug('socket login event', connection.rooms.indexOf(`c:u:${connection.user.get('email')}`) === -1);\n      if (connection.rooms.indexOf(`c:u:${connection.user.get('email')}`) === -1) return false;\n\n      if (!connection.device || connection.device.get('type') === 'mobile' || connection.device.get('type') === 'tablet') {\n        return false;\n      }\n      return data;\n    });\n    /* istanbul ignore next */\n    this.filter('logout', (data, connection) => {\n      debug('socket logout event', connection.rooms.indexOf(`c:u:${connection.user.get('email')}`) === -1);\n      if (connection.rooms.indexOf(`c:u:${connection.user.get('email')}`) === -1) return false;\n\n      if (!connection.device || connection.device.get('type') === 'mobile' || connection.device.get('type') === 'tablet') {\n        return false;\n      }\n      return data;\n    });\n    /* istanbul ignore next */\n    this.filter({\n      created: () => false,\n      removed: () => false,\n      updated: () => false,\n    });\n  },\n  before: {\n    create(hook, next) {\n      /* istanbul ignore else */\n      if (hook.params.headers) {\n        hook.data.device = {};\n        hook.data.device.uid = hook.params.headers['x-wistiki-device-uid'];\n        hook.data.device.name = hook.params.headers['x-wistiki-device-name'];\n        hook.data.device.token = hook.params.headers['x-wistiki-device-token'];\n        /* istanbul ignore else */\n        if (hook.params.useragent) {\n          const ua = hook.params.useragent;\n          hook.data.ua = ua;\n          hook.data.device.type = ua.device.type;\n          hook.data.device.os = ua.os.name;\n          hook.data.device.version = ua.os.version;\n          hook.data.device.manufacturer = ua.device.vendor;\n          hook.data.device.model = ua.device.model;\n        }\n      }\n      next();\n    },\n  },\n};\nService.events = ['login', 'logout'];\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}