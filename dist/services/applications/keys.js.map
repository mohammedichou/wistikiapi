{"version":3,"sources":["services/applications/keys.js"],"names":["Service","find","params","checkPermissions","user","app_id","headers","then","application","getAppKeys","create","data","masterKey","AppKey","generateToken","setup","app","service","bind","filter","sanitizedData","_","pick","application_id","get","id","jwt","sign","sub","role","config","secretOrPrivateKey","merge","options","expiresIn","lifetime","expireAt","add","appId","privilege","Application","findById","reject","errors","NotFound","ModelAcl","isAllowed","Forbidden"],"mappings":"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","file":"keys.js","sourcesContent":["/* eslint-disable no-tabs */\nimport moment from 'moment';\nimport _ from 'lodash';\nimport jwt from 'jsonwebtoken';\nimport errors from 'feathers-errors';\nimport { AppKey, Application } from '../../db';\nimport { ModelAcl } from '../../middlewares/aclMiddleware';\nimport config from '../../config';\n\n\nconst Service = {\n  /**\n   *\n   * @param params\n   */\n  find(params) {\n    return this.checkPermissions(params.user, params.app_id, 'list_keys', params.headers['x-wistiki-masterkey'])\n      .then(application => application.getAppKeys());\n  },\n  /**\n   * Create a new key for application identified by and id\n   *\n   * @param data\n   * @param params\n   * @example\n   *\n   * {\n\t * \tmaster_key: '12345678-1234-1234-1234-123456789012',\n\t * \tdescription: 'temporary app key',\n\t * \tlifetime: 2592000\n\t * }\n   */\n  create(data, params) {\n    return this.checkPermissions(params.user, params.app_id, 'create_key', data.masterKey)\n      .then(application => AppKey.create(this.generateToken(application, data)));\n  },\n  /**\n   * TODO: Description\n   * @param app\n   * @param path\n   */\n  setup(app) {\n    this.app = app;\n    // Bind the apps service method to service to always look services up dynamically\n    this.service = app.service.bind(app);\n    this.filter(() => false);\n  },\n\n  /**\n   * Takes application instance and data sent, pick only description field and\n   * create a new AppKey associated to application with a generated token that expires\n   * after data.lifetime (in seconds)\n   *\n   * @param application Model instance\n   * @param data request data\n   * @returns {Object} data object to be passed to AppKey.create method\n   */\n  generateToken(application, data) {\n    const sanitizedData = _.pick(data, ['description']);\n    sanitizedData.application_id = application.get('id');\n    sanitizedData.id = jwt.sign(\n      { sub: application.get('id'), role: 'application' },\n      config.jwt.secretOrPrivateKey,\n      _.merge(config.jwt.options, { expiresIn: data.lifetime }),\n    );\n    sanitizedData.expireAt = moment().add(data.lifetime, 'seconds');\n    return sanitizedData;\n  },\n\n  /**\n   * Check permissions of user for a specific app_id to do a certain action (privilege)\n   * with found application\n   *\n   * @param user {User} user model\n   * @param appId {string} Application id\n   * @param privilege {string} asked privilege\n   * @param masterKey {string} Application master key\n   * @returns {Promise<Application>}\n   */\n  checkPermissions(user, appId, privilege, masterKey) {\n    return Application.findById(appId)\n    // Check if application exists and provided master key is correct\n      .then((application) => {\n        if (!application) {\n          return Promise.reject(new errors.NotFound('RESOURCE_NOT_FOUND'));\n        }\n        return application;\n      })\n      .then(application =>\n        ModelAcl.isAllowed(user, application, privilege).then(\n          () => {\n            if (application && application.get('master_key') !== masterKey) {\n              return Promise.reject(new errors.Forbidden('MASTER_KEY_MISMATCH'));\n            }\n            return application;\n          },\n          () => Promise.reject(new errors.Forbidden('MODEL_ACL_ERROR')),\n        ));\n  },\n};\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}