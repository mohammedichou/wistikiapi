{"version":3,"sources":["services/positions/root.js"],"names":["AWS","config","loadFromPath","update","region","debug","require","getOriginalSerialNumber","sn","serialNumber","baseSerialNumber","substr","cs","Verhoeff","generate","Service","create","data","params","positionData","geolocation","wistikis","chipolos","all","_","map","wistiki","Wistiki","cache","findById","verifiedSerialNumber","wistikiModel","serial_number","compareMsnCipher","msn_cipher","wistikiModels","filter","model","length","req","tokens","location","lat","latitude","lng","longitude","h_acc","accuracy","timestamp","date","unix","chipolo","endpoint","method","headers","key","json","body","then","response","chipoloLogger","info","responseBody","device_uid","device","uid","error","errorBody","Position","position","type","coordinates","utc","toISOString","formatted_address","street_number","street_name","city","country","country_code","zip_code","positionModel","each","addPosition","Cache","setLastWistikiPosition","get","plain","getOwner","getFriends","wistikiOwner","wistikiFriends","notificationData","id","parseInt","source_uid","notifyDevices","wistiki_has_owner","is_lost","user","email","WistikiHasOwner","getUserPairing","wistikiOwnerPairing","languages","acceptLanguage","parse","locale","EmailService","sendPositionUpdateEmail","wistiki_alias","language","wistikiFriend","wistiki_has_friend","WistikiHasFriend","wistikiFriendPairing","setLastDevicePosition","emit","to","application","application_id","origin","setup","app","service","bind","connection","rooms","indexOf","origin_device_uid","test","created","events"],"mappings":"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","file":"root.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport AWS from 'aws-sdk';\nimport got from 'got';\n\nimport { Position, Wistiki, WistikiHasFriend, WistikiHasOwner } from '../../db';\nimport EmailService from '../../lib/email';\nimport Cache from '../../lib/cache';\nimport { chipoloLogger } from '../../lib/logger';\nimport { acceptLanguage } from '../../lib/i18n';\nimport config from '../../config';\nimport Verhoeff from '../../lib/verhoeff';\n\n\nAWS.config.loadFromPath('./dist/config/aws_credentials.json');\nAWS.config.update({ region: 'eu-central-1' });\n\nconst debug = require('debug')('darwin:positions');\n\n\nconst getOriginalSerialNumber = (sn) => {\n  const serialNumber = `${sn}`;\n  const baseSerialNumber = serialNumber.substr(0, 11);\n  const cs = Verhoeff.generate(baseSerialNumber);\n  return `${baseSerialNumber}${cs}`;\n};\n\nconst Service = {\n  /**\n   *\n   * @param data - passed data from request\n   * @param params - params send with the request\n   * @returns {Promise} - Rejected when user email already exists,\n   * resolved when user is added to database successfully\n   */\n  async create(data, params) {\n    debug(data);\n    const positionData = data.geolocation;\n    const { wistikis, chipolos } = data;\n\n    let wistikiModels = await Promise.all(_.map(wistikis, async (wistiki) => {\n      const wistikiModel = await Wistiki.cache().findById(wistiki.verifiedSerialNumber);\n      if (!wistikiModel) {\n        debug('Wistiki not found, serial number = %s', wistiki.serial_number);\n        return null;\n      }\n      if (wistikiModel.compareMsnCipher(wistiki.msn_cipher)) {\n        return wistikiModel;\n      }\n      debug('MSN Cipher Mismatch for wistiki %s', wistikiModel.serial_number);\n\n      return null;\n    }));\n\n    wistikiModels = _.filter(wistikiModels, model => model !== null);\n    debug('found %d wistikis to update position', wistikiModels.length);\n    if (!wistikiModels.length && !chipolos) {\n      return null;\n    }\n    if (!wistikiModels.length && !chipolos.length) {\n      return null;\n    }\n\n    if (chipolos && chipolos.length) {\n      debug('Got Chipolo request: ', chipolos);\n      const req = [\n        {\n          tokens: chipolos,\n          location: {\n            lat: positionData.latitude,\n            lng: positionData.longitude,\n            h_acc: Math.trunc(positionData.accuracy),\n            timestamp: moment(positionData.date).unix(),\n          },\n          timestamp: moment(positionData.date).unix(),\n        },\n      ];\n      got(config.chipolo.endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CPL-Authorization': config.chipolo.key,\n        },\n        json: true,\n        body: req,\n      }).then(\n        (response) => {\n          debug('Chipolo request success', response.body);\n          chipoloLogger.info('outbound', {\n            endpoint: config.chipolo.endpoint,\n            chipolos: req,\n            data: data.geolocation,\n            responseBody: response.body,\n            device_uid: params.device ? params.device.uid : null,\n          });\n        },\n        (error) => {\n          debug('Chipolo Request Error: ', error.response.body);\n          chipoloLogger.error('outbound', {\n            endpoint: config.chipolo.endpoint,\n            chipolos: req,\n            errorBody: error.response.body,\n            device_uid: params.device ? params.device.uid : null,\n          });\n        },\n      );\n    }\n\n    const positionModel = await Position.create({\n      position: { type: 'Point', coordinates: [positionData.latitude, positionData.longitude] },\n      accuracy: Math.trunc(positionData.accuracy),\n      date: moment(positionData.date).utc().toISOString(),\n      formatted_address: positionData.formatted_address !== '' ? positionData.formatted_address : `${positionData.street_number} ${positionData.street_name} ${positionData.city}`,\n      street_number: positionData.street_number,\n      street_name: positionData.street_name,\n      city: positionData.city,\n      country: positionData.country,\n      country_code: positionData.country_code,\n      uid : params.uid,\n      zip_code: positionData.zip_code,\n    });\n\n    _.each(wistikiModels, async (wistikiModel) => {\n      wistikiModel.addPosition(positionModel);\n      Cache.setLastWistikiPosition(wistikiModel.serial_number, positionModel.get({ plain: true }));\n      const [[wistikiOwner], wistikiFriends] = await Promise.all([\n        wistikiModel.getOwner(),\n        wistikiModel.getFriends(),\n      ]);\n\n      const notificationData = {\n        id: 'POS',\n        position: positionModel.get({ plain: true }),\n        serial_number: parseInt(getOriginalSerialNumber(wistikiModel.serial_number), 10),\n        source_uid: params.device ? params.device.get('uid') : '',\n        timestamp: moment().utc().toISOString(),\n      };\n\n      if (wistikiOwner) {\n        wistikiOwner.notifyDevices(\n          notificationData,\n          `POS_${getOriginalSerialNumber(wistikiModel.serial_number)}`,\n          params.device && params.device.uid ? params.device.uid : null,\n        );\n        // Check if wistiki is marked as lost and send email\n        if (wistikiOwner.wistiki_has_owner &&\n          wistikiOwner.wistiki_has_owner.is_lost) {\n          if (!params.user || wistikiOwner.email !== params.user.email) {\n            const wistikiOwnerPairing = await WistikiHasOwner.getUserPairing(wistikiOwner.email);\n            wistikiOwnerPairing.cache().update({ is_lost: false });\n            // user requester language\n            const languages = acceptLanguage.parse(wistikiOwner.locale);\n            EmailService.sendPositionUpdateEmail({\n              email: wistikiOwner.email,\n              wistiki: wistikiOwner.wistiki_has_owner.wistiki_alias,\n              language: languages[0],\n            });\n          }\n        }\n      }\n\n      _.each(wistikiFriends, async (wistikiFriend) => {\n        wistikiFriend.notifyDevices(\n          notificationData,\n          `POS_${getOriginalSerialNumber(wistikiModel.serial_number)}`,\n          params.device && params.device.uid,\n        );\n        // check if wistiki is marked as lost and send email\n        if (wistikiFriend.wistiki_has_friend &&\n          wistikiFriend.wistiki_has_friend.is_lost) {\n          if (!params.user || wistikiFriend.email !== params.user.email) {\n            const wistikiFriendPairing = await WistikiHasFriend.getUserPairing(wistikiFriend.email);\n            wistikiFriendPairing.cache().update({ is_lost: false });\n            // user requester language\n            const languages = acceptLanguage.parse(wistikiFriend.locale);\n            EmailService.sendPositionUpdateEmail({\n              email: wistikiFriend.email,\n              wistiki: wistikiFriend.wistiki_has_friend.wistiki_alias,\n              language: languages[0],\n            });\n          }\n        }\n      });\n      if (params.device) {\n        params.device.addPosition(positionModel);\n        Cache.setLastDevicePosition(params.device.uid, positionModel.get({ plain: true }));\n        this.emit('device', {\n          to: params.user,\n          device: params.device,\n          position: positionModel.get({ plain: true }),\n        });\n      } else if (params.application) {\n        chipoloLogger.info('inbound', {\n          data,\n          application_id: params.application.id,\n        });\n      }\n      this.emit('wistiki', {\n        origin: params.device ? params.device.uid : null,\n        wistiki: wistikiModel.get({ plain: true }),\n        position: positionModel.get({ plain: true }),\n      });\n    });\n\n    // TODO: send chipolos data to chiplo backend\n\n    return positionModel.get({ plain: true });\n  },\n\n  /**\n   * TODO: Description\n   * @param app\n   */\n  setup(app) {\n    this.app = app;\n    // Bind the apps service method to service to always look services up dynamically\n    this.service = app.service.bind(app);\n\n    this.filter('device', (data, connection) => {\n      if (connection.rooms.indexOf(`c:u:${connection.user.get('email')}`) === -1) return false;\n\n      if (\n        !connection.device ||\n        connection.device.get('type') === 'mobile' ||\n        connection.device.get('type') === 'tablet'\n      ) {\n        return false;\n      }\n      return {\n        device_uid: data.device.uid,\n        location: data.position,\n      };\n    });\n    this.filter('wistiki', (data, connection) => {\n      if (connection.rooms.indexOf(`c:s:${data.wistiki.serial_number}:r:w`) === -1) return false;\n\n      if (\n        !connection.device ||\n        connection.device.get('type') === 'mobile' ||\n        connection.device.get('type') === 'tablet'\n      ) {\n        return false;\n      }\n      return {\n        origin_device_uid: data.origin ? data.origin.uid : null,\n        serial_number: data.wistiki.serial_number,\n        location: data.position,\n        test: data.origin.uid,\n      };\n    });\n    this.filter({\n      created: () => false,\n    });\n  },\n};\nService.events = ['device', 'wistiki'];\nexport default Service;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}