{"version":3,"sources":["lib/photoUploader.js"],"names":["AWS","config","loadFromPath","p","base64data","bucket","key","contentType","s3","S3","client","putObject","Bucket","Key","Body","ContentType","uploadPhoto","region","apiVersion","resolve","reject","upload","Buffer","from","split","ACL","send","err","response","decodeURIComponent","Location"],"mappings":";;;;;;;;;;AAIA;;;;;;AAEAA,iBAAIC,MAAJ,CAAWC,YAAX,CAAwB,oCAAxB,E,CANA;;;;;;AAQA,SAASC,CAAT,CAAWC,UAAX,EAAuBC,MAAvB,EAA+BC,GAA/B,EAAoCC,WAApC,EAAiD;AAC/C,MAAMC,KAAK,IAAIR,iBAAIS,EAAR,EAAX;AACA,SAAOD,GAAGE,MAAH,CAAUC,SAAV,CAAoB;AACzBC,YAAQP,MADiB;AAEzBQ,SAAKP,GAFoB;AAGzBQ,UAAMV,UAHmB;AAIzBW,iBAAaR;AAJY,GAApB,CAAP;AAMD;;AAED;;;;;;;AAOA,SAASS,WAAT,CAAqBX,MAArB,EAA6BC,GAA7B,EAAkCF,UAAlC,EAA8C;AAC5C,MAAMI,KAAK,IAAIR,iBAAIS,EAAR,CAAW;AACpBQ,YAAQ,cADY;AAEpBC,gBAAY;AAFQ,GAAX,CAAX;AAIA,SAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCZ,OAAGa,MAAH,CAAU;AACRT,cAAQP,MADA;AAERQ,WAAKP,GAFG;AAGRQ,YAAMQ,OAAOC,IAAP,CAAYnB,WAAWoB,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAZ,EAAsC,QAAtC,CAHE;AAIRT,mBAAaX,WAAWoB,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,EAAyBA,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAJL;AAKRC,WAAK;;AALG,KAAV,EAOGC,IAPH,CAOQ,UAACC,GAAD,EAAMC,QAAN,EAAmB;AACzB,UAAID,GAAJ,EAAS;AACP,eAAOP,OAAOO,GAAP,CAAP;AACD;AACD,aAAOR,QAAQU,mBAAmBD,SAASE,QAA5B,CAAR,CAAP;AACD,KAZD,EAYG;AAAA,aAAOV,OAAOO,GAAP,CAAP;AAAA,KAZH;AAaD,GAdM,CAAP;AAeD;;kBAEc;AACbN,UAAQL;AADK,C","file":"photoUploader.js","sourcesContent":["/**\n * Wistiki SAS\n * Created by adnene on 08/12/2015.\n */\nimport AWS from 'aws-sdk';\n\nAWS.config.loadFromPath('./dist/config/aws_credentials.json');\n\nfunction p(base64data, bucket, key, contentType) {\n  const s3 = new AWS.S3();\n  return s3.client.putObject({\n    Bucket: bucket,\n    Key: key,\n    Body: base64data,\n    ContentType: contentType,\n  });\n}\n\n/**\n *\n * @param bucket\n * @param key\n * @param base64data\n * @return {Promise<String>}\n */\nfunction uploadPhoto(bucket, key, base64data) {\n  const s3 = new AWS.S3({\n    region: 'eu-central-1',\n    apiVersion: '2006-03-01',\n  });\n  return new Promise((resolve, reject) => {\n    s3.upload({\n      Bucket: bucket,\n      Key: key,\n      Body: Buffer.from(base64data.split(',')[1], 'base64'),\n      ContentType: base64data.split(':')[1].split(';')[0],\n      ACL: 'public-read',\n\n    }).send((err, response) => {\n      if (err) {\n        return reject(err);\n      }\n      return resolve(decodeURIComponent(response.Location));\n    }, err => reject(err));\n  });\n}\n\nexport default {\n  upload: uploadPhoto,\n};\n\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}