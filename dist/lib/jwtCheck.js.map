{"version":3,"sources":["lib/jwtCheck.js"],"names":["token","resolve","reject","errors","NotAuthenticated","jwt","verify","config","secretOrPrivateKey","err","data","name","debug","role","AppKey","findOne","where","id","application_id","sub","then","appKey","getApplication","application","GeneralError","get","all","User","cache","findById","Device","uid","result","user","device","message","error","require"],"mappings":"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","file":"jwtCheck.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport errors from 'feathers-errors/lib/index';\nimport { AppKey, Device, User } from '../db';\nimport config from '../config';\n\nconst debug = require('debug')('darwin:lib:jwt');\n\n\n/**\n * Library that takes JWT token, verify it against secret or Key and return a promise\n *\n * @param token JWT token to check\n * @returns {Promise} containing any array with user and device instance\n */\nexport default function (token) {\n  return new Promise((resolve, reject) => {\n    if (!token) {\n      return reject(new errors.NotAuthenticated('TOKEN_REQUIRED'));\n    }\n\n    return jwt.verify(token, config.jwt.secretOrPrivateKey, (err, data) => {\n      if (err) {\n        // Return a 401 Unauthorized if the token has expired.\n        if (err.name === 'TokenExpiredError' || err.name === 'JsonWebTokenError') {\n          reject(new errors.NotAuthenticated('TOKEN_EXPIRED', { errors: [err] }));\n        } else {\n          reject(new errors.NotAuthenticated(err.name, { errors: [err] }));\n        }\n        return null;\n      }\n      debug(data.role);\n      if (data.role === 'application') {\n        return AppKey.findOne({ where: { id: token, application_id: data.sub } })\n          .then((appKey) => {\n            if (!appKey) {\n              return reject(new errors.NotAuthenticated('APPLICATION_KEY_NOT_FOUND'));\n            }\n            return appKey.getApplication().then((application) => {\n              if (!application) {\n                return reject(new errors.GeneralError('APPLICATION_WAS_NOT_FOUND'));\n              }\n              if (application.get('id') !== data.sub) {\n                return reject(new errors.NotAuthenticated('INVALID_KEY_APPLICATION_ASSOCIATION'));\n              }\n              return resolve([application, appKey, 'application']);\n            });\n          });\n      }\n      return Promise.all([\n        User.cache().findById(data.sub),\n        Device.cache().findById(data.uid),\n      ]).then(\n        (result) => {\n          const [user, device] = result;\n          if (!user) {\n            return reject(new errors.NotAuthenticated(\n              'USER_NOT_FOUND',\n              { errors: [{ message: `User ${data.sub} not found}` }] },\n            ));\n          }\n          if (!device) {\n            return reject(new errors.NotAuthenticated(\n              'DEVICE_NOT_FOUND',\n              { errors: [{ message: `Device ${data.uid} not found}` }] },\n            ));\n          }\n          return resolve([user, device, 'user']);\n        },\n        error => reject(new errors.NotAuthenticated(error.message)),\n      );\n    });\n  });\n}\n\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}