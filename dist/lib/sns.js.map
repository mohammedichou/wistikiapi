{"version":3,"sources":["lib/sns.js"],"names":["subscribeToWakeMeUpTopic","createEndpoint","createAndroidEndpoint","createiOSEndpoint","confirmSubscriptionToWakeMeUpTopic","notifyEndpoint","AWS","config","loadFromPath","sns","SNS","region","endPoint","resolve","reject","snsLog","debug","endpoint","subscribe","TopicArn","topic","arn","wakemeup","Protocol","Endpoint","err","data","info","error","errorLog","applicationArn","deviceToken","customUserData","createPlatformEndpoint","PlatformApplicationArn","Token","CustomUserData","setEndpointAttributes","EndpointArn","Attributes","Enabled","production","android","environment","ios","then","token","params","confirmSubscription","snsArn","message","deviceUid","payload","default","GCM","APNS","APNS_SANDBOX","TargetArn","MessageStructure","Message","publish","code","er","setTimeout","e","d","errorcode","errormessage","Device","cache","update","sns_arn","where","id"],"mappings":"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","file":"sns.js","sourcesContent":["import AWS from 'aws-sdk';\nimport config from '../config';\nimport { snsLog, errorLog } from '../lib/logger';\nimport { Device } from '../db';\n\nAWS.config.loadFromPath('./dist/config/aws_credentials.json');\nconst sns = new AWS.SNS({\n  region: 'eu-central-1',\n});\n\n/**\n * Subscribe and iOS Endpoint to WakeMeUp topic used to wake up iOS application each\n * Xmn to perform background scans\n *\n * @param endPoint arn\n * @returns {Promise}\n */\nexport function subscribeToWakeMeUpTopic(endPoint) {\n  return new Promise((resolve, reject) => {\n    snsLog.debug('subscribeToWakeMeUpTopic', { endpoint: endPoint });\n    sns.subscribe({\n      TopicArn: config.sns.topic.arn.wakemeup,\n      Protocol: 'application',\n      Endpoint: endPoint,\n    }, (err, data) => {\n      snsLog.info('subscribeToWakeMeUpTopic callback', { data });\n      if (err) {\n        snsLog.error('subscribeToWakeMeUpTopic callback error', { endpoint: endPoint, error: err });\n        errorLog.error('subscribeToWakeMeUpTopic callback error', {\n          endpoint: endPoint,\n          error: err,\n        });\n        reject(err);\n        return;\n      }\n      resolve(data);\n    });\n  });\n}\n\n/**\n * Creates an End point.\n *\n * @param applicationArn\n * @param deviceToken\n * @param customUserData\n * @returns {Promise}\n */\nexport function createEndpoint(applicationArn, deviceToken, customUserData) {\n  return new Promise((resolve, reject) => {\n    sns.createPlatformEndpoint({\n      PlatformApplicationArn: applicationArn,\n      Token: deviceToken,\n      CustomUserData: customUserData,\n    }, (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      sns.setEndpointAttributes({\n        EndpointArn: data.EndpointArn,\n        Attributes: {\n          Enabled: 'true',\n        },\n      });\n      resolve(data);\n    });\n  });\n}\n\n/**\n * Creates an Android Endpoint.\n * Application ARN must be declared in environment config file config.sns.arn.android\n *\n * @param deviceToken\n * @param customUserData\n * @returns {Promise}\n */\nexport function createAndroidEndpoint(deviceToken, customUserData = '') {\n  return createEndpoint(config.sns.arn.production.android, deviceToken, customUserData);\n}\n\n/**\n * Creates an iOS Endpoint and subscribe it to WakeMeUp topic via {@link subscribeToWakeMeUpTopic}\n * Application ARN must be declared in environment config file config.sns.arn.ios\n *\n * @param deviceToken\n * @param attributes\n * @returns {Promise}\n */\nexport function createiOSEndpoint(deviceToken, customUserData = '', environment = 'production') {\n  // snsLog.debug('createiOSEndpoint', {\n  //   device_token: deviceToken,\n  //   custom_user_data: customUserData,\n  //   environment,\n  // });\n  return createEndpoint(\n    config.sns.arn[environment].ios,\n    deviceToken,\n    customUserData,\n  ).then((data) => {\n    subscribeToWakeMeUpTopic(data.EndpointArn);\n    return data;\n  });\n}\n\n\nexport function confirmSubscriptionToWakeMeUpTopic(token) {\n  return new Promise((resolve, reject) => {\n    const params = {\n      TopicArn: config.sns.topic.arn.wakemeup,\n      Token: token,\n    };\n    sns.confirmSubscription(params, (err, data) => {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(data);\n    });\n  });\n}\n\n/**\n * Notify device through SNS service with provided payload.\n * Payload will be stringified before sending push notif. So, it must be an object.\n * If SNS reject the request with error 'EndpointDisabled', then the endpoint is\n * updated and the push resent\n *\n * @param {String} device\n * @param {Object} payload\n * @return {Promise}\n */\nexport function notifyEndpoint(snsArn, message, deviceUid = null) {\n  const payload = {\n    default: JSON.stringify(message.default),\n    GCM: JSON.stringify(message.GCM),\n    APNS: JSON.stringify(message.APNS),\n    APNS_SANDBOX: JSON.stringify(message.APNS),\n  };\n  const params = {\n    TargetArn: snsArn,\n    MessageStructure: 'json',\n    Message: JSON.stringify(payload),\n  };\n  return new Promise((resolve, reject) => {\n    sns.publish(params, (err, data) => {\n      if (err) {\n        // snsLog.error(`Error sending push to ${snsArn}`, {\n        //   DeviceUid: deviceUid,\n        //   EndpointArn: snsArn,\n        //   params,\n        //   error: err,\n        // });\n        if (err.code === 'EndpointDisabled') {\n          // snsLog.warn(`Endpoint ${snsArn} Disabled`, {\n          //   DeviceUid: deviceUid,\n          //   EndpointArn: snsArn,\n          // });\n\n          sns.setEndpointAttributes({\n            Attributes: {\n              Enabled: 'true',\n            },\n            EndpointArn: snsArn,\n          }, (er) => {\n            if (er) {\n              // snsLog.error(`Error updating endpoint ${snsArn}`, {\n              //   DeviceUid: deviceUid,\n              //   EndpointArn: snsArn,\n              //   error: er,\n              // });\n            } else {\n              // snsLog.info(`Endpoint ${snsArn} updated with success`, {\n              //   DeviceUid: deviceUid,\n              //   EndpointArn: snsArn,\n              // });\n\n              setTimeout(() => {\n                sns.publish(params, (e, d) => {\n                  if (er) {\n                    // snsLog.error(`Error on resending push to ${snsArn} endpoint`, {\n                    //   DeviceUid: deviceUid,\n                    //   EndpointArn: snsArn,\n                    //   error: e,\n                    //   message: d,\n                    // });\n                  } else {\n                    // snsLog.info(`Push resent with success to ${snsArn} endpoint`, {\n                    //   DeviceUid: deviceUid,\n                    //   EndpointArn: snsArn,\n                    //   error: e,\n                    //   message: d,\n                    // });\n                  }\n                });\n              }, 1500);\n            }\n          });\n        } else if (err.code === 'InvalidParameter') {\n          snsLog.info(`Invalid parameter for ${snsArn} endpoint`, {\n            errorcode: err.code,\n            errormessage: err.message,\n            payload,\n            message,\n            params,\n            data,\n          });\n\n          if (err.message === 'Invalid parameter: TargetArn Reason: No endpoint found for the target arn specified') {\n            Device.cache().update({ sns_arn: null }, {\n              where: {\n                sns_arn: snsArn,\n              },\n            });\n          }\n        }\n        reject(err);\n        return;\n      }\n      if (message.default.id !== 'POS') {\n        // snsLog.info(`Push sent to ${snsArn} with success`, {\n        //   payload,\n        //   message,\n        //   params,\n        //   data,\n        // });\n      }\n\n      resolve(data);\n    });\n  });\n}\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}