{"version":3,"sources":["socket/socketAuthentication.js"],"names":["debug","_redisLog","tag","meta","err","reply","redisLogger","error","authenticate","socket","data","callback","token","then","identity","feathers","user","device","rooms","socketLog","postAuthenticate","redisClient","socketClient","SocketClient","monitor","get","setState","joinDeviceRoom","joinWistikiRoom","joinUserRoom","clientsConnected","getUserDevices","connectedDevices","multi","_","each","hgetall","execAsync","devicesStatus","deviceStatusMapping","uid","name","type","manufacturer","model","status","ring_status","date","statuses","map","mapValues","k","emit","getWistikiStates","SocketAuthenticate","SocketPostAuthentication"],"mappings":"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","file":"socketAuthentication.js","sourcesContent":["import {socketLog, redisLogger, default as logger} from '../lib/logger';\nimport jwtCheck from '../lib/jwtCheck';\nimport _ from 'lodash';\n\nimport SocketClient from './client';\nimport nodeDebug from 'debug';\nvar debug = nodeDebug('wistiki:rt:socketAuthentication');\n\n\nlet _redisLog = (tag, meta) => (err, reply) => {\n\tif (err) {\n\t\tredisLogger.error(tag, {meta: meta, error: err});\n\t}\n};\n/**\n * Socket Authenticate Callback definition\n *\n * @name AuthenticateCallback\n * @function\n * @param {Error} if set, error will be sent back to socket client\n * @param {boolean} if true, authentication is considered as succeeded else fail and disconnect client\n */\n\n/**\n * When connection is received try to authenticate it by checking given data.\n *\n * @param {object} socket\n * @param {{token: string}} data\n * @param {AuthenticateCallback} callback\n */\nlet authenticate = (socket, data, callback) => {\n\tjwtCheck(data.token).then(\n\t\t(identity) => {\n\t\t\tsocket.feathers.user = identity[0];\n\t\t\tsocket.feathers.device = identity[1];\n\t\t\tsocket.feathers.rooms = [];\n\t\t\tcallback(null, true); //OK client is authenticated\n\n\t\t},\n\t\t(err) => {\n\t\t\tsocketLog.error('authenticated request failed', {data: data, error: err});\n\t\t\tcallback(err, false); //NOK client is not authenticated\n\t\t}\n\t)\n};\n\n/**\n * Called when authentication is passed.\n *\n * @param socket\n * @param data\n */\nlet postAuthenticate = (redisClient) => (socket, data) => {\n\tdebug(`postAuthenticate`);\n\tlet socketClient = new SocketClient(socket, redisClient);\n\tsocket.monitor('user', socketClient.user.get('email'));\n\tsocket.monitor('uid', socketClient.device.get('uid'));\n\tsocket.monitor('name', socketClient.device.get('name'));\n\tsocketClient.setState();\n\tsocketClient.joinDeviceRoom();\n\tsocketClient.joinWistikiRoom();\n\tsocketClient.joinUserRoom()\n\t\t.then(\n\t\t\t(clientsConnected) => {\n\t\t\t\tdebug(`Got connected clients %s`, clientsConnected);\n\t\t\t\treturn socketClient.getUserDevices(clientsConnected)\n\t\t\t}\n\t\t)\n\t.then(\n\t\t(connectedDevices) => {\n\t\t\tdebug(`Got connected devices`, connectedDevices);\n\t\t\tlet multi = redisClient.multi();\n\t\t\t_.each(connectedDevices, (device) => {\n\t\t\t\tmulti.hgetall(`s:d:${device}`);\n\t\t\t});\n\t\t\treturn multi.execAsync();\n\t\t}\n\t)\n\t.then(\n\t\t(devicesStatus) => {\n\t\t\tdebug(`Got devices status`, devicesStatus);\n\t\t\tconst deviceStatusMapping = {\n\t\t\t\tuid: 'u',\n\t\t\t\tname: 'n',\n\t\t\t\ttype: 't',\n\t\t\t\tmanufacturer: 'm',\n\t\t\t\tmodel: 'mo',\n\t\t\t\tstatus: 's',\n\t\t\t\tring_status: 'rs',\n\t\t\t\tdate: 'd'\n\t\t\t};\n\t\t\tlet statuses = _.map(devicesStatus, (status) => _.mapValues(deviceStatusMapping, (k) => {\n\t\t\t\treturn status[k];\n\t\t\t}));\n\n\t\t\t_.each(statuses, (status) => {\n\t\t\t\tdebug('deviceStatusEvent : %s', JSON.stringify(status));\n\t\t\t\tsocketClient.emit('deviceStatusEvent', status);\n\t\t\t});\n\n\t\t}\n\t);\n\tsocketClient.getWistikiStates();\n};\n\nexport {\n\tauthenticate as SocketAuthenticate,\n\tpostAuthenticate as SocketPostAuthentication\n}\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}