{"version":3,"sources":["socket/index.js"],"names":["socketRedis","require","bluebird","promisifyAll","redis","RedisClient","prototype","Multi","debug","socket","app","io","use","port","socket_config","host","config","client","createClient","retry_strategy","options","error","code","redisLogger","Error","total_retry_time","times_connected","Math","max","attempt","on","err","adapter","timeout","authenticate","SocketAuthenticate","postAuthenticate","monitor","utc","format","id","last_connection","auth","disconnected"],"mappings":"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","file":"index.js","sourcesContent":["import socketioAuth from 'socketio-auth';\nvar socketRedis = require('socket.io-redis');\nimport redis from 'redis';\nimport config from '../config'\nimport {socketLog, redisLogger, default as logger} from '../lib/logger';\nimport bluebird from 'bluebird';\nimport monitorio from 'monitor.io';\nimport moment from 'moment';\n\nbluebird.promisifyAll(redis.RedisClient.prototype);\nbluebird.promisifyAll(redis.Multi.prototype);\n\nimport {SocketAuthenticate, SocketPostAuthentication} from './socketAuthentication';\n\nconst debug = require('debug')('wistiki:rt:index');\n\nlet socket = (app) => function (io) {\n\tio.use(monitorio({ port: 8000 }));\n\tlet socket_config = { host: config.socket.host, port: config.socket.port };\n\tlet client = redis.createClient({\n\t\thost: config.redis.host,\n\t\tport: config.redis.port,\n\t\tretry_strategy: function (options) {\n\t\t\tif (options.error.code === 'ECONNREFUSED') {\n\t\t\t\t// End reconnecting on a specific error and flush all commands with a individual error\n\t\t\t\tredisLogger.error('redis error', options.error);\n\t\t\t\treturn new Error('The server refused the connection');\n\t\t\t}\n\t\t\tif (options.total_retry_time > 1000 * 60 * 60) {\n\t\t\t\t// End reconnecting after a specific timeout and flush all commands with a individual error\n\t\t\t\tredisLogger.error('redis error', {error:'Retry time exhausted'});\n\t\t\t\treturn new Error('Retry time exhausted');\n\t\t\t}\n\t\t\tif (options.times_connected > 10) {\n\t\t\t\tredisLogger.error('redis error', {error:'End reconnecting with built in error'});\n\t\t\t\t// End reconnecting with built in error\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t// reconnect after\n\t\t\treturn Math.max(options.attempt * 100, 3000);\n\t\t}\n\t});\n\n\tclient.on('ready', ()=>{\n\t\tredisLogger.debug('redis ready');\n\t\tdebug('ready');\n\t});\n\n\t//look for connection errors and log\n\tclient.on('error', (err) => {\n\t\tredisLogger.error('redis error', err);\n\t\tdebug('error', err);\n\t});\n\tio.adapter(socketRedis(socket_config));\n\tsocketioAuth(io, {\n\t\ttimeout: 3000,\n\t\tauthenticate: SocketAuthenticate,\n\t\tpostAuthenticate: SocketPostAuthentication(client)\n\t});\n\n\t//Add tags to socket for debuging\n\tio.on('connection', function (socket) {\n\t\tsocket.monitor('last_connection', moment().utc().format('YYYY-MM-DD HH:mm:ss'));\n\t\tsocket.monitor('id', socket.id);\n\t\tdebug('connection', {\n\t\t\tid: socket.id,\n\t\t\tlast_connection: moment().utc().format('YYYY-MM-DD HH:mm:ss'),\n\t\t\tauth: socket.auth\n\t\t});\n\t});\n\n\tio.on('disconnect', function (socket) {\n\t\tdebug('disconnect', {id: socket.id, disconnected: moment().utc().format('YYYY-MM-DD HH:mm:ss')});\n\t});\n\n\n};\nexport default socket;\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}