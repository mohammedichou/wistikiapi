{"version":3,"sources":["db/models/wistiki.js"],"names":["debug","module","exports","sequelize","DataTypes","Wistiki","define","serial_number","type","BIGINT","allowNull","primaryKey","msn","STRING","mac_address","defaultValue","authentication_key","recovery_key","manufacturing_date","DATE","activation_date","last_software_update","last_software_version","INTEGER","references","model","key","flan","authorization_key","last_reset_date","model_id","underscored","freezeTableName","timestamps","createdAt","updatedAt","deletedAt","paranoid","prototype","getMsnCipher","secret","Buffer","from","replace","plain","alloc","fill","writeUIntBE","cipher","crypto","createCipheriv","update","event","wistiki","get","msn_cipher","toString","compareMsnCipher","msnCipher","requestMsnCipher","wistikiMsnCipher","compare","given","calculated","result","getRecoveryCipher","token","generateAuthorizationKey","uuid","v4","set","resetWistiki","getFriends","friends","_","each","friend","WistikiHasFriend","deleteUserPairing","email","getOwner","owner","WistikiHasOwner","getLastPosition","Cache","getLastWistikiPosition","then","cachePosition","formatted_address","street_number","street_name","city","reject","catch","e","getPositions","order","limit","joinTableAttributes","positions","length","pos","setLastWistikiPosition","position","getChecksum","serialNumber"],"mappings":"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","file":"wistiki.js","sourcesContent":["import crypto from 'crypto';\nimport { msnLog } from '../../lib/logger';\nimport uuid from 'node-uuid';\nimport nodeDebug from 'debug';\nimport _ from 'lodash';\n\nimport Cache from '../../lib/cache';\nimport { WistikiHasFriend, WistikiHasOwner } from '../index';\n\n\nconst debug = nodeDebug('wistiki:db:wistiki');\nmodule.exports = (sequelize, DataTypes) => {\n  const Wistiki = sequelize.define('wistiki', {\n    serial_number: {\n      type: DataTypes.BIGINT,\n      allowNull: false,\n      primaryKey: true,\n    },\n    msn: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    mac_address: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      defaultValue: 'FF:FF:FF:FF:FF:FF',\n    },\n    authentication_key: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n    recovery_key: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      defaultValue: 'FF:FF:FF:FF:FF:FF:FF:FF:FF:FF:FF:FF:FF:FF:FF:FF',\n    },\n    manufacturing_date: {\n      type: DataTypes.DATE,\n      allowNull: true,\n    },\n    activation_date: {\n      type: DataTypes.DATE,\n      allowNull: true,\n    },\n    last_software_update: {\n      type: DataTypes.DATE,\n      allowNull: true,\n    },\n    last_software_version: {\n      type: DataTypes.INTEGER(10),\n      allowNull: false,\n      references: {\n        model: 'software',\n        key: 'version',\n      },\n    },\n    flan: {\n      type: DataTypes.INTEGER(10),\n      allowNull: true,\n    },\n    authorization_key: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n    last_reset_date: {\n      type: DataTypes.DATE,\n      allowNull: true,\n    },\n    model_id: {\n      type: DataTypes.INTEGER(10),\n      allowNull: false,\n      references: {\n        model: 'software',\n        key: 'model_id',\n      },\n    },\n  }, {\n    underscored: true,\n    freezeTableName: true,\n    timestamps: false,\n    createdAt: false,\n    updatedAt: false,\n    deletedAt: false,\n    paranoid: true,\n  });\n  Wistiki.prototype.getMsnCipher = function () {\n    debug('getMsnCipher');\n    const secret = Buffer.from(this.recovery_key.replace(/:/g, ''), 'hex');\n    const plain = Buffer.alloc(16);\n    plain.fill(0);\n    plain.writeUIntBE(this.msn, 0, 3);\n    const cipher = crypto.createCipheriv('aes-128-ecb', secret, '').update(plain);\n    debug('MSN Cipher Calculation', {\n      event: 'msn cipher calculation',\n      wistiki: this.get({ plain: true }),\n      msn_cipher: {\n        secret: secret.toString('hex'),\n        plain: plain.toString('hex'),\n        cipher: cipher.toString('hex'),\n      },\n    });\n    return cipher;\n  };\n\n  Wistiki.prototype.compareMsnCipher = function (msnCipher) {\n    debug('compareMSNCipher: ', msnCipher);\n    const requestMsnCipher = Buffer.from(msnCipher.replace(/:/g, ''), 'hex');\n    debug('requestMsnCipher: ', requestMsnCipher);\n    const wistikiMsnCipher = this.getMsnCipher();\n    debug('calculatedMSNCipher: ', this.getMsnCipher());\n    if (requestMsnCipher.compare(wistikiMsnCipher) !== 0) {\n      debug('compareMsnCipher', {\n        event: 'compareMsnCipher',\n        wistiki: this.get({ plain: true }),\n        msn_cipher: {\n          given: msnCipher,\n          calculated: wistikiMsnCipher.toString('hex'),\n        },\n        result: requestMsnCipher.compare(wistikiMsnCipher) === 0,\n      });\n    }\n\n    return requestMsnCipher.compare(wistikiMsnCipher) === 0;\n  };\n\n  /**\n   * Creates a recovery cipher by using recovery key and recovery token sent by the app\n   *\n   * @param token Recovery token\n   * @return {Buffer}\n   */\n  Wistiki.prototype.getRecoveryCipher = function (token) {\n    const secret = Buffer.from(this.recovery_key.replace(/:/g, ''), 'hex');\n\n    const plain = Buffer.from(token.replace(/:/g, ''), 'hex');\n    const cipher = crypto.createCipheriv('aes-128-ecb', secret, '').update(plain);\n    return cipher;\n  };\n\n  /**\n   * Creates a 128bits key and set it as authorization_key\n   */\n  Wistiki.prototype.generateAuthorizationKey = function () {\n    const key = uuid.v4();\n    debug('generateAuthorizationKey', this);\n    debug(`generateAuthorizationKey for ${this.get('serial_number')} ->`, key);\n    this.set('authorization_key', key);\n  };\n\n  Wistiki.prototype.resetWistiki = async function () {\n    this.set('authentication_key', null);\n    const friends = await this.getFriends();\n    _.each(friends, (friend) => {\n      WistikiHasFriend.deleteUserPairing(friend.email, this.serial_number);\n    });\n    const [owner] = await this.getOwner();\n    WistikiHasOwner.deleteUserPairing(owner.email, this.serial_number);\n  };\n\n  /**\n   * Returns last Wistiki position. It starts by checking cache. If it does not find any\n   * record, then if will request a record from database. If a record is found in database\n   * then it store it in cache and return the object representation of the position. It nothing\n   * found in databse, then null is returned\n   *\n   * @return {null|Promise.<object>}\n   */\n  Wistiki.prototype.getLastPosition = function () {\n    return Cache.getLastWistikiPosition(this.get('serial_number'))\n      .then((cachePosition) => {\n        if (cachePosition) {\n          debug(`position found in cache for wistiki ${this.get('serial_number')}`, cachePosition);\n          cachePosition.formatted_address = cachePosition.formatted_address !== '' ? cachePosition.formatted_address : `${cachePosition.street_number} ${cachePosition.street_name} ${cachePosition.city}`;\n          return cachePosition;\n        }\n        return Promise.reject();\n      })\n      .catch((e) => {\n        debug(`position not found in cache for wistiki ${this.get('serial_number')}`, JSON.stringify(e));\n        return this.getPositions({\n          order: [['id', 'DESC']],\n          limit: 1,\n          joinTableAttributes: [],\n        })\n          .then((positions) => {\n            debug(`found ${positions.length} positions in database`);\n            if (positions.length) {\n              const pos = positions[0].get({ plain: true });\n              pos.formatted_address = pos.formatted_address !== '' ? pos.formatted_address : `${pos.street_number} ${pos.street_name} ${pos.city}`;\n              return Cache.setLastWistikiPosition(this.get('serial_number'), pos)\n                .then((cachePosition) => {\n                  debug('now in cache ', cachePosition);\n                  return pos;\n                })\n                .then((position) => {\n                  debug('position set in cache. Will return', position);\n                  return position;\n                });\n            }\n            return null;\n          });\n      });\n  };\n  Wistiki.getChecksum = function (serialNumber){\n\n  };\n  return Wistiki;\n};\n\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}