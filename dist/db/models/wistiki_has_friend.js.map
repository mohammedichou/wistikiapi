{"version":3,"sources":["db/models/wistiki_has_friend.js"],"names":["debug","require","module","exports","sequelize","DataTypes","WistikiHasFriend","define","wistiki_serial_number","type","BIGINT","allowNull","primaryKey","references","model","key","user_email","STRING","wistiki_alias","wistiki_picture","is_lost","BOOLEAN","defaultValue","link_loss","inverted_link_loss","share_start_date","DATE","share_end_date","color","ENUM","icon","underscored","freezeTableName","timestamps","createdAt","updatedAt","deletedAt","paranoid","defaultScope","where","scopes","not_active","$ne","beforeCreate","wistikiFriend","utc","deleteUserPairing","email","serialNumber","all","cache","deleteWistikiHasFriend","destroy","getUserPairing","getWistikiHasFriend","pairing","findOne","client","set","get","plain","build","isNewRecord","prototype","isActive","getFriends"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,+BAAjB,CAAd;;AAEAC,OAAOC,OAAP,GAAiB,UAAUC,SAAV,EAAqBC,SAArB,EAAgC;AAC/C,MAAMC,mBAAmBF,UAAUG,MAAV,CAAiB,oBAAjB,EAAuC;AAC9DC,2BAAuB;AACrBC,YAAMJ,UAAUK,MADK;AAErBC,iBAAW,KAFU;AAGrBC,kBAAY,IAHS;AAIrBC,kBAAY;AACVC,eAAO,SADG;AAEVC,aAAK;AAFK;AAJS,KADuC;AAU9DC,gBAAY;AACVP,YAAMJ,UAAUY,MADN;AAEVN,iBAAW,KAFD;AAGVC,kBAAY,IAHF;AAIVC,kBAAY;AACVC,eAAO,MADG;AAEVC,aAAK;AAFK;AAJF,KAVkD;AAmB9DG,mBAAe;AACbT,YAAMJ,UAAUY,MADH;AAEbN,iBAAW;AAFE,KAnB+C;AAuB9DQ,qBAAiB;AACfV,YAAMJ,UAAUY,MADD;AAEfN,iBAAW;AAFI,KAvB6C;AA2B9DS,aAAS;AACPX,YAAMJ,UAAUgB,OADT;AAEPV,iBAAW,KAFJ;AAGPW,oBAAc;AAHP,KA3BqD;AAgC9DC,eAAW;AACTd,YAAMJ,UAAUgB,OADP;AAETV,iBAAW,KAFF;AAGTW,oBAAc;AAHL,KAhCmD;AAqC9DE,wBAAoB;AAClBf,YAAMJ,UAAUgB,OADE;AAElBV,iBAAW,KAFO;AAGlBW,oBAAc;AAHI,KArC0C;AA0C9DG,sBAAkB;AAChBhB,YAAMJ,UAAUqB,IADA;AAEhBf,iBAAW,KAFK;AAGhBC,kBAAY;AAHI,KA1C4C;AA+C9De,oBAAgB;AACdlB,YAAMJ,UAAUqB,IADF;AAEdf,iBAAW;AAFG,KA/C8C;AAmD9DiB,WAAO;AACLnB,YAAMJ,UAAUwB,IAAV,CAAe,MAAf,EAAuB,QAAvB,EAAiC,QAAjC,EAA2C,QAA3C,EAAqD,SAArD,CADD;AAELlB,iBAAW;AAFN,KAnDuD;AAuD9DmB,UAAM;AACJrB,YAAMJ,UAAUY,MADZ;AAEJN,iBAAW;AAFP;AAvDwD,GAAvC,EA2DtB;AACDoB,iBAAa,IADZ;AAEDC,qBAAiB,IAFhB;AAGDC,gBAAY,IAHX;AAIDC,eAAW,kBAJV;AAKDC,eAAW,KALV;AAMDC,eAAW,gBANV;AAODC,cAAU,IAPT;AAQDC,kBAAc;AACZC,aAAO;AACLZ,wBAAgB;AADX;AADK,KARb;AAaDa,YAAQ;AACNC,kBAAY;AACVF,eAAO;AACLZ,0BAAgB;AACde,iBAAK;AADS;AADX;AADG;AADN;AAbP,GA3DsB,CAAzB;;AAmFApC,mBAAiBqC,YAAjB,CAA8B,UAACC,aAAD,EAAmB;AAC/C;AACAA,kBAAcnB,gBAAd,GAAiC,wBAASoB,GAAT,EAAjC;AACD,GAHD;;AAKA;;;;;;AAMAvC,mBAAiBwC,iBAAjB,GAAqC,UAAUC,KAAV,EAAiBC,YAAjB,EAA+B;AAClE,WAAO,kBAAQC,GAAR,CAAY,CACjBC,gBAAMC,sBAAN,CAA6BJ,KAA7B,EAAoCC,YAApC,CADiB,EAEjB1C,iBAAiB8C,OAAjB,CAAyB;AACvBb,aAAO;AACL/B,+BAAuBwC,YADlB;AAELhC,oBAAY+B,KAFP;AAGLpB,wBAAgB;AAHX;AADgB,KAAzB,CAFiB,CAAZ,CAAP;AAUD,GAXD;;AAaA;;;;;;;AAOArB,mBAAiB+C,cAAjB;AAAA,wFAAkC,iBAAgBN,KAAhB,EAAuBC,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACZE,gBAAMI,mBAAN,CAA0BP,KAA1B,EAAiCC,YAAjC,CADY;;AAAA;AAC5BO,qBAD4B;;AAEhCvD,oBAAMuD,OAAN;;AAFgC,kBAG3BA,OAH2B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAIdjD,iBAAiBkD,OAAjB,CAAyB;AACvCjB,uBAAO;AACLvB,8BAAY+B,KADP;AAELvC,yCAAuBwC,YAFlB;AAGLrB,kCAAgB;AAHX;AADgC,eAAzB,CAJc;;AAAA;AAI9B4B,qBAJ8B;;AAAA,mBAW1BA,OAX0B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAYtBjD,iBAAiB4C,KAAjB,GACHO,MADG,GAEHC,GAFG,CAEC,CAAC,oBAAD,EAAuBV,YAAvB,EAAqCD,KAArC,CAFD,EAE8C,yBAAeQ,QAAQI,GAAR,CAAY,EAAEC,OAAO,IAAT,EAAZ,CAAf,CAF9C,CAZsB;;AAAA;AAAA,+CAerBL,OAfqB;;AAAA;AAAA,+CAiBvB,IAjBuB;;AAAA;AAAA,+CAoBzBjD,iBAAiBuD,KAAjB,CAAuBN,OAAvB,EAAgC,EAAEO,aAAa,KAAf,EAAhC,CApByB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlC;;AAAA;AAAA;AAAA;AAAA;AAsBAxD,mBAAiByD,SAAjB,CAA2BC,QAA3B,GAAsC,YAAY;AAChD,WAAO,KAAKrC,cAAL,KAAwB,IAA/B;AACD,GAFD;;AAIArB,mBAAiB2D,UAAjB;AAAA,yFAA8B,kBAAgBjB,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9B;;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAO1C,gBAAP;AACD,CAlJD","file":"wistiki_has_friend.js","sourcesContent":["import moment from 'moment';\nimport cache from '../../lib/cache';\n\nconst debug = require('debug')('wistiki:db:wistiki_has_friend');\n\nmodule.exports = function (sequelize, DataTypes) {\n  const WistikiHasFriend = sequelize.define('wistiki_has_friend', {\n    wistiki_serial_number: {\n      type: DataTypes.BIGINT,\n      allowNull: false,\n      primaryKey: true,\n      references: {\n        model: 'wistiki',\n        key: 'serial_number',\n      },\n    },\n    user_email: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      primaryKey: true,\n      references: {\n        model: 'user',\n        key: 'email',\n      },\n    },\n    wistiki_alias: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    wistiki_picture: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n    is_lost: {\n      type: DataTypes.BOOLEAN,\n      allowNull: false,\n      defaultValue: '0',\n    },\n    link_loss: {\n      type: DataTypes.BOOLEAN,\n      allowNull: false,\n      defaultValue: '0',\n    },\n    inverted_link_loss: {\n      type: DataTypes.BOOLEAN,\n      allowNull: false,\n      defaultValue: '0',\n    },\n    share_start_date: {\n      type: DataTypes.DATE,\n      allowNull: false,\n      primaryKey: true,\n    },\n    share_end_date: {\n      type: DataTypes.DATE,\n      allowNull: true,\n    },\n    color: {\n      type: DataTypes.ENUM('PINK', 'ORANGE', 'PURPLE', 'YELLOW', 'LACOSTE'),\n      allowNull: true,\n    },\n    icon: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n  }, {\n    underscored: true,\n    freezeTableName: true,\n    timestamps: true,\n    createdAt: 'share_start_date',\n    updatedAt: false,\n    deletedAt: 'share_end_date',\n    paranoid: true,\n    defaultScope: {\n      where: {\n        share_end_date: null,\n      },\n    },\n    scopes: {\n      not_active: {\n        where: {\n          share_end_date: {\n            $ne: null,\n          },\n        },\n      },\n    },\n  });\n\n  WistikiHasFriend.beforeCreate((wistikiFriend) => {\n    // eslint-disable-next-line no-param-reassign\n    wistikiFriend.share_start_date = moment().utc();\n  });\n\n  /**\n   * Delete WistikiHasOwner entry from cache and database\n   * @param email\n   * @param serialNumber\n   * @return {Promise.<*[]>}\n   */\n  WistikiHasFriend.deleteUserPairing = function (email, serialNumber) {\n    return Promise.all([\n      cache.deleteWistikiHasFriend(email, serialNumber),\n      WistikiHasFriend.destroy({\n        where: {\n          wistiki_serial_number: serialNumber,\n          user_email: email,\n          share_end_date: null,\n        },\n      }),\n    ]);\n  };\n\n  /**\n   * Retrieve WistikiHasOwner entry from cache if available. If not, it queries database and cache\n   * result for future use.\n   * @param email\n   * @param serialNumber\n   * @return {Promise.<WistikiHasOwner>}\n   */\n  WistikiHasFriend.getUserPairing = async function (email, serialNumber) {\n    let pairing = await cache.getWistikiHasFriend(email, serialNumber);\n    debug(pairing);\n    if (!pairing) {\n      pairing = await WistikiHasFriend.findOne({\n        where: {\n          user_email: email,\n          wistiki_serial_number: serialNumber,\n          share_end_date: null,\n        },\n      });\n      if (pairing) {\n        await WistikiHasFriend.cache()\n          .client()\n          .set(['wistiki_has_friend', serialNumber, email], JSON.stringify(pairing.get({ plain: true })));\n        return pairing;\n      }\n      return null;\n    }\n\n    return WistikiHasFriend.build(pairing, { isNewRecord: false });\n  };\n  WistikiHasFriend.prototype.isActive = function () {\n    return this.share_end_date === null;\n  };\n\n  WistikiHasFriend.getFriends = async function (serialNumber) {\n\n  };\n\n  return WistikiHasFriend;\n};\n\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}