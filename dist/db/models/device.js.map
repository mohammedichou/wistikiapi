{"version":3,"sources":["db/models/device.js"],"names":["module","exports","sequelize","DataTypes","Device","define","uid","type","STRING","allowNull","primaryKey","name","manufacturer","model","os","version","creation_date","DATE","update_date","sns_arn","app_version","INTEGER","freezeTableName","underscored","timestamps","createdAt","updatedAt","deletedAt","paranoid","hooks","beforeCreate","device","fn","utc","beforeUpdate","prototype","getLastPosition","cache","getLastDevicePosition","get","cachedPosition","getPositions","order","limit","joinTableAttributes","positions","length","setLastDevicePosition","plain","notify","data","collapseKey","message","default","GCM","collapse_key","APNS","aps","updateSNSArn","UpdateARN","token","customUserData","environment","arnCreation","update","EndpointArn","_","lowerCase","then","reject","Error","custom_user_data","platform","error","err","createOrUpdate","deviceData","upsert","findById"],"mappings":"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","file":"device.js","sourcesContent":["import moment from 'moment';\nimport _ from 'lodash';\nimport { createAndroidEndpoint, createiOSEndpoint, notifyEndpoint } from '../../lib/sns';\nimport cache from '../../lib/cache';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const Device = sequelize.define('device', {\n    uid: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      primaryKey: true,\n    },\n    name: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n    manufacturer: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n    model: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n    os: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n    version: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n    type: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n    creation_date: {\n      type: DataTypes.DATE,\n      allowNull: true,\n    },\n    update_date: {\n      type: DataTypes.DATE,\n      allowNull: true,\n    },\n    sns_arn: {\n      type: DataTypes.STRING,\n      allowNull: true,\n\n    },\n    app_version: {\n      type: DataTypes.INTEGER(3),\n      allowNull: true,\n    },\n  }, {\n    freezeTableName: true,\n    underscored: true,\n    timestamps: false,\n    createdAt: false,\n    updatedAt: false,\n    deletedAt: false,\n    paranoid: true,\n    hooks: {\n      beforeCreate(device, fn) {\n        device.creation_date = moment().utc();\n        device.update_date = moment().utc();\n      },\n      beforeUpdate(device, fn) {\n        device.update_date = moment().utc();\n      },\n    },\n  });\n  /**\n   * Get the last position of this Wistiki. If no position found, null is returned\n   * @returns {Promise.<*>}\n   */\n  Device.prototype.getLastPosition = async function () {\n    const cachedPosition = await cache.getLastDevicePosition(this.get('uid'));\n    if (!cachedPosition) {\n      const positions = await this.getPositions({\n        order: [['id', 'DESC']],\n        limit: 1,\n        joinTableAttributes: [],\n      });\n      if (positions.length) {\n        cache.setLastDevicePosition(this.uid, positions[0].get({ plain: true }));\n        return positions[0];\n      }\n      return null;\n    }\n    return cachedPosition;\n  };\n\n  /**\n   * Send push notification to this device\n   *\n   * @param data\n   * @param collapseKey\n   * @returns {Promise}\n   */\n  Device.prototype.notify = function (data, collapseKey) {\n    const message = {\n      default: data,\n      GCM: {\n        data,\n        collapse_key: collapseKey,\n\n      },\n      APNS: {\n        data,\n        aps: {\n          'content-available': 1,\n        },\n      },\n\n    };\n    return notifyEndpoint(this.get('sns_arn'), message, this.uid);\n  };\n\n  /**\n   *\n   * @param token\n   * @param customUserData\n   * @param environment\n   * @return {Promise.<Device, Error>}\n   */\n  Device.prototype.updateSNSArn = function UpdateARN(token, customUserData, environment) {\n    const arnCreation = data => this.cache().update({ sns_arn: data.EndpointArn });\n\n    if (_.lowerCase(this.manufacturer) === 'apple' &&\n      (this.type === 'mobile' || this.type === 'tablet')) {\n      return createiOSEndpoint(token, customUserData, environment)\n        .then(arnCreation, err => Promise.reject(new Error({\n          token,\n          custom_user_data: customUserData,\n          platform: 'iOS',\n          environment,\n          error: err,\n        })));\n    } else if (_.lowerCase(this.os) === 'android') {\n      return createAndroidEndpoint(token, customUserData)\n        .then(arnCreation, err => Promise.reject(new Error({\n          token,\n          custom_user_data: customUserData,\n          error: err,\n        })));\n    }\n  };\n\n  Device.createOrUpdate = function (deviceData, token = null, environment) {\n    return Device.cache()\n      .upsert(deviceData).then(() => Device.cache().findById(deviceData.uid))\n      // Update SNS Arn if notification token is provided\n      .then((device) => {\n        if (token) {\n          return device.updateSNSArn(token, device.get('uid'), environment);\n        }\n        return device;\n      });\n  };\n  return Device;\n};\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}