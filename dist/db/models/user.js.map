{"version":3,"sources":["db/models/user.js"],"names":["debug","require","module","exports","sequelize","DataTypes","User","define","email","type","STRING","allowNull","primaryKey","first_name","last_name","gender","ENUM","defaultValue","avatar_url","phone_number","creation_date","DATE","confirmation_token","confirmation_date","update_date","password","status","password_reset_token","password_reset_date","locale","underscored","freezeTableName","timestamps","createdAt","updatedAt","deletedAt","paranoid","hooks","beforeCreate","user","utc","uuid","v4","hashPassword","beforeUpdate","prototype","verifyPassword","hash","getDevicesSnsArns","uid","getOwnedDevices","then","devices","list","_","filter","map","device","get","isEmpty","d","notifyDevices","notification","notificationId","forEach","sns_arn","notify","getUserWistikis","ownedWistikis","getActiveOwnership","sharedWistikis","getActiveSharedWistikis","all","flatten","arrays","getNonSensibleData","omit","plain","sensibleData","checkAccount","cache","findById","reject","errors","BadRequest","crypto","createHash","config","update","salt","digest"],"mappings":"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","file":"user.js","sourcesContent":["/* eslint-disable no-param-reassign */\nimport crypto from 'crypto';\nimport uuid from 'node-uuid';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport errors from 'feathers-errors';\nimport config, { sensibleData } from '../../config';\n\nconst debug = require('debug')('darwin:models:user');\n\nmodule.exports = (sequelize, DataTypes) => {\n  const User = sequelize.define(\n    'user',\n    {\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        primaryKey: true,\n      },\n      first_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      last_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      gender: {\n        type: DataTypes.ENUM('M', 'F'),\n        allowNull: true,\n        defaultValue: 'M',\n      },\n      avatar_url: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      phone_number: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      creation_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      confirmation_token: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      confirmation_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      update_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      password: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      status: {\n        type: DataTypes.ENUM('CONFIRMED', 'NOT CONFIRMED', 'DESACTIVATED'),\n        allowNull: false,\n        defaultValue: 'CONFIRMED',\n      },\n      password_reset_token: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      password_reset_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      locale: {\n        type: DataTypes.ENUM('en-US', 'fr-FR', 'de-DE', 'ja-JP'),\n        allowNull: false,\n        defaultValue: 'en-US',\n      },\n    },\n    {\n      underscored: true,\n      freezeTableName: true,\n      timestamps: false,\n      createdAt: false,\n      updatedAt: 'update_date',\n      deletedAt: false,\n      paranoid: true,\n      hooks: {\n        beforeCreate(user) {\n          user.creation_date = moment().utc();\n          user.update_date = moment().utc();\n          user.confirmation_token = uuid.v4();\n          user.password = User.hashPassword(user.password);\n        },\n        beforeUpdate(user) {\n          user.update_date = moment().utc();\n        },\n      },\n    },\n  );\n\n\n  /**\n   * Verifies plain password against stored hashed password.\n   * @param {string} password string to check against user password\n   * @return {boolean} true if provided string matches stored user password\n   */\n  User.prototype.verifyPassword = function (password) {\n    const hash = User.hashPassword(password);\n    return this.password === hash;\n  };\n  /**\n   *\n   * @param uid uid to eliminate\n   * @returns {*}\n   */\n  User.prototype.getDevicesSnsArns = function (uid = null) {\n    return this.getOwnedDevices().then((devices) => {\n      const list = _.filter(devices.map((device) => {\n        if (device.get('uid') !== uid) {\n          return device.get('sns_arn');\n        }\n        return null;\n      }), d => !_.isEmpty(d));\n      return list;\n    });\n  };\n\n  /**\n   * Notifies all user devices that does not match given uid\n   *\n   * @param uid default value null\n   * @param notification object\n   * @param notificationId\n   * @returns {Promise}\n   */\n  User.prototype.notifyDevices = function (notification, notificationId, uid = null) {\n    return this.getOwnedDevices().then((devices) => {\n      _.forEach(devices, (device) => {\n        if (device.uid !== uid && device.sns_arn != null) {\n          device.notify(notification, notificationId);\n        }\n      });\n    });\n  };\n\n  /**\n   * Retrieve all wistikis that belongs to user\n   *\n   * @returns {Promise.<Array.Wistiki>} Wistiki models arrays\n   */\n  User.prototype.getUserWistikis = function () {\n    const ownedWistikis = this.getActiveOwnership();\n    const sharedWistikis = this.getActiveSharedWistikis();\n    return Promise.all([ownedWistikis, sharedWistikis]).then(arrays => _.flatten(arrays));\n  };\n\n  /**\n   * Returns JSON Object representing the user model without sensible data\n   *\n   * @returns {}\n   */\n  User.prototype.getNonSensibleData = function () {\n    return _.omit(this.get({ plain: true }), sensibleData.user);\n  };\n\n\n  /**\n   * Check if user email exist or not. If does not exist, it return BadRequest\n   * (BAD_CREDENTIALS_ERROR) Error.\n   * If user instance if found, checks if user account is confirmed or not. If not returns\n   * BadRequest (ACCOUNT_NOT_CONFIRMED_ERROR) Error\n   *\n   * @param email {String}\n   * @return {Promise.<errors.BadRequest|User>}\n   */\n  User.checkAccount = function (email) {\n    return User.cache().findById(email).then((user) => {\n      if (!user) {\n        return Promise.reject(new errors.BadRequest('BAD_CREDENTIALS_ERROR'));\n      }\n      // Check account status\n      if (user.status === 'NOT CONFIRMED') {\n        return Promise.reject(new errors.BadRequest('ACCOUNT_NOT_CONFIRMED_ERROR'));\n      }\n      return user;\n    });\n  };\n\n  User.hashPassword = function (password) {\n    return crypto.createHash(config.password.type)\n      .update(password + config.password.salt)\n      .digest(config.password.digest);\n  };\n  return User;\n};\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}