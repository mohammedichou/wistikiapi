{"version":3,"sources":["db/models/device_has_user.js"],"names":["debug","require","module","exports","sequelize","DataTypes","DeviceHasUser","define","device_uid","type","STRING","allowNull","primaryKey","references","model","key","user_email","creation_date","DATE","token","defaultValue","refresh_token","UUIDV4","expiration_date","underscored","freezeTableName","timestamps","createdAt","updatedAt","deletedAt","paranoid","beforeCreate","deviceUser","utc","add","uuid","v4","jwt","sign","sub","uid","config","secretOrPrivateKey","options","beforeUpdate","deleteDevicePairing","all","cache","deleteDeviceHasUser","destroy","where","getDevicePairing","email","client","get","pairing","findOne","set","plain","build","isNewRecord"],"mappings":"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","file":"device_has_user.js","sourcesContent":["import moment from 'moment';\nimport jwt from 'jsonwebtoken';\nimport uuid from 'node-uuid';\nimport config from '../../config';\nimport cache from '../../lib/cache';\n\n/* eslint-disable no-param-reassign */\nconst debug = require('debug')('darwin:models:device_has_user');\n\nmodule.exports = function (sequelize, DataTypes) {\n  const DeviceHasUser = sequelize.define('device_has_user', {\n    device_uid: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      primaryKey: true,\n      references: {\n        model: 'device',\n        key: 'uid',\n      },\n    },\n    user_email: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      primaryKey: true,\n      references: {\n        model: 'user',\n        key: 'email',\n      },\n    },\n    creation_date: {\n      type: DataTypes.DATE,\n      allowNull: false,\n    },\n    token: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      defaultValue: '',\n    },\n    refresh_token: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      defaultValue: DataTypes.UUIDV4,\n    },\n    expiration_date: {\n      type: DataTypes.DATE,\n      allowNull: false,\n    },\n  }, {\n    underscored: true,\n    freezeTableName: true,\n    timestamps: false,\n    createdAt: false,\n    updatedAt: false,\n    deletedAt: false,\n    paranoid: false,\n  });\n\n  DeviceHasUser.beforeCreate((deviceUser) => {\n    debug('beforeCreate', deviceUser);\n    deviceUser.creation_date = moment().utc();\n    deviceUser.expiration_date = moment().add(30, 'days').utc();\n    deviceUser.refresh_token = uuid.v4();\n    deviceUser.token = jwt.sign(\n      { sub: deviceUser.user_email, uid: deviceUser.device_uid },\n      config.jwt.secretOrPrivateKey,\n      config.jwt.options,\n    );\n  });\n\n  DeviceHasUser.beforeUpdate((deviceUser) => {\n    debug('beforeUpdate', deviceUser);\n    deviceUser.expiration_date = moment().add(30, 'days').utc();\n    deviceUser.refresh_token = uuid.v4();\n    deviceUser.token = jwt.sign(\n      { sub: deviceUser.user_email, uid: deviceUser.device_uid },\n      config.jwt.secretOrPrivateKey,\n      config.jwt.options,\n    );\n  });\n  DeviceHasUser.deleteDevicePairing = function (uid) {\n    return Promise.all([\n      cache.deleteDeviceHasUser(uid),\n      DeviceHasUser.destroy({ where: { device_uid: uid } }),\n    ]);\n  };\n\n  /**\n   *\n   * @param email\n   * @param uid\n   * @return {Promise.<DeviceHasUser>}\n   */\n  DeviceHasUser.getDevicePairing = async function (email, uid) {\n    let pairing = await DeviceHasUser.cache().client().get(['device_has_user', uid, email]);\n    if (!pairing) {\n      pairing = await DeviceHasUser.findOne({\n        where: {\n          user_email: email,\n          device_uid: uid,\n        },\n      });\n      if (pairing) {\n        await DeviceHasUser.cache()\n          .client()\n          .set(['device_has_user', uid, email], JSON.stringify(pairing.get({ plain: true })));\n        return pairing;\n      }\n      return null;\n    }\n\n    return DeviceHasUser.build(pairing, { isNewRecord: false });\n  };\n\n  return DeviceHasUser;\n};\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}