{"version":3,"sources":["db/models/wistiki_has_owner.js"],"names":["debug","require","module","exports","sequelize","DataTypes","WistikiHasOwner","define","wistiki_serial_number","type","BIGINT","allowNull","primaryKey","references","model","key","user_email","STRING","wistiki_alias","wistiki_picture","is_lost","BOOLEAN","defaultValue","link_loss","inverted_link_loss","ownership_start_date","DATE","ownership_end_date","color","ENUM","icon","underscored","freezeTableName","timestamps","createdAt","updatedAt","deletedAt","paranoid","defaultScope","where","scopes","not_active","$ne","beforeCreate","wistikiOwner","utc","deleteUserPairing","email","serialNumber","all","cache","deleteWistikiHasOwner","destroy","getUserPairing","getWistikiHasOwner","pairing","findOne","client","set","get","plain","build","isNewRecord","prototype","isActive"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,8BAAjB,CAAd;;AAEAC,OAAOC,OAAP,GAAiB,UAAUC,SAAV,EAAqBC,SAArB,EAAgC;AAC/C,MAAMC,kBAAkBF,UAAUG,MAAV,CAAiB,mBAAjB,EAAsC;AAC5DC,2BAAuB;AACrBC,YAAMJ,UAAUK,MADK;AAErBC,iBAAW,KAFU;AAGrBC,kBAAY,IAHS;AAIrBC,kBAAY;AACVC,eAAO,SADG;AAEVC,aAAK;AAFK;AAJS,KADqC;AAU5DC,gBAAY;AACVP,YAAMJ,UAAUY,MADN;AAEVN,iBAAW,KAFD;AAGVC,kBAAY,IAHF;AAIVC,kBAAY;AACVC,eAAO,MADG;AAEVC,aAAK;AAFK;AAJF,KAVgD;AAmB5DG,mBAAe;AACbT,YAAMJ,UAAUY,MADH;AAEbN,iBAAW;AAFE,KAnB6C;AAuB5DQ,qBAAiB;AACfV,YAAMJ,UAAUY;AADD,KAvB2C;AA0B5DG,aAAS;AACPX,YAAMJ,UAAUgB,OADT;AAEPV,iBAAW,KAFJ;AAGPW,oBAAc;AAHP,KA1BmD;AA+B5DC,eAAW;AACTd,YAAMJ,UAAUgB,OADP;AAETV,iBAAW,KAFF;AAGTW,oBAAc;AAHL,KA/BiD;AAoC5DE,wBAAoB;AAClBf,YAAMJ,UAAUgB,OADE;AAElBV,iBAAW,KAFO;AAGlBW,oBAAc;AAHI,KApCwC;AAyC5DG,0BAAsB;AACpBhB,YAAMJ,UAAUqB,IADI;AAEpBf,iBAAW,KAFS;AAGpBC,kBAAY;AAHQ,KAzCsC;AA8C5De,wBAAoB;AAClBlB,YAAMJ,UAAUqB,IADE;AAElBf,iBAAW;AAFO,KA9CwC;AAkD5DiB,WAAO;AACLnB,YAAMJ,UAAUwB,IAAV,CAAe,MAAf,EAAuB,QAAvB,EAAiC,QAAjC,EAA2C,QAA3C,EAAqD,SAArD,CADD;AAELlB,iBAAW;AAFN,KAlDqD;AAsD5DmB,UAAM;AACJrB,YAAMJ,UAAUY,MADZ;AAEJN,iBAAW;AAFP;AAtDsD,GAAtC,EA0DrB;AACDoB,iBAAa,IADZ;AAEDC,qBAAiB,IAFhB;AAGDC,gBAAY,IAHX;AAIDC,eAAW,sBAJV;AAKDC,eAAW,KALV;AAMDC,eAAW,oBANV;AAODC,cAAU,IAPT;AAQDC,kBAAc;AACZC,aAAO;AACLZ,4BAAoB;AADf;AADK,KARb;AAaDa,YAAQ;AACNC,kBAAY;AACVF,eAAO;AACLZ,8BAAoB;AAClBe,iBAAK;AADa;AADf;AADG;AADN;AAbP,GA1DqB,CAAxB;AAiFApC,kBAAgBqC,YAAhB,CAA6B,UAACC,YAAD,EAAkB;AAC7C;AACAA,iBAAanB,oBAAb,GAAoC,wBAASoB,GAAT,EAApC;AACD,GAHD;;AAKA;;;;;;AAMAvC,kBAAgBwC,iBAAhB,GAAoC,UAAUC,KAAV,EAAiBC,YAAjB,EAA+B;AACjE,WAAO,kBAAQC,GAAR,CAAY,CACjBC,gBAAMC,qBAAN,CAA4BJ,KAA5B,EAAmCC,YAAnC,CADiB,EAEjB1C,gBAAgB8C,OAAhB,CAAwB;AACtBb,aAAO;AACL/B,+BAAuBwC,YADlB;AAELhC,oBAAY+B,KAFP;AAGLpB,4BAAoB;AAHf;AADe,KAAxB,CAFiB,CAAZ,CAAP;AAUD,GAXD;;AAaA;;;;;;;AAOArB,kBAAgB+C,cAAhB;AAAA,wFAAiC,iBAAgBN,KAAhB,EAAuBC,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACXE,gBAAMI,kBAAN,CAAyBP,KAAzB,EAAgCC,YAAhC,CADW;;AAAA;AAC3BO,qBAD2B;;AAE/BvD,oBAAMuD,OAAN;;AAF+B,kBAG1BA,OAH0B;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAIbjD,gBAAgBkD,OAAhB,CAAwB;AACtCjB,uBAAO;AACLvB,8BAAY+B,KADP;AAELvC,yCAAuBwC,YAFlB;AAGLrB,sCAAoB;AAHf;AAD+B,eAAxB,CAJa;;AAAA;AAI7B4B,qBAJ6B;;AAAA,mBAWzBA,OAXyB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAYrBjD,gBAAgB4C,KAAhB,GACHO,MADG,GAEHC,GAFG,CAEC,CAAC,mBAAD,EAAsBV,YAAtB,EAAoCD,KAApC,CAFD,EAE6C,yBAAeQ,QAAQI,GAAR,CAAY,EAAEC,OAAO,IAAT,EAAZ,CAAf,CAF7C,CAZqB;;AAAA;AAAA,+CAepBL,OAfoB;;AAAA;AAAA,+CAiBtB,IAjBsB;;AAAA;AAAA,+CAoBxBjD,gBAAgBuD,KAAhB,CAAsBN,OAAtB,EAA+B,EAAEO,aAAa,KAAf,EAA/B,CApBwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjC;;AAAA;AAAA;AAAA;AAAA;AAsBAxD,kBAAgByD,SAAhB,CAA0BC,QAA1B,GAAqC,YAAY;AAC/C,WAAO,KAAKrC,kBAAL,KAA4B,IAAnC;AACD,GAFD;;AAIA,SAAOrB,eAAP;AACD,CA5ID","file":"wistiki_has_owner.js","sourcesContent":["import moment from 'moment';\nimport cache from '../../lib/cache';\n\nconst debug = require('debug')('wistiki:db:wistiki_has_owner');\n\nmodule.exports = function (sequelize, DataTypes) {\n  const WistikiHasOwner = sequelize.define('wistiki_has_owner', {\n    wistiki_serial_number: {\n      type: DataTypes.BIGINT,\n      allowNull: false,\n      primaryKey: true,\n      references: {\n        model: 'wistiki',\n        key: 'serial_number',\n      },\n    },\n    user_email: {\n      type: DataTypes.STRING,\n      allowNull: false,\n      primaryKey: true,\n      references: {\n        model: 'user',\n        key: 'email',\n      },\n    },\n    wistiki_alias: {\n      type: DataTypes.STRING,\n      allowNull: false,\n    },\n    wistiki_picture: {\n      type: DataTypes.STRING,\n    },\n    is_lost: {\n      type: DataTypes.BOOLEAN,\n      allowNull: false,\n      defaultValue: '0',\n    },\n    link_loss: {\n      type: DataTypes.BOOLEAN,\n      allowNull: false,\n      defaultValue: '0',\n    },\n    inverted_link_loss: {\n      type: DataTypes.BOOLEAN,\n      allowNull: false,\n      defaultValue: '0',\n    },\n    ownership_start_date: {\n      type: DataTypes.DATE,\n      allowNull: false,\n      primaryKey: true,\n    },\n    ownership_end_date: {\n      type: DataTypes.DATE,\n      allowNull: true,\n    },\n    color: {\n      type: DataTypes.ENUM('PINK', 'ORANGE', 'PURPLE', 'YELLOW', 'LACOSTE'),\n      allowNull: true,\n    },\n    icon: {\n      type: DataTypes.STRING,\n      allowNull: true,\n    },\n  }, {\n    underscored: true,\n    freezeTableName: true,\n    timestamps: true,\n    createdAt: 'ownership_start_date',\n    updatedAt: false,\n    deletedAt: 'ownership_end_date',\n    paranoid: true,\n    defaultScope: {\n      where: {\n        ownership_end_date: null,\n      },\n    },\n    scopes: {\n      not_active: {\n        where: {\n          ownership_end_date: {\n            $ne: null,\n          },\n        },\n      },\n    },\n  });\n  WistikiHasOwner.beforeCreate((wistikiOwner) => {\n    // eslint-disable-next-line no-param-reassign\n    wistikiOwner.ownership_start_date = moment().utc();\n  });\n\n  /**\n   * Delete WistikiHasOwner entry from cache and database\n   * @param email\n   * @param serialNumber\n   * @return {Promise.<*[]>}\n   */\n  WistikiHasOwner.deleteUserPairing = function (email, serialNumber) {\n    return Promise.all([\n      cache.deleteWistikiHasOwner(email, serialNumber),\n      WistikiHasOwner.destroy({\n        where: {\n          wistiki_serial_number: serialNumber,\n          user_email: email,\n          ownership_end_date: null,\n        },\n      }),\n    ]);\n  };\n\n  /**\n   * Retrieve WistikiHasOwner entry from cache if available. If not, it queries database and cache\n   * result for future use.\n   * @param email\n   * @param serialNumber\n   * @return {Promise.<WistikiHasOwner>}\n   */\n  WistikiHasOwner.getUserPairing = async function (email, serialNumber) {\n    let pairing = await cache.getWistikiHasOwner(email, serialNumber);\n    debug(pairing);\n    if (!pairing) {\n      pairing = await WistikiHasOwner.findOne({\n        where: {\n          user_email: email,\n          wistiki_serial_number: serialNumber,\n          ownership_end_date: null,\n        },\n      });\n      if (pairing) {\n        await WistikiHasOwner.cache()\n          .client()\n          .set(['wistiki_has_owner', serialNumber, email], JSON.stringify(pairing.get({ plain: true })));\n        return pairing;\n      }\n      return null;\n    }\n\n    return WistikiHasOwner.build(pairing, { isNewRecord: false });\n  };\n  WistikiHasOwner.prototype.isActive = function () {\n    return this.ownership_end_date === null;\n  };\n\n  return WistikiHasOwner;\n};\n"],"sourceRoot":"/opt/atlassian/pipelines/agent/build/src"}